{
  "ok": [
    {
      "name": "accordions",
      "dependencies": [],
      "registryDependencies": [
        "clsx",
        "@radix-ui/react-accordion"
      ],
      "files": [
        "primitives/accordions/index.tsx"
      ],
      "doc": "---\ntitle: Accordions\ndescription: Accordions allow users to expand and collapse content sections.\npreview: accordions-example\npreviewSize: sm\nfeatures:\n  - Full keyboard navigation\n  - Can be controlled or uncontrolled\n  - Fully animated transitions\n  - Can be used as a single or multiple accordion\n---\n\n## Usage\n\n<CodeBlock lang=\"bash\">{`import { Accordions } from '@/vibes/soul/primitives/accordions'`}</CodeBlock>\n\n<CodeBlock lang=\"bash\">{`const accordions = [\n  {\n    title: 'What is your return policy?',\n    content:\n      'Our return policy allows you to return items within 30 days of purchase for a full refund. Items must be in their original condition and packaging.',\n  },\n  {\n    title: 'How long does shipping take?',\n    content:\n      'Shipping typically takes 3-5 business days for domestic orders. International shipping may take longer depending on the destination.',\n  },\n  {\n    title: 'Do you offer international shipping?',\n    content:\n      'Yes, we offer international shipping to select countries. Please check our shipping policy for more details on available locations.',\n  },\n  {\n    title: 'How can I track my order?',\n    content:\n      'Once your order has shipped, you will receive an email with a tracking number. You can use this number to track your order on our website.',\n  },\n]`}</CodeBlock>\n\n<CodeBlock lang=\"bash\">{`<Accordions accordions={accordions} />`}</CodeBlock>\n\n## API Reference\n\n| Prop         | Type                                                                      | Default      |\n| ------------ | ------------------------------------------------------------------------- | ------------ |\n| `accordions` | `object[]` <Tooltip content={`{title: ReactNode, content: ReactNode}`} /> |              |\n| `type`       | `'single'` \\| `'multiple'`                                                | `'multiple'` |\n\n## Figma\n\n<Figma url=\"https://www.figma.com/design/kgCf8OkDCe90wBSKNNqueL/Soul-Vibe?node-id=2297-42908&t=dbm9GtAtS2A3vy2g-4\" />\n",
      "docFile": "/dev/vibes/soul/docs/accordions.mdx",
      "example": "import { Accordion, Accordions } from '@/vibes/soul/primitives/accordions';\n\nexport default function Preview() {\n  const accordions = [\n    {\n      title: 'What is your return policy?',\n      content:\n        'Our return policy allows you to return items within 30 days of purchase for a full refund. Items must be in their original condition and packaging.',\n    },\n    {\n      title: 'How long does shipping take?',\n      content:\n        'Shipping typically takes 3-5 business days for domestic orders. International shipping may take longer depending on the destination.',\n    },\n    {\n      title: 'Do you offer international shipping?',\n      content:\n        'Yes, we offer international shipping to select countries. Please check our shipping policy for more details on available locations.',\n    },\n    {\n      title: 'How can I track my order?',\n      content:\n        'Once your order has shipped, you will receive an email with a tracking number. You can use this number to track your order on our website.',\n    },\n  ];\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"py-8\">\n        <Accordions\n          className=\"m-auto w-1/2 max-w-screen-lg items-start justify-center p-10\"\n          type=\"multiple\"\n        >\n          {accordions.map(({ title, content }, index) => (\n            <Accordion key={index} title={title} value={index.toString()}>\n              {content}\n            </Accordion>\n          ))}\n        </Accordions>\n      </div>\n      <div className=\"bg-foreground py-8\">\n        <Accordions\n          className=\"m-auto w-1/2 max-w-screen-lg items-start justify-center p-10\"\n          type=\"multiple\"\n        >\n          {accordions.map(({ title, content }, index) => (\n            <Accordion colorScheme=\"dark\" key={index} title={title} value={index.toString()}>\n              {content}\n            </Accordion>\n          ))}\n        </Accordions>\n      </div>\n    </div>\n  );\n}\n",
      "exampleFile": "/src/vibes/soul/examples/primitives/accordions/index.tsx",
      "componentName": "Accordions",
      "source": {
        "primitives/accordions/index.tsx": "'use client';\n\nimport * as AccordionsPrimitive from '@radix-ui/react-accordion';\nimport { clsx } from 'clsx';\nimport React from 'react';\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n * :root {\n *   --accordion-light-title-text: hsl(var(--contrast-400));\n *   --accordion-light-title-text-hover: hsl(var(--foreground));\n *   --accordion-light-title-icon: hsl(var(--contrast-500));\n *   --accordion-light-title-icon-hover: hsl(var(--foreground));\n *   --accordion-light-content-text: hsl(var(--foreground));\n *   --accordion-dark-title-text: hsl(var(--contrast-200));\n *   --accordion-dark-title-text-hover: hsl(var(--background));\n *   --accordion-dark-title-icon: hsl(var(--contrast-200));\n *   --accordion-dark-title-icon-hover: hsl(var(--background));\n *   --accordion-dark-content-text: hsl(var(--background));\n *   --accordion-title-font-family: var(--font-family-mono);\n *   --accordion-content-font-family: var(--font-family-body);\n * }\n * ```\n */\nfunction Accordion({\n  children,\n  title,\n  colorScheme = 'light',\n  ...rest\n}: React.ComponentPropsWithoutRef<typeof AccordionsPrimitive.Item> & {\n  colorScheme?: 'light' | 'dark';\n}) {\n  return (\n    <AccordionsPrimitive.Item {...rest}>\n      <AccordionsPrimitive.Header>\n        <AccordionsPrimitive.Trigger asChild>\n          <div className=\"group cursor-pointer items-start gap-8 py-3 last:flex @md:py-4\">\n            <div\n              className={clsx(\n                'flex-1 select-none font-[family-name:var(--accordion-title-font-family,var(--font-family-mono))] text-sm uppercase transition-colors duration-300 ease-out',\n                {\n                  light:\n                    'text-[var(--accordion-light-title-text,hsl(var(--contrast-400)))] group-hover:text-[var(--accordion-light-title-text-hover,hsl(var(--foreground)))]',\n                  dark: 'text-[var(--accordion-dark-title-text,hsl(var(--contrast-200)))] group-hover:text-[var(--accordion-dark-title-text-hover,hsl(var(--background)))]',\n                }[colorScheme],\n              )}\n            >\n              {title}\n            </div>\n            <AnimatedChevron\n              className={clsx(\n                {\n                  light:\n                    'stroke-[var(--accordion-light-title-icon,hsl(var(--contrast-500)))] group-hover:stroke-[var(--accordion-light-title-icon-hover,hsl(var(--foreground)))]',\n                  dark: 'stroke-[var(--accordion-dark-title-icon,hsl(var(--contrast-200)))] group-hover:stroke-[var(--accordion-dark-title-icon-hover,hsl(var(--background)))]',\n                }[colorScheme],\n              )}\n            />\n          </div>\n        </AccordionsPrimitive.Trigger>\n      </AccordionsPrimitive.Header>\n      <AccordionsPrimitive.Content className=\"overflow-hidden data-[state=closed]:animate-collapse data-[state=open]:animate-expand\">\n        <div\n          className={clsx(\n            'pb-5 font-[family-name:var(--accordion-content-font-family)] font-medium leading-normal',\n            {\n              light: 'text-[var(--accordion-light-content-text,hsl(var(--foreground)))]',\n              dark: 'text-[var(--accordion-dark-content-text,hsl(var(--background)))]',\n            }[colorScheme],\n          )}\n        >\n          {children}\n        </div>\n      </AccordionsPrimitive.Content>\n    </AccordionsPrimitive.Item>\n  );\n}\n\nfunction AnimatedChevron({\n  className,\n  ...rest\n}: React.JSX.IntrinsicAttributes & React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      {...rest}\n      className={clsx(\n        'mt-1 shrink-0 [&>line]:origin-center [&>line]:transition [&>line]:duration-300 [&>line]:ease-out',\n        className,\n      )}\n      viewBox=\"0 0 10 10\"\n      width={16}\n    >\n      {/* Left Line of Chevron */}\n      <line\n        className=\"group-data-[state=open]:-translate-y-[3px] group-data-[state=open]:-rotate-90\"\n        strokeLinecap=\"round\"\n        x1={2}\n        x2={5}\n        y1={2}\n        y2={5}\n      />\n      {/* Right Line of Chevron */}\n      <line\n        className=\"group-data-[state=open]:-translate-y-[3px] group-data-[state=open]:rotate-90\"\n        strokeLinecap=\"round\"\n        x1={8}\n        x2={5}\n        y1={2}\n        y2={5}\n      />\n    </svg>\n  );\n}\n\nconst Accordions = AccordionsPrimitive.Root;\n\nexport { Accordions, Accordion };\n"
      },
      "componentType": "primitive",
      "description": "Accordions allow users to expand and collapse content sections."
    },
    {
      "name": "alert",
      "dependencies": [],
      "registryDependencies": [
        "clsx",
        "lucide-react"
      ],
      "files": [
        "primitives/alert/index.tsx"
      ],
      "doc": "---\ntitle: Alert\ndescription: An Alert is used to display important information to the user. It is typically styled with a distinct color and icon to indicate the type of alert such as success, error, warning, or info.\npreview: alert-example\npreviewSize: sm\nfeatures:\n  - Dismissable\n  - Auto dismiss after 3 seconds\n  - Success, error, warning, info variants\n  - Animated transition\n---\n\n## Usage\n\n<CodeBlock lang=\"bash\">{`import { Alert } from '@/vibes/soul/primitives/alert'\nimport { useState } from 'react'`}</CodeBlock>\n\n<CodeBlock lang=\"bash\">{`const [showAlert, setShowAlert] = useState(false)`}</CodeBlock>\n\n<CodeBlock lang=\"bash\">{`<Alert variant=\"success\" message=\"1 item added to your cart\" showAlert={showAlert} onClose={setShowAlert}/>`}</CodeBlock>\n\n## API Reference\n\n| Prop                                                                                   | Type                                                              | Default     |\n| -------------------------------------------------------------------------------------- | ----------------------------------------------------------------- | ----------- |\n| `variant` <Tooltip content='The style variant of the alert, defines color and icon' /> | `enum` <Tooltip content={`\"success\" \"error\" \"warning\" \"info\"`} /> | `\"success\"` |\n| `message` <Tooltip content='Alert message displayed' />                                | `string`                                                          |             |\n| `showAlert`                                                                            | `boolean`                                                         |             |\n| `onClose`                                                                              | `(showAlert: boolean) => void`                                    |             |\n\n## Figma\n\n<Figma url=\"https://www.figma.com/design/kgCf8OkDCe90wBSKNNqueL/Soul-Vibe?node-id=2786-48748&t=AsLeJWIgmBOsgk51-1\" />\n",
      "docFile": "/dev/vibes/soul/docs/alert.mdx",
      "example": "'use client';\n\nimport { Alert } from '@/vibes/soul/primitives/alert';\n\nexport default function Preview() {\n  return (\n    <div className=\"flex h-screen flex-col items-center justify-center gap-4 p-8\">\n      <Alert message=\"This is a success alert\" variant=\"success\" />\n      <Alert message=\"This is a warning alert\" variant=\"warning\" />\n      <Alert message=\"This is an error alert\" variant=\"error\" />\n      <Alert message=\"This is an info alert\" variant=\"info\" />\n    </div>\n  );\n}\n",
      "exampleFile": "/src/vibes/soul/examples/primitives/alert/index.tsx",
      "componentName": "Alert",
      "source": {
        "primitives/alert/index.tsx": "import { clsx } from 'clsx';\nimport { X } from 'lucide-react';\nimport { ReactNode } from 'react';\n\nimport { Button } from '@/vibes/soul/primitives/button';\n\ninterface Props {\n  variant: 'success' | 'warning' | 'error' | 'info';\n  message: ReactNode;\n  description?: string;\n  dismissLabel?: string;\n  action?: {\n    label: string;\n    onClick: () => void;\n  };\n  onDismiss?: () => void;\n}\n\nexport function Alert({\n  variant,\n  message,\n  description,\n  action,\n  dismissLabel = 'Dismiss',\n  onDismiss,\n}: Props) {\n  return (\n    <div\n      className={clsx(\n        'flex min-w-[284px] max-w-[356px] items-center justify-between gap-2 rounded-xl border border-foreground/10 py-3 pe-3 ps-4 shadow-sm ring-foreground group-focus-visible:outline-none group-focus-visible:ring-2',\n        {\n          success: 'bg-success-highlight',\n          warning: 'bg-warning-highlight',\n          error: 'bg-error-highlight',\n          info: 'bg-background',\n        }[variant],\n      )}\n      role=\"alert\"\n    >\n      <div className=\"flex flex-col\">\n        <span className=\"text-sm font-normal text-foreground\">{message}</span>\n        {Boolean(description) && (\n          <span className=\"text-xs font-medium text-contrast-400\">{description}</span>\n        )}\n      </div>\n\n      <div className=\"flex items-center gap-1\">\n        {action && (\n          <Button onClick={action.onClick} size=\"x-small\" variant=\"ghost\">\n            {action.label}\n          </Button>\n        )}\n\n        <Button\n          aria-label={dismissLabel}\n          onClick={onDismiss}\n          shape=\"circle\"\n          size=\"x-small\"\n          variant=\"ghost\"\n        >\n          <X size={20} strokeWidth={1} />\n        </Button>\n      </div>\n    </div>\n  );\n}\n"
      },
      "componentType": "primitive",
      "description": "An Alert is used to display important information to the user. It is typically styled with a distinct color and icon to indicate the type of alert such as success, error, warning, or info."
    },
    {
      "name": "animated-link",
      "dependencies": [],
      "registryDependencies": [],
      "files": [
        "primitives/animated-link/index.tsx"
      ],
      "doc": "---\ntitle: Animated Link\ndescription: Link that animates on hover or focus\npreview: animated-link-example\npreviewSize: xs\nfeatures:\n  - Animates link on hover or focus\n  - Multi line support\n---\n\n## Usage\n\n<CodeBlock lang=\"bash\">{`import { AnimatedLink } from '@/vibes/soul/primitives/alert'`}</CodeBlock>\n\n<CodeBlock lang=\"bash\">{`<AnimatedLink href=\"/\" label=\"Animated Link\" />`}</CodeBlock>\n\n## API Reference\n\n| Prop    | Type     | Default |\n| ------- | -------- | ------- |\n| `href`  | `string` |         |\n| `label` | `string` |         |\n\n## Figma\n\n<Figma url=\"https://www.figma.com/design/kgCf8OkDCe90wBSKNNqueL/Soul-Vibe?node-id=2297-42917&t=dbm9GtAtS2A3vy2g-4\" />\n",
      "docFile": "/dev/vibes/soul/docs/animated-link.mdx",
      "example": "import { AnimatedLink } from '@/vibes/soul/primitives/animated-link';\n\nexport default function Preview() {\n  return (\n    <div className=\"flex h-screen flex-col items-center justify-center\">\n      <div className=\"max-w-80\">\n        <p className=\"mb-6\">\n          This is text with an <AnimatedLink label=\"animated link\" link={{ href: '/' }} /> inside.\n        </p>\n\n        <AnimatedLink\n          label=\"Animated link with a very long label to exhibit multi line support\"\n          link={{ href: '/' }}\n        />\n      </div>\n    </div>\n  );\n}\n",
      "exampleFile": "/src/vibes/soul/examples/primitives/animated-link/index.tsx",
      "componentName": "AnimatedLink",
      "source": {
        "primitives/animated-link/index.tsx": "import { clsx } from 'clsx';\nimport Link from 'next/link';\n\nexport interface AnimatedLinkProps {\n  link: {\n    href: string;\n    target?: string;\n  };\n  label: string;\n  className?: string;\n}\n\nexport function AnimatedLink({ link, label, className }: AnimatedLinkProps) {\n  return (\n    <Link\n      className={clsx(\n        'origin-left font-semibold leading-normal text-foreground transition-[background-size] duration-300 [background:linear-gradient(0deg,hsl(var(--primary)),hsl(var(--primary)))_no-repeat_left_bottom_/_0_2px] hover:bg-[size:100%_2px] focus:outline-none focus-visible:bg-[size:100%_2px]',\n        className,\n      )}\n      href={link.href}\n    >\n      {label}\n    </Link>\n  );\n}\n"
      },
      "componentType": "primitive",
      "description": "Link that animates on hover or focus"
    },
    {
      "name": "badge",
      "dependencies": [],
      "registryDependencies": [
        "clsx"
      ],
      "files": [
        "primitives/badge/index.tsx"
      ],
      "doc": "---\ntitle: Badge\ndescription: Badges are used to highlight important keywords or statuses.\npreview: badge-example\npreviewSize: xs\n---\n\n## Usage\n\n<CodeBlock lang=\"bash\">{`import { Badge } from '@/vibes/soul/primitives/badge'`}</CodeBlock>\n\n<CodeBlock lang=\"bash\">{`<Badge>New</Badge>`}</CodeBlock>\n\n## API Reference\n\n| Prop        | Type     | Default |\n| ----------- | -------- | ------- |\n| `className` | `string` |         |\n\n## Figma\n\n<Figma url=\"https://www.figma.com/design/kgCf8OkDCe90wBSKNNqueL/Soul-Vibe?node-id=2297-42917&t=dbm9GtAtS2A3vy2g-4\" />\n",
      "docFile": "/dev/vibes/soul/docs/badge.mdx",
      "example": "import { Badge } from '@/vibes/soul/primitives/badge';\n\nexport default function Preview() {\n  return (\n    <div className=\"flex h-screen items-center justify-center gap-4\">\n      <Badge variant=\"pill\">Pill</Badge>\n      <Badge variant=\"rounded\">Rounded</Badge>\n    </div>\n  );\n}\n",
      "exampleFile": "/src/vibes/soul/examples/primitives/badge/index.tsx",
      "componentName": "Badge",
      "source": {
        "primitives/badge/index.tsx": "import { clsx } from 'clsx';\nimport { ReactNode } from 'react';\n\ninterface Props {\n  children: ReactNode;\n  variant?: 'pill' | 'rounded';\n  color?: 'primary' | 'accent' | 'warning' | 'danger' | 'success' | 'info';\n  className?: string;\n}\n\nexport function Badge({ children, variant = 'rounded', className, color = 'primary' }: Props) {\n  return (\n    <span\n      className={clsx(\n        'bg-primary-highlight px-2 py-0.5 font-mono text-xs uppercase tracking-tighter text-foreground',\n        {\n          pill: 'rounded-full',\n          rounded: 'rounded',\n        }[variant],\n        {\n          primary: 'bg-primary-highlight',\n          accent: 'bg-accent-highlight',\n          warning: 'bg-warning-highlight',\n          danger: 'bg-danger-highlight',\n          success: 'bg-success-highlight',\n          info: 'bg-info-highlight',\n        }[color],\n        className,\n      )}\n    >\n      {children}\n    </span>\n  );\n}\n"
      },
      "componentType": "primitive",
      "description": "Badges are used to highlight important keywords or statuses."
    },
    {
      "name": "banner",
      "dependencies": [],
      "registryDependencies": [
        "clsx",
        "lucide-react"
      ],
      "files": [
        "primitives/banner/index.tsx"
      ],
      "doc": "---\ntitle: Banner\ndescription: The `banner` component is used to display important messages or announcements to users in the form of a bar across the top of the screen.\npreview: banner-example\npreviewSize: xs\nfeatures:\n  - Full keyboard navigation\n  - Dismissible\n  - Animated transition\n---\n\n## Usage\n\nexport default function Preview() {\n  return (\n    <Banner id=\"example-banner\">\n      Get <strong>15% off</strong> and free shipping with discount code{' '}\n      <strong>&quot;welcome&quot;</strong>\n    </Banner>\n  )\n}\n\n<CodeBlock lang=\"bash\">{`import { Banner } from '@/vibes/soul/primitives/banner'`}</CodeBlock>\n\n<CodeBlock lang=\"bash\">{`<Banner id=\"example-banner\">\n  Get <strong>15% off</strong> and free shipping with discount code{' '}\n  <strong>&quot;welcome&quot;</strong>\n</Banner>`}</CodeBlock>\n\n## API Reference\n\n| Prop        | Type     | Default |\n| ----------- | -------- | ------- |\n| `className` | `string` |         |\n\n## Figma\n\n<Figma url=\"https://www.figma.com/design/kgCf8OkDCe90wBSKNNqueL/Soul-Vibe?node-id=2297-42901&t=dbm9GtAtS2A3vy2g-4\" />\n",
      "docFile": "/dev/vibes/soul/docs/banner.mdx",
      "example": "import { Banner } from '@/vibes/soul/primitives/banner';\n\nexport default function Preview() {\n  return (\n    <Banner id=\"example-banner\">\n      Get <strong>15% off</strong> and free shipping with discount code{' '}\n      <strong>&quot;welcome&quot;</strong>\n    </Banner>\n  );\n}\n",
      "exampleFile": "/src/vibes/soul/examples/primitives/banner/index.tsx",
      "componentName": "Banner",
      "source": {
        "primitives/banner/index.tsx": "'use client';\n\nimport { clsx } from 'clsx';\nimport { X } from 'lucide-react';\nimport { ForwardedRef, forwardRef, ReactNode, useCallback, useEffect, useState } from 'react';\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n * :root {\n *   --banner-focus: hsl(var(--primary));\n *   --banner-background: hsl(var(--primary));\n *   --banner-text: hdl(var(--foreground));\n *   --banner-close-icon: hdl(var(--foreground));\n *   --banner-close-icon-hover: hdl(var(--foreground));\n *   --banner-close-background: hdl(var(--foreground));\n *   --banner-close-background-hover: hdl(var(--foreground));\n * }\n * ```\n */\nexport const Banner = forwardRef(\n  (\n    {\n      id,\n      children,\n      hideDismiss = false,\n      className,\n      onDismiss,\n    }: {\n      id: string;\n      children: ReactNode;\n      hideDismiss?: boolean;\n      className?: string;\n      onDismiss?: () => void;\n    },\n    ref: ForwardedRef<HTMLDivElement>,\n  ) => {\n    const [banner, setBanner] = useState({ dismissed: false, initialized: false });\n\n    useEffect(() => {\n      const hidden = localStorage.getItem(`${id}-hidden-banner`) === 'true';\n\n      setBanner({ dismissed: hidden, initialized: true });\n    }, [id]);\n\n    const hideBanner = useCallback(() => {\n      setBanner((prev) => ({ ...prev, dismissed: true }));\n      localStorage.setItem(`${id}-hidden-banner`, 'true');\n      onDismiss?.();\n    }, [id, onDismiss]);\n\n    if (!banner.initialized) return null;\n\n    return (\n      <div\n        className={clsx(\n          'relative w-full overflow-hidden bg-[var(--banner-background,hsl(var(--primary)))] transition-all duration-300 ease-in @container',\n          banner.dismissed ? 'pointer-events-none max-h-0' : 'max-h-32',\n          className,\n        )}\n        id=\"announcement-bar\"\n        ref={ref}\n      >\n        <div className=\"p-3 pr-12 text-sm text-[var(--banner-text,hsl(var(--foreground)))] @xl:px-12 @xl:text-center @xl:text-base\">\n          {children}\n        </div>\n\n        {!hideDismiss && (\n          <button\n            aria-label=\"Dismiss banner\"\n            className=\"absolute right-3 top-3 grid h-8 w-8 place-content-center rounded-full bg-[var(--banner-close-background,transparent)] text-[var(--banner-close-icon,hsl(var(--foreground)/50%))] transition-colors duration-300 hover:bg-[var(--banner-close-background-hover,hsl(var(--background)/40%))] hover:text-[var(--banner-close-icon-hover,hsl(var(--foreground)))] focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[var(--banner-focus,hsl(var(--foreground)))] @xl:top-1/2 @xl:-translate-y-1/2\"\n            onClick={(e) => {\n              e.preventDefault();\n              hideBanner();\n            }}\n          >\n            <X absoluteStrokeWidth size={20} strokeWidth={1.5} />\n          </button>\n        )}\n      </div>\n    );\n  },\n);\n\nBanner.displayName = 'Banner';\n"
      },
      "componentType": "primitive",
      "description": "The `banner` component is used to display important messages or announcements to users in the form of a bar across the top of the screen."
    },
    {
      "name": "blog-post-card",
      "dependencies": [],
      "registryDependencies": [
        "clsx"
      ],
      "files": [
        "primitives/blog-post-card/index.tsx"
      ],
      "doc": "---\ntitle: Blog Post Card\ndescription: Blog Post Card is used to display a blog post in a card preview.\npreview: blog-post-card-example\npreviewSize: md\nfeatures:\n  - Full keyboard navigation\n  - Hover animation\n  - When no image is provided, the card will display a typographic background with the title.\n---\n\n## Usage\n\n<CodeBlock lang=\"bash\">{`import { BlogPostCard } from '@/vibes/soul/primitives/blog-post-card'`}</CodeBlock>\n\n<CodeBlock lang=\"bash\">{`<BlogPostCard />`}</CodeBlock>\n\n## API Reference\n\n| Prop                                                                                       | Type                                                                           | Default      |\n| ------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------ | ------------ |\n| `type` <Tooltip content='This is an example tooltip for what this particular prop does'/>  | `enum` <Tooltip content={`\"single\" ${String.fromCharCode(124)} \"multiple\"`} /> | `\"multiple\"` |\n| `title` <Tooltip content='This is an example tooltip for what this particular prop does'/> | `string`                                                                       |              |\n| `body` <Tooltip content='This is an example tooltip for what this particular prop does'/>  | `string`                                                                       |              |\n\n## Figma\n\n<Figma url=\"https://www.figma.com/design/kgCf8OkDCe90wBSKNNqueL/Soul-Vibe?node-id=737-16279&t=dbm9GtAtS2A3vy2g-4\" />\n",
      "docFile": "/dev/vibes/soul/docs/blog-post-card.mdx",
      "example": "import { BlogPostCard } from '@/vibes/soul/primitives/blog-post-card';\n\nexport default function Preview() {\n  return (\n    <div className=\"flex min-h-48 items-center justify-center bg-background p-8 @container\">\n      <BlogPostCard\n        author=\"Ryan Smith\"\n        className=\"w-80\"\n        content=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque eget velit hendrerit erat imperdiet tincidunt. Lorem ipsum dolor sit amet, consectetur adipiscing elit. This is some more text to test out here.\"\n        date=\"2024-07-01\"\n        href=\"#\"\n        id=\"1\"\n        image={{\n          src: 'https://rstr.in/monogram/vibes/MJbRGY1Y9LK/QlkAvXGZ2ER',\n          alt: 'Vestibulum eleifend placerat ligula',\n        }}\n        title=\"Vestibulum eleifend placerat ligula and even more text for a long title\"\n      />\n    </div>\n  );\n}\n",
      "exampleFile": "/src/vibes/soul/examples/primitives/blog-post-card/index.tsx",
      "componentName": "BlogPostCard",
      "source": {
        "primitives/blog-post-card/index.tsx": "import { clsx } from 'clsx';\nimport Image from 'next/image';\nimport Link from 'next/link';\n\nexport interface BlogPost {\n  id: string;\n  author?: string | null;\n  content: string;\n  date: string;\n  image?: {\n    src: string;\n    alt: string;\n  };\n  href: string;\n  title: string;\n  className?: string;\n}\n\nexport function BlogPostCard({ title, image, content, href, date, author, className }: BlogPost) {\n  return (\n    <Link\n      className={clsx(\n        'group max-w-full rounded-b-lg rounded-t-2xl text-foreground ring-primary ring-offset-4 @container focus:outline-0 focus-visible:ring-2',\n        className,\n      )}\n      href={href}\n    >\n      <div className=\"relative mb-4 aspect-[4/3] w-full overflow-hidden rounded-2xl bg-contrast-100\">\n        {image?.src != null && image.src !== '' ? (\n          <Image\n            alt={image.alt}\n            className=\"object-cover transition-transform duration-500 ease-out group-hover:scale-110\"\n            fill\n            sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"\n            src={image.src}\n          />\n        ) : (\n          <div className=\"p-4 text-5xl font-bold leading-none tracking-tighter text-foreground/15\">\n            {title}\n          </div>\n        )}\n      </div>\n\n      <div className=\"text-lg font-medium leading-snug\">{title}</div>\n      <p className=\"mb-3 mt-1.5 line-clamp-3 text-sm font-normal text-contrast-400\">{content}</p>\n      <div className=\"text-sm\">\n        <time dateTime={date}>\n          {new Date(date).toLocaleDateString('en-US', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n          })}\n        </time>\n        {date !== '' && author != null && author !== '' && (\n          <span className=\"after:mx-2 after:content-['•']\" />\n        )}\n        {author != null && author !== '' && <span>{author}</span>}\n      </div>\n    </Link>\n  );\n}\n\nexport function BlogPostCardSkeleton({ className }: { className?: string }) {\n  return (\n    <div className={clsx('flex max-w-md animate-pulse flex-col gap-2 rounded-xl', className)}>\n      {/* Image */}\n      <div className=\"aspect-[4/3] overflow-hidden rounded-xl bg-contrast-100\" />\n\n      {/* Title */}\n      <div className=\"h-4 w-24 rounded-lg bg-contrast-100\" />\n\n      {/* Content */}\n      <div className=\"h-3 w-full rounded-lg bg-contrast-100\" />\n      <div className=\"h-3 w-full rounded-lg bg-contrast-100\" />\n      <div className=\"h-3 w-1/2 rounded-lg bg-contrast-100\" />\n\n      <div className=\"flex flex-wrap items-center\">\n        {/* Date */}\n        <div className=\"h-4 w-16 rounded-lg bg-contrast-100\" />\n        <span className=\"after:mx-2 after:text-contrast-100 after:content-['•']\" />\n        {/* Author */}\n        <div className=\"h-4 w-20 rounded-lg bg-contrast-100\" />\n      </div>\n    </div>\n  );\n}\n"
      },
      "componentType": "primitive",
      "description": "Blog Post Card is used to display a blog post in a card preview."
    },
    {
      "name": "breadcrumbs",
      "dependencies": [],
      "registryDependencies": [
        "clsx",
        "lucide-react"
      ],
      "files": [
        "primitives/breadcrumbs/index.tsx"
      ],
      "doc": "---\ntitle: Breadcrumbs\ndescription: Breadcrumbs are used to display the current page's location within a hierarchy and enable easy navigation.\npreview:\n  Electric: breadcrumbs-electric-example\n  Warm: breadcrumbs-warm-example\n  Luxury: breadcrumbs-luxury-example\npreviewSize: xs\n---\n\n## Usage\n\n<CodeBlock lang=\"bash\">{`import { Breadcrumbs } from '@/vibes/soul/primitives/breadcrumbs'`}</CodeBlock>\n\n<CodeBlock lang=\"bash\">{`<Breadcrumbs />`}</CodeBlock>\n\n## API Reference\n\n| Prop                                                                                       | Type                                                                           | Default      |\n| ------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------ | ------------ |\n| `type` <Tooltip content='This is an example tooltip for what this particular prop does'/>  | `enum` <Tooltip content={`\"single\" ${String.fromCharCode(124)} \"multiple\"`} /> | `\"multiple\"` |\n| `title` <Tooltip content='This is an example tooltip for what this particular prop does'/> | `string`                                                                       |              |\n| `body` <Tooltip content='This is an example tooltip for what this particular prop does'/>  | `string`                                                                       |              |\n\n## Figma\n\n<Figma url=\"https://www.figma.com/design/kgCf8OkDCe90wBSKNNqueL/Soul-Vibe?node-id=737-16279&t=dbm9GtAtS2A3vy2g-4\" />\n",
      "docFile": "/dev/vibes/soul/docs/breadcrumbs.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/breadcrumbs/index.tsx",
      "componentName": "Breadcrumbs",
      "source": {
        "primitives/breadcrumbs/index.tsx": "import { clsx } from 'clsx';\nimport { ChevronRight } from 'lucide-react';\n\nimport { Stream, Streamable } from '@/vibes/soul/lib/streamable';\nimport { AnimatedLink } from '@/vibes/soul/primitives/animated-link';\n\nexport interface Breadcrumb {\n  label: string;\n  href: string;\n}\n\nexport interface BreadcrumbsProps {\n  breadcrumbs: Streamable<Breadcrumb[]>;\n  className?: string;\n}\n\nexport function Breadcrumbs({ breadcrumbs: streamableBreadcrumbs, className }: BreadcrumbsProps) {\n  return (\n    <Stream fallback={<BreadcrumbsSkeleton />} value={streamableBreadcrumbs}>\n      {(breadcrumbs) =>\n        breadcrumbs.length === 0 ? (\n          <div className={clsx('min-h-[1lh]', className)} />\n        ) : (\n          <nav aria-label=\"breadcrumb\" className={clsx(className)}>\n            <ol className=\"flex flex-wrap items-center gap-x-1.5 text-sm @xl:text-base\">\n              {breadcrumbs.map(({ label, href }, idx) => {\n                if (idx < breadcrumbs.length - 1) {\n                  return (\n                    <li className=\"inline-flex items-center gap-x-1.5\" key={idx}>\n                      <AnimatedLink label={label} link={{ href }} />\n                      <ChevronRight\n                        aria-hidden=\"true\"\n                        className=\"text-contrast-500\"\n                        size={20}\n                        strokeWidth={1}\n                      />\n                    </li>\n                  );\n                }\n\n                return (\n                  <li className=\"inline-flex items-center text-contrast-500\" key={idx}>\n                    <span aria-current=\"page\" aria-disabled=\"true\" role=\"link\">\n                      {label}\n                    </span>\n                  </li>\n                );\n              })}\n            </ol>\n          </nav>\n        )\n      }\n    </Stream>\n  );\n}\n\nexport function BreadcrumbsSkeleton({ className }: { className?: string }) {\n  return (\n    <div\n      className={clsx(\n        'flex min-h-[1lh] animate-pulse flex-wrap items-center gap-x-1.5 text-base',\n        className,\n      )}\n    >\n      <div className=\"flex h-[1lh] items-center\">\n        <span className=\"block h-[1.25ex] w-[4ch] rounded bg-contrast-100\" />\n      </div>\n      <ChevronRight aria-hidden=\"true\" className=\"text-contrast-200\" size={20} strokeWidth={1} />\n      <div className=\"flex h-[1lh] items-center\">\n        <span className=\"block h-[1.25ex] w-[6ch] rounded bg-contrast-100\" />\n      </div>\n      <ChevronRight aria-hidden=\"true\" className=\"text-contrast-200\" size={20} strokeWidth={1} />\n      <div className=\"flex h-[1lh] items-center\">\n        <span className=\"block h-[1.25ex] w-[6ch] rounded bg-contrast-100\" />\n      </div>\n    </div>\n  );\n}\n"
      },
      "componentType": "primitive",
      "description": "Breadcrumbs are used to display the current page's location within a hierarchy and enable easy navigation."
    },
    {
      "name": "button",
      "dependencies": [],
      "registryDependencies": [
        "clsx",
        "lucide-react"
      ],
      "files": [
        "primitives/button/index.tsx"
      ],
      "doc": "---\ntitle: Button\npreview: button-example\npreviewSize: sm\n---\n",
      "docFile": "/dev/vibes/soul/docs/button.mdx",
      "example": "import { ArrowRight } from 'lucide-react';\n\nimport { Button } from '@/vibes/soul/primitives/button';\n\nconst variants = ['primary', 'secondary', 'tertiary', 'ghost'] as const;\nconst shapes = ['pill', 'rounded', 'square', 'circle'] as const;\nconst sizes = ['large', 'medium', 'small', 'x-small'] as const;\n\nexport default function Preview() {\n  return (\n    <div className=\"flex h-screen flex-col items-center gap-x-4 gap-y-6 px-6 py-8\">\n      {variants.map((variant) => (\n        <div className=\"flex flex-col items-center gap-x-4 gap-y-6 px-6 py-8\" key={variant}>\n          {shapes.map((shape) => (\n            <div className=\"flex flex-wrap items-center gap-x-3 gap-y-3\" key={shape}>\n              {sizes.map((size) => (\n                <Button key={size} shape={shape} size={size} variant={variant}>\n                  {shape === 'circle' ? <ArrowRight size={20} /> : 'Shop now'}\n                </Button>\n              ))}\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n",
      "exampleFile": "/src/vibes/soul/examples/primitives/button/index.tsx",
      "componentName": "Button",
      "source": {
        "primitives/button/index.tsx": "import { clsx } from 'clsx';\nimport { Loader2 } from 'lucide-react';\n\nexport type Props = React.ButtonHTMLAttributes<HTMLButtonElement> & {\n  variant?: 'primary' | 'secondary' | 'tertiary' | 'ghost';\n  size?: 'large' | 'medium' | 'small' | 'x-small';\n  shape?: 'pill' | 'rounded' | 'square' | 'circle';\n  onClick?: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  loading?: boolean;\n  type?: 'button' | 'submit' | 'reset';\n};\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n * :root {\n *   --button-focus: hsl(var(--primary));\n *   --button-font-family: var(--font-family-body);\n *   --button-primary-background: hsl(var(--primary));\n *   --button-primary-background-hover: color-mix(in oklab, hsl(var(--primary)), white 75%);\n *   --button-primary-foreground: hsl(var(--foreground));\n *   --button-primary-border: hsl(var(--primary));\n *   --button-secondary-background: hsl(var(--foreground));\n *   --button-secondary-background-hover: hsl(var(--background));\n *   --button-secondary-foreground: hsl(var(--background));\n *   --button-secondary-border: hsl(var(--foreground));\n *   --button-tertiary-background: hsl(var(--background));\n *   --button-tertiary-background-hover: hsl(var(--contrast-100));\n *   --button-tertiary-foreground: hsl(var(--foreground));\n *   --button-tertiary-border: hsl(var(--contrast-200));\n *   --button-ghost-background: transparent;\n *   --button-ghost-background-hover: hsl(var(--foreground) / 5%);\n *   --button-ghost-foreground: hsl(var(--foreground));\n *   --button-ghost-border: transparent;\n * }\n * ```\n */\nexport function Button({\n  variant = 'primary',\n  size = 'large',\n  shape = 'pill',\n  onClick,\n  loading = false,\n  disabled = false,\n  className,\n  children,\n  type = 'button',\n  ...props\n}: Props) {\n  return (\n    <button\n      aria-busy={loading}\n      className={clsx(\n        'relative z-0 inline-flex h-fit select-none items-center justify-center overflow-hidden border text-center font-[family-name:var(--button-font-family,var(--font-family-body))] font-semibold leading-normal after:absolute after:inset-0 after:-z-10 after:-translate-x-[105%] after:transition-[opacity,transform] after:duration-300 after:[animation-timing-function:cubic-bezier(0,0.25,0,1)] hover:after:translate-x-0 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[var(--button-focus,hsl(var(--primary)))] focus-visible:ring-offset-2',\n        {\n          primary:\n            'border-[var(--button-primary-border,hsl(var(--primary)))] bg-[var(--button-primary-background,hsl(var(--primary)))] text-[var(--button-primary-foreground)] after:bg-[var(--button-primary-background-hover,color-mix(in_oklab,hsl(var(--primary)),white_75%))]',\n          secondary:\n            'border-[var(--button-secondary-border,hsl(var(--foreground)))] bg-[var(--button-secondary-background,hsl(var(--foreground)))] text-[var(--button-secondary-foreground,hsl(var(--background)))] after:bg-[var(--button-secondary-background-hover,hsl(var(--background)))]',\n          tertiary:\n            'border-[var(--button-tertiary-border,hsl(var(--contrast-200)))] bg-[var(--button-tertiary-background,hsl(var(--background)))] text-[var(--button-tertiary-foreground,hsl(var(--foreground)))] after:bg-[var(--button-tertiary-background-hover,hsl(var(--contrast-100)))]',\n          ghost:\n            'border-[var(--button-ghost-border,transparent)] bg-[var(--button-ghost-background,transparent)] text-[var(--button-ghost-foreground,hsl(var(--foreground)))] after:bg-[var(--button-ghost-background-hover,hsl(var(--foreground)/5%))]',\n        }[variant],\n        {\n          pill: 'rounded-full after:rounded-full',\n          rounded: 'rounded-lg after:rounded-lg',\n          square: 'rounded-none after:rounded-none',\n          circle: 'rounded-full after:rounded-full',\n        }[shape],\n        !loading && !disabled && 'hover:after:translate-x-0',\n        disabled && 'cursor-not-allowed opacity-30',\n        className,\n      )}\n      disabled={disabled || loading}\n      onClick={onClick}\n      type={type}\n      {...props}\n    >\n      <span\n        className={clsx(\n          'inline-flex items-center justify-center transition-all duration-300 ease-in-out',\n          loading ? '-translate-y-10 opacity-0' : 'translate-y-0 opacity-100',\n          shape === 'circle' && 'aspect-square',\n          {\n            'x-small': 'min-h-8 text-xs',\n            small: 'min-h-10 text-sm',\n            medium: 'min-h-12 text-base',\n            large: 'min-h-14 text-base',\n          }[size],\n          shape !== 'circle' &&\n            {\n              'x-small': 'gap-x-2 px-3 py-1.5',\n              small: 'gap-x-2 px-4 py-2.5',\n              medium: 'gap-x-2.5 px-5 py-3',\n              large: 'gap-x-3 px-6 py-4',\n            }[size],\n          variant === 'secondary' && 'mix-blend-difference',\n        )}\n      >\n        {children}\n      </span>\n\n      <span\n        className={clsx(\n          'absolute inset-0 grid place-content-center transition-all duration-300 ease-in-out',\n          loading ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0',\n        )}\n      >\n        <Loader2 className={clsx('animate-spin', variant === 'tertiary' && 'text-foreground')} />\n      </span>\n    </button>\n  );\n}\n"
      },
      "componentType": "primitive"
    },
    {
      "name": "button-link",
      "dependencies": [],
      "registryDependencies": [
        "clsx"
      ],
      "files": [
        "primitives/button-link/index.tsx"
      ],
      "doc": "---\ntitle: Button Link\npreview: button-link-example\npreviewSize: sm\n---\n",
      "docFile": "/dev/vibes/soul/docs/button-link.mdx",
      "example": "import { ArrowRight } from 'lucide-react';\n\nimport { ButtonLink } from '@/vibes/soul/primitives/button-link';\n\nconst variants = ['primary', 'secondary', 'tertiary', 'ghost'] as const;\nconst shapes = ['pill', 'rounded', 'square', 'circle'] as const;\nconst sizes = ['large', 'medium', 'small', 'x-small'] as const;\n\nexport default function Preview() {\n  return (\n    <div className=\"flex h-screen flex-col items-center gap-x-4 gap-y-6 px-6 py-8\">\n      {variants.map((variant) => (\n        <div className=\"flex flex-col items-center gap-x-4 gap-y-6 px-6 py-8\" key={variant}>\n          {shapes.map((shape) => (\n            <div className=\"flex flex-wrap items-center gap-x-3 gap-y-3\" key={shape}>\n              {sizes.map((size) => (\n                <ButtonLink href=\"#\" key={size} shape={shape} size={size} variant={variant}>\n                  {shape === 'circle' ? <ArrowRight size={20} /> : 'Shop now'}\n                </ButtonLink>\n              ))}\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n",
      "exampleFile": "/src/vibes/soul/examples/primitives/button-link/index.tsx",
      "componentName": "ButtonLink",
      "source": {
        "primitives/button-link/index.tsx": "import { clsx } from 'clsx';\nimport Link from 'next/link';\n\nexport type Props = React.AnchorHTMLAttributes<HTMLAnchorElement> & {\n  variant?: 'primary' | 'secondary' | 'tertiary' | 'ghost';\n  size?: 'large' | 'medium' | 'small' | 'x-small';\n  shape?: 'pill' | 'rounded' | 'square' | 'circle';\n  href: string;\n};\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n * :root {\n *   --button-focus: hsl(var(--primary));\n *   --button-font-family: var(--font-family-body);\n *   --button-primary-background: hsl(var(--primary));\n *   --button-primary-background-hover: color-mix(in oklab, hsl(var(--primary)), white 75%);\n *   --button-primary-foreground: hsl(var(--foreground));\n *   --button-primary-border: hsl(var(--primary));\n *   --button-secondary-background: hsl(var(--foreground));\n *   --button-secondary-background-hover: hsl(var(--background));\n *   --button-secondary-foreground: hsl(var(--background));\n *   --button-secondary-border: hsl(var(--foreground));\n *   --button-tertiary-background: hsl(var(--background));\n *   --button-tertiary-background-hover: hsl(var(--contrast-100));\n *   --button-tertiary-foreground: hsl(var(--foreground));\n *   --button-tertiary-border: hsl(var(--contrast-200));\n *   --button-ghost-background: transparent;\n *   --button-ghost-background-hover: hsl(var(--foreground) / 5%);\n *   --button-ghost-foreground: hsl(var(--foreground));\n *   --button-ghost-border: transparent;\n * }\n * ```\n */\nexport function ButtonLink({\n  variant = 'primary',\n  size = 'large',\n  shape = 'pill',\n  href,\n  className,\n  children,\n  ...props\n}: Props) {\n  return (\n    <Link\n      {...props}\n      className={clsx(\n        'relative z-0 inline-flex h-fit select-none items-center justify-center overflow-hidden border text-center font-[family-name:var(--button-font-family)] font-semibold leading-normal after:absolute after:inset-0 after:-z-10 after:-translate-x-[105%] after:transition-[opacity,transform] after:duration-300 after:[animation-timing-function:cubic-bezier(0,0.25,0,1)] hover:after:translate-x-0 focus-visible:outline-none focus-visible:ring-2',\n        {\n          primary:\n            'border-[var(--button-primary-border,hsl(var(--primary)))] bg-[var(--button-primary-background,hsl(var(--primary)))] text-[var(--button-primary-foreground)] after:bg-[var(--button-primary-background-hover,color-mix(in_oklab,hsl(var(--primary)),white_75%))]',\n          secondary:\n            'border-[var(--button-secondary-border,hsl(var(--foreground)))] bg-[var(--button-secondary-background,hsl(var(--foreground)))] text-[var(--button-secondary-foreground,hsl(var(--background)))] after:bg-[var(--button-secondary-background-hover,hsl(var(--background)))]',\n          tertiary:\n            'border-[var(--button-tertiary-border,hsl(var(--contrast-200)))] bg-[var(--button-tertiary-background,hsl(var(--background)))] text-[var(--button-tertiary-foreground,hsl(var(--foreground)))] after:bg-[var(--button-tertiary-background-hover,hsl(var(--contrast-100)))]',\n          ghost:\n            'border-[var(--button-ghost-border,transparent)] bg-[var(--button-ghost-background,transparent)] text-[var(--button-ghost-foreground,hsl(var(--foreground)))] after:bg-[var(--button-ghost-background-hover,hsl(var(--foreground)/5%))]',\n        }[variant],\n        {\n          'x-small': 'min-h-8 text-xs',\n          small: 'min-h-10 text-sm',\n          medium: 'min-h-12 text-base',\n          large: 'min-h-14 text-base',\n        }[size],\n        shape !== 'circle' &&\n          {\n            'x-small': 'gap-x-2 px-3 py-1.5',\n            small: 'gap-x-2 px-4 py-2.5',\n            medium: 'gap-x-2.5 px-5 py-3',\n            large: 'gap-x-3 px-6 py-4',\n          }[size],\n        {\n          pill: 'rounded-full after:rounded-full',\n          rounded: 'rounded-lg after:rounded-lg',\n          square: 'rounded-none after:rounded-none',\n          circle: 'aspect-square rounded-full after:rounded-full',\n        }[shape],\n        className,\n      )}\n      href={href}\n    >\n      <span className={clsx(variant === 'secondary' && 'mix-blend-difference')}>{children}</span>\n    </Link>\n  );\n}\n"
      },
      "componentType": "primitive"
    },
    {
      "name": "calendar",
      "dependencies": [],
      "registryDependencies": [
        "clsx",
        "lucide-react",
        "react-day-picker"
      ],
      "files": [
        "primitives/calendar.tsx"
      ],
      "doc": "---\ntitle: Calendar\npreview:\n  Electric: calendar-electric-example\n  Warm: calendar-warm-example\n  Luxury: calendar-luxury-example\n---\n",
      "docFile": "/dev/vibes/soul/docs/calendar.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/calendar/index.tsx",
      "componentName": "Calendar",
      "source": {
        "primitives/calendar.tsx": "import { clsx } from 'clsx';\nimport { ChevronLeftIcon } from 'lucide-react';\nimport { ComponentPropsWithoutRef } from 'react';\nimport { DayPicker } from 'react-day-picker';\n\nconst components = {\n  Chevron: () => <ChevronLeftIcon className=\"h-5 w-5\" strokeWidth={1} />,\n};\n\nexport function Calendar({\n  className,\n  classNames,\n  ...props\n}: ComponentPropsWithoutRef<typeof DayPicker>) {\n  return (\n    <DayPicker\n      className={clsx(\n        'box-content w-[280px] rounded-lg border border-contrast-100 bg-background p-3',\n        className,\n      )}\n      classNames={{\n        months: 'relative',\n        month_caption: 'flex justify-center w-full font-medium pb-0.5',\n        nav: 'absolute flex justify-between w-full',\n        button_next:\n          'rotate-180 rounded-full focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-foreground',\n        button_previous:\n          'rounded-full focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-foreground',\n        month_grid: 'flex flex-col gap-0.5',\n        weeks: 'flex flex-col gap-0.5',\n        weekdays: 'flex',\n        weekday: 'flex h-10 w-10 items-center justify-center text-xs font-medium',\n        week: 'flex',\n        day: 'h-10 w-10 flex text-xs font-medium group p-0',\n        day_button:\n          'h-full w-full flex items-center justify-center rounded-full group-data-[selected=true]:bg-primary group-data-[selected=true]/middle:bg-transparent hover:border hover:border-contrast-200 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-foreground disabled:hover:border-none',\n        disabled: 'text-contrast-300',\n        outside: 'text-contrast-300',\n        range_start: 'bg-gradient-to-l from-primary-highlight',\n        range_middle: 'bg-primary-highlight group/middle',\n        range_end: 'bg-gradient-to-r from-primary-highlight',\n        ...classNames,\n      }}\n      components={components}\n      {...props}\n    />\n  );\n}\n"
      },
      "componentType": "primitive"
    },
    {
      "name": "card",
      "dependencies": [],
      "registryDependencies": [
        "clsx",
        "lucide-react"
      ],
      "files": [
        "primitives/card/index.tsx"
      ],
      "doc": "---\ntitle: Card\npreview: card-example\npreviewSize: lg\n---\n",
      "docFile": "/dev/vibes/soul/docs/card.mdx",
      "example": "import { Card } from '@/vibes/soul/primitives/card';\n\nexport default function Preview() {\n  return (\n    <div>\n      <div className=\"bg-background p-8 @container\">\n        <div className=\"m-auto flex max-w-screen-md flex-col items-center gap-8 @md:flex-row\">\n          <Card\n            className=\"w-full\"\n            href=\"#\"\n            image={{ src: 'https://rstr.in/monogram/vibes/RopDQNbjTc_', alt: 'Low Maintenance' }}\n            title=\"Low Maintenance\"\n          />\n          <Card className=\"w-full\" href=\"#\" title=\"Partial shade\" />\n        </div>\n      </div>\n      <div className=\"bg-foreground p-8 @container\">\n        <div className=\"m-auto flex max-w-screen-md flex-col items-center gap-8 @md:flex-row\">\n          <Card\n            aspectRatio=\"1:1\"\n            className=\"w-full\"\n            href=\"#\"\n            iconColorScheme=\"dark\"\n            image={{ src: 'https://rstr.in/monogram/vibes/RopDQNbjTc_', alt: 'Low Maintenance' }}\n            textColorScheme=\"dark\"\n            title=\"Low Maintenance\"\n          />\n          <Card\n            aspectRatio=\"1:1\"\n            className=\"w-full\"\n            href=\"#\"\n            iconColorScheme=\"dark\"\n            textColorScheme=\"dark\"\n            title=\"Partial shade\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "exampleFile": "/src/vibes/soul/examples/primitives/card/index.tsx",
      "componentName": "Card",
      "source": {
        "primitives/card/index.tsx": "import { clsx } from 'clsx';\nimport { ArrowUpRight } from 'lucide-react';\nimport Image from 'next/image';\nimport Link from 'next/link';\n\nexport interface CardProps {\n  className?: string;\n  title: string;\n  image?: { src: string; alt: string };\n  href: string;\n  textColorScheme?: 'light' | 'dark';\n  iconColorScheme?: 'light' | 'dark';\n  aspectRatio?: '5:6' | '3:4' | '1:1';\n}\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n * :root {\n *   --card-focus: hsl(var(--primary));\n *   --card-border-radius: 1rem;\n *   --card-light-text: hsl(var(--foreground));\n *   --card-light-icon: hsl(var(--foreground));\n *   --card-light-background: hsl(var(--contrast-100));\n *   --card-dark-text: hsl(var(--background));\n *   --card-dark-icon: hsl(var(--background));\n *   --card-dark-background: hsl(var(--contrast-500));\n * }\n * ```\n */\nexport function Card({\n  className,\n  title,\n  image,\n  href,\n  textColorScheme = 'light',\n  iconColorScheme = 'light',\n  aspectRatio = '5:6',\n}: CardProps) {\n  return (\n    <Link\n      className={clsx(\n        'group relative flex min-w-0 cursor-pointer flex-col gap-2 rounded-[var(--card-border-radius,1rem)] @container focus:outline-0 focus-visible:outline-0',\n        className,\n      )}\n      href={href}\n    >\n      <ArrowUpRight\n        className={clsx(\n          'absolute right-5 top-5 z-10 transition-transform duration-700 ease-out group-hover:-translate-y-1.5 group-hover:translate-x-1.5',\n          {\n            light: 'text-[var(--card-light-icon,hsl(var(--foreground)))]',\n            dark: 'text-[var(--card-dark-icon,hsl(var(--background)))]',\n          }[iconColorScheme],\n        )}\n        strokeWidth={1.5}\n      />\n      <div\n        className={clsx(\n          'relative overflow-hidden rounded-[inherit] group-focus:ring-[var(--card-focus,hsl(var(--primary)))] group-focus-visible:ring-2',\n          {\n            light: 'bg-[var(--card-light-background,hsl(var(--contrast-100)))]',\n            dark: 'bg-[var(--card-dark-background,hsl(var(--contrast-500)))]',\n          }[textColorScheme],\n          {\n            '5:6': 'aspect-[5/6]',\n            '3:4': 'aspect-[3/4]',\n            '1:1': 'aspect-square',\n          }[aspectRatio],\n        )}\n      >\n        {image != null ? (\n          <Image\n            alt={image.alt}\n            className={clsx(\n              'w-full scale-100 select-none object-cover transition-transform duration-500 ease-out group-hover:scale-110',\n              {\n                light: 'bg-[var(--card-light-background,hsl(var(--contrast-100)))]',\n                dark: 'bg-[var(--card-dark-background,hsl(var(--contrast-500)))]',\n              }[textColorScheme],\n            )}\n            fill\n            sizes=\"(max-width: 768px) 70vw, 33vw\"\n            src={image.src}\n          />\n        ) : (\n          <div\n            className={clsx(\n              'break-words pl-5 pt-5 text-4xl font-bold leading-[0.8] tracking-tighter opacity-25 transition-transform duration-500 ease-out group-hover:scale-105 @xs:text-7xl',\n              {\n                light: 'text-[var(--card-light-text,hsl(var(--foreground)))]',\n                dark: 'text-[var(--card-dark-text,hsl(var(--background)))]',\n              }[textColorScheme],\n            )}\n          >\n            {title}\n          </div>\n        )}\n      </div>\n      <span\n        className={clsx(\n          'line-clamp-1 text-lg font-medium',\n          {\n            light: 'text-[var(--card-light-text,hsl(var(--foreground)))]',\n            dark: 'text-[var(--card-dark-text,hsl(var(--background)))]',\n          }[textColorScheme],\n        )}\n      >\n        {title}\n      </span>\n    </Link>\n  );\n}\n\nexport function CardSkeleton() {\n  return (\n    <div className=\"relative flex aspect-[3/4] w-full animate-pulse flex-col gap-2 @4xl:min-w-72\">\n      {/* Image */}\n      <div className=\"h-full w-full overflow-hidden rounded-lg bg-contrast-100 @4xl:rounded-xl\" />\n      {/* Title */}\n      <div className=\"mb-1 line-clamp-1 h-6 w-20 rounded-lg bg-contrast-100 @4xl:absolute @4xl:bottom-5 @4xl:left-5\" />\n    </div>\n  );\n}\n"
      },
      "componentType": "primitive"
    },
    {
      "name": "card-carousel",
      "dependencies": [
        "carousel"
      ],
      "registryDependencies": [
        "clsx"
      ],
      "files": [
        "primitives/card-carousel/index.tsx"
      ],
      "doc": "---\ntitle: Card Carousel\npreview:\n  Electric: card-carousel-electric-example\n  Warm: card-carousel-warm-example\n  Luxury: card-carousel-luxury-example\npreviewSize: lg\n---\n",
      "docFile": "/dev/vibes/soul/docs/card-carousel.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/card-carousel/index.tsx",
      "componentName": "CardCarousel",
      "source": {
        "primitives/card-carousel/index.tsx": "import { clsx } from 'clsx';\n\nimport { Card, CardProps, CardSkeleton } from '@/vibes/soul/primitives/card';\nimport {\n  Carousel,\n  CarouselButtons,\n  CarouselContent,\n  CarouselItem,\n  CarouselScrollbar,\n} from '@/vibes/soul/primitives/carousel';\n\nimport { Stream, Streamable } from '../../lib/streamable';\n\nexport type Card = CardProps & {\n  id: string;\n};\n\nexport interface CardCarouselProps {\n  cards: Streamable<Card[]>;\n  aspectRatio?: '5:6' | '3:4' | '1:1';\n  textColorScheme?: 'light' | 'dark';\n  iconColorScheme?: 'light' | 'dark';\n  carouselColorScheme?: 'light' | 'dark';\n  className?: string;\n  emptyStateMessage?: string;\n  scrollbarLabel?: string;\n  previousLabel?: string;\n  nextLabel?: string;\n  showButtons?: boolean;\n  showScrollbar?: boolean;\n}\n\nexport function CardCarousel({\n  cards: streamableCards,\n  aspectRatio = '5:6',\n  textColorScheme,\n  iconColorScheme,\n  carouselColorScheme,\n  className,\n  emptyStateMessage = 'No items found',\n  scrollbarLabel,\n  previousLabel,\n  nextLabel,\n  showButtons = true,\n  showScrollbar = true,\n}: CardCarouselProps) {\n  return (\n    <Carousel className={className}>\n      <CarouselContent>\n        <Stream\n          fallback={<CardCarouselSkeleton className={className} message={emptyStateMessage} />}\n          value={streamableCards}\n        >\n          {(cards) => {\n            if (cards.length === 0) {\n              return <CardCarouselSkeleton className={className} message={emptyStateMessage} />;\n            }\n\n            return cards.map((card) => (\n              <CarouselItem\n                className=\"basis-[calc(100%-1rem)] @md:basis-[calc(50%-0.75rem)] @lg:basis-[calc(33%-0.5rem)] @2xl:basis-[calc(25%-0.25rem)]\"\n                key={card.id}\n              >\n                <Card\n                  {...card}\n                  aspectRatio={aspectRatio}\n                  iconColorScheme={iconColorScheme}\n                  textColorScheme={textColorScheme}\n                />\n              </CarouselItem>\n            ));\n          }}\n        </Stream>\n      </CarouselContent>\n      {(showButtons || showScrollbar) && (\n        <div className=\"mt-10 flex w-full items-center justify-between gap-8\">\n          <CarouselScrollbar\n            className={clsx(!showScrollbar && 'pointer-events-none invisible')}\n            colorScheme={carouselColorScheme}\n            label={scrollbarLabel}\n          />\n          <CarouselButtons\n            className={clsx(!showButtons && 'pointer-events-none invisible')}\n            colorScheme={carouselColorScheme}\n            nextLabel={nextLabel}\n            previousLabel={previousLabel}\n          />\n        </div>\n      )}\n    </Carousel>\n  );\n}\n\nexport function CardCarouselSkeleton({\n  className,\n  message,\n  count = 8,\n}: {\n  className?: string;\n  message?: string;\n  count?: number;\n}) {\n  return (\n    <Carousel className={className}>\n      <CarouselContent\n        className={clsx(\n          'relative mb-10',\n          message != null &&\n            message !== '' &&\n            '[mask-image:radial-gradient(circle,transparent,black)]',\n        )}\n      >\n        {Array.from({ length: count }).map((_, index) => (\n          <CarouselItem\n            className=\"basis-full @md:basis-1/2 @lg:basis-1/3 @2xl:basis-1/4\"\n            key={index}\n          >\n            <CardSkeleton />\n          </CarouselItem>\n        ))}\n      </CarouselContent>\n      <div className=\"h-6 w-56 animate-pulse bg-contrast-100\" />\n      <div className=\"absolute inset-0 flex items-center justify-center text-lg\">{message}</div>\n    </Carousel>\n  );\n}\n"
      },
      "componentType": "primitive"
    },
    {
      "name": "carousel",
      "dependencies": [],
      "registryDependencies": [
        "embla-carousel-react",
        "lucide-react"
      ],
      "files": [
        "primitives/carousel/index.tsx"
      ],
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/carousel/index.tsx",
      "componentName": "Carousel",
      "source": {
        "primitives/carousel/index.tsx": "'use client';\n\nimport { clsx } from 'clsx';\nimport useEmblaCarousel, { type UseEmblaCarouselType } from 'embla-carousel-react';\nimport { ArrowLeft, ArrowRight } from 'lucide-react';\nimport { useCallback, useEffect, useState } from 'react';\nimport * as React from 'react';\n\ntype CarouselApi = UseEmblaCarouselType[1];\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>;\ntype CarouselOptions = UseCarouselParameters[0];\ntype CarouselPlugin = UseCarouselParameters[1];\n\ninterface CarouselProps extends React.ComponentPropsWithoutRef<'div'> {\n  opts?: CarouselOptions;\n  plugins?: CarouselPlugin;\n  setApi?: (api: CarouselApi) => void;\n  carouselScrollbarLabel?: string;\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0];\n  api: ReturnType<typeof useEmblaCarousel>[1];\n  scrollPrev: () => void;\n  scrollNext: () => void;\n  canScrollPrev: boolean;\n  canScrollNext: boolean;\n} & CarouselProps;\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null);\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext);\n\n  if (!context) {\n    throw new Error('useCarousel must be used within a <Carousel />');\n  }\n\n  return context;\n}\n\nfunction Carousel({ opts, setApi, plugins, className, children, ...rest }: CarouselProps) {\n  const [carouselRef, api] = useEmblaCarousel(opts, plugins);\n  const [canScrollPrev, setCanScrollPrev] = useState(false);\n  const [canScrollNext, setCanScrollNext] = useState(false);\n\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  const onSelect = React.useCallback((api: CarouselApi) => {\n    if (!api) return;\n\n    setCanScrollPrev(api.canScrollPrev());\n    setCanScrollNext(api.canScrollNext());\n  }, []);\n\n  const scrollPrev = useCallback(() => api?.scrollPrev(), [api]);\n\n  const scrollNext = useCallback(() => api?.scrollNext(), [api]);\n\n  const handleKeyDown = useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      if (event.key === 'ArrowLeft') {\n        event.preventDefault();\n        scrollPrev();\n      } else if (event.key === 'ArrowRight') {\n        event.preventDefault();\n        scrollNext();\n      }\n    },\n    [scrollPrev, scrollNext],\n  );\n\n  useEffect(() => {\n    if (!api || !setApi) return;\n\n    setApi(api);\n  }, [api, setApi]);\n\n  useEffect(() => {\n    if (!api) return;\n\n    onSelect(api);\n    api.on('reInit', onSelect);\n    api.on('select', onSelect);\n\n    return () => {\n      api.off('select', onSelect);\n    };\n  }, [api, onSelect]);\n\n  return (\n    <CarouselContext.Provider\n      value={{\n        carouselRef,\n        api,\n        opts,\n        scrollPrev,\n        scrollNext,\n        canScrollPrev,\n        canScrollNext,\n      }}\n    >\n      <div\n        {...rest}\n        aria-roledescription=\"carousel\"\n        className={clsx('relative @container', className)}\n        onKeyDownCapture={handleKeyDown}\n        role=\"region\"\n      >\n        {children}\n      </div>\n    </CarouselContext.Provider>\n  );\n}\n\nfunction CarouselContent({ className, ...rest }: React.HTMLAttributes<HTMLDivElement>) {\n  const { carouselRef } = useCarousel();\n\n  return (\n    <div className=\"w-full\" ref={carouselRef}>\n      <div {...rest} className={clsx('-ml-4 flex @2xl:-ml-5', className)} />\n    </div>\n  );\n}\n\nfunction CarouselItem({ className, ...rest }: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      {...rest}\n      aria-roledescription=\"slide\"\n      className={clsx('min-w-0 shrink-0 grow-0 pl-4 @2xl:pl-5', className)}\n      role=\"group\"\n    />\n  );\n}\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n * :root {\n    --carousel-focus: hsl(var(--primary));\n    --carousel-light-button: hsl(var(--foreground));\n    --carousel-dark-button: hsl(var(--background));\n * }\n * ```\n */\nfunction CarouselButtons({\n  className,\n  colorScheme = 'light',\n  previousLabel = 'Previous',\n  nextLabel = 'Next',\n  ...rest\n}: React.HTMLAttributes<HTMLDivElement> & {\n  colorScheme?: 'light' | 'dark';\n  previousLabel?: string;\n  nextLabel?: string;\n}) {\n  const { scrollPrev, scrollNext, canScrollPrev, canScrollNext } = useCarousel();\n\n  return (\n    <div\n      {...rest}\n      className={clsx(\n        'flex gap-2',\n        {\n          light: 'text-[var(--carousel-light-button,hsl(var(--foreground)))]',\n          dark: 'text-[var(--carousel-dark-button,hsl(var(--background)))]',\n        }[colorScheme],\n        className,\n      )}\n    >\n      <button\n        className=\"rounded-lg ring-[var(--carousel-focus,hsl(var(--primary)))] transition-colors duration-300 focus-visible:outline-0 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-25\"\n        disabled={!canScrollPrev}\n        onClick={scrollPrev}\n        title={previousLabel}\n      >\n        <ArrowLeft strokeWidth={1.5} />\n      </button>\n      <button\n        className=\"rounded-lg ring-[var(--carousel-focus,hsl(var(--primary)))] transition-colors duration-300 focus-visible:outline-0 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-25\"\n        disabled={!canScrollNext}\n        onClick={scrollNext}\n        title={nextLabel}\n      >\n        <ArrowRight strokeWidth={1.5} />\n      </button>\n    </div>\n  );\n}\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n * :root {\n    --carousel-light-scrollbar: hsl(var(--foreground));\n    --carousel-dark-scrollbar: hsl(var(--background));\n * }\n * ```\n */\nfunction CarouselScrollbar({\n  className,\n  colorScheme = 'light',\n  label = 'Carousel scrollbar',\n}: React.HTMLAttributes<HTMLDivElement> & { label?: string; colorScheme?: 'light' | 'dark' }) {\n  const { api, canScrollPrev, canScrollNext } = useCarousel();\n  const [progress, setProgress] = useState(0);\n  const [scrollbarPosition, setScrollbarPosition] = useState({ width: 0, left: 0 });\n\n  const findClosestSnap = useCallback(\n    (nextProgress: number) => {\n      if (!api) return 0;\n\n      const point = nextProgress / 100;\n      const snapList = api.scrollSnapList();\n\n      if (snapList.length === 0) return -1;\n\n      const closestSnap = snapList.reduce((prev, curr) =>\n        Math.abs(curr - point) < Math.abs(prev - point) ? curr : prev,\n      );\n\n      return snapList.findIndex((snap) => snap === closestSnap);\n    },\n    [api],\n  );\n\n  useEffect(() => {\n    if (!api) return;\n\n    const snapList = api.scrollSnapList();\n    const closestSnapIndex = findClosestSnap(progress);\n    const scrollbarWidth = 100 / snapList.length;\n    const scrollbarLeft = (closestSnapIndex / snapList.length) * 100;\n\n    setScrollbarPosition({ width: scrollbarWidth, left: scrollbarLeft });\n\n    api.scrollTo(closestSnapIndex);\n  }, [progress, api, findClosestSnap]);\n\n  useEffect(() => {\n    if (!api) return;\n\n    function onScroll() {\n      if (!api) return;\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      setProgress(api.scrollSnapList()[api.selectedScrollSnap()]! * 100);\n    }\n\n    api.on('select', onScroll);\n    api.on('scroll', onScroll);\n    api.on('reInit', onScroll);\n\n    return () => {\n      api.off('select', onScroll);\n      api.off('scroll', onScroll);\n      api.off('reInit', onScroll);\n    };\n  }, [api]);\n\n  return (\n    <div\n      className={clsx(\n        'relative flex h-6 w-full max-w-56 items-center overflow-hidden',\n        !canScrollPrev && !canScrollNext && 'pointer-events-none invisible',\n        className,\n      )}\n    >\n      <input\n        aria-label={label}\n        aria-orientation=\"horizontal\"\n        aria-valuenow={progress}\n        aria-valuetext={`${Math.round(progress)}%`}\n        className=\"absolute h-full w-full cursor-pointer appearance-none bg-transparent opacity-0\"\n        max={100}\n        min={0}\n        onChange={(e) => setProgress(e.currentTarget.valueAsNumber)}\n        type=\"range\"\n        value={progress}\n      />\n      {/* Track */}\n      <div\n        className={clsx(\n          'pointer-events-none absolute h-1 w-full rounded-full opacity-10',\n          {\n            light: 'bg-[var(--carousel-light-scrollbar,hsl(var(--foreground)))]',\n            dark: 'bg-[var(--carousel-dark-scrollbar,hsl(var(--background)))]',\n          }[colorScheme],\n        )}\n      />\n\n      {/* Bar */}\n      <div\n        className={clsx(\n          'pointer-events-none absolute h-1 rounded-full transition-all ease-out',\n          {\n            light: 'bg-[var(--carousel-light-scrollbar,hsl(var(--foreground)))]',\n            dark: 'bg-[var(--carousel-dark-scrollbar,hsl(var(--background)))]',\n          }[colorScheme],\n        )}\n        style={{\n          width: `${scrollbarPosition.width}%`,\n          left: `${scrollbarPosition.left}%`,\n        }}\n      />\n    </div>\n  );\n}\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselButtons,\n  CarouselScrollbar,\n};\n"
      },
      "componentType": "primitive"
    },
    {
      "name": "checkbox",
      "dependencies": [],
      "registryDependencies": [
        "clsx",
        "lucide-react",
        "@radix-ui/react-checkbox"
      ],
      "files": [
        "primitives/checkbox/index.tsx"
      ],
      "doc": "---\ntitle: Checkbox\npreview: checkbox-example\npreviewSize: xs\n---\n",
      "docFile": "/dev/vibes/soul/docs/checkbox.mdx",
      "example": "'use client';\n\nimport { useState } from 'react';\n\nimport { Checkbox } from '@/vibes/soul/primitives/checkbox';\n\nexport default function Preview() {\n  const [checked, setChecked] = useState(false);\n\n  return (\n    <div className=\"flex h-screen flex-col justify-center gap-4 p-10\">\n      <Checkbox checked={checked} id=\"example-1\" label=\"Checkbox\" setChecked={setChecked} />\n      <Checkbox\n        checked={checked}\n        error=\"You must accept the Terms & Conditions\"\n        id=\"example-2\"\n        label=\"Accept Terms & Conditions\"\n        setChecked={setChecked}\n      />\n    </div>\n  );\n}\n",
      "exampleFile": "/src/vibes/soul/examples/primitives/checkbox/index.tsx",
      "componentName": "Checkbox",
      "source": {
        "primitives/checkbox/index.tsx": "import * as RadixCheckbox from '@radix-ui/react-checkbox';\nimport { clsx } from 'clsx';\nimport { Check } from 'lucide-react';\n\ninterface Props {\n  id?: string;\n  checked: boolean;\n  // TODO: refactor props here\n  setChecked?: (checked: boolean) => void;\n  label?: React.ReactNode;\n  error?: string;\n  className?: string;\n}\n\nexport function Checkbox({ id, checked = false, setChecked, label, error, className }: Props) {\n  return (\n    <div>\n      <div className={clsx('flex items-center gap-2', className)}>\n        <RadixCheckbox.Root\n          checked={checked}\n          className={clsx(\n            'flex h-6 w-6 shrink-0 items-center justify-center rounded-md border transition-colors duration-150',\n            'focus-visible:outline-0 focus-visible:ring-2 focus-visible:ring-primary',\n            checked ? 'border-foreground bg-foreground' : 'border-contrast-300 bg-background',\n            error != null && error !== '' ? 'border-error' : 'border-contrast-300',\n          )}\n          defaultChecked\n          id={id}\n          onCheckedChange={setChecked}\n        >\n          <RadixCheckbox.Indicator>\n            <Check className=\"h-4 w-4\" color=\"white\" />\n          </RadixCheckbox.Indicator>\n        </RadixCheckbox.Root>\n\n        {label != null && label !== '' && (\n          <label className=\"cursor-pointer select-none text-foreground\" htmlFor={id}>\n            {label}\n          </label>\n        )}\n      </div>\n      {error != null && error !== '' && <span className=\"text-xs text-error\">{error}</span>}\n    </div>\n  );\n}\n"
      },
      "componentType": "primitive"
    },
    {
      "name": "counter",
      "dependencies": [],
      "registryDependencies": [
        "lucide-react"
      ],
      "files": [
        "primitives/counter/index.tsx"
      ],
      "doc": "---\ntitle: Counter\npreview: counter-example\npreviewSize: xs\n---\n",
      "docFile": "/dev/vibes/soul/docs/counter.mdx",
      "example": "import { Counter } from '@/vibes/soul/primitives/counter';\n\nexport default function Preview() {\n  return (\n    <div className=\"flex h-screen items-center justify-center\">\n      <Counter />\n    </div>\n  );\n}\n",
      "exampleFile": "/src/vibes/soul/examples/primitives/counter/index.tsx",
      "componentName": "Counter",
      "source": {
        "primitives/counter/index.tsx": "'use client';\n\nimport { clsx } from 'clsx';\nimport { Minus, Plus } from 'lucide-react';\nimport { useState } from 'react';\n\ninterface Props {\n  current?: number;\n  max?: number;\n  decrementAriaLabel?: string;\n  incrementAriaLabel?: string;\n}\n\nexport const Counter = function Counter({\n  current = 0,\n  decrementAriaLabel,\n  incrementAriaLabel,\n}: Props) {\n  const [count, setCount] = useState(current);\n  const decrement = () => {\n    setCount((prev) => prev - 1);\n  };\n  const increment = () => {\n    setCount((prev) => prev + 1);\n  };\n\n  return (\n    <div className=\"flex items-center justify-between rounded-lg border\">\n      <button\n        aria-label={decrementAriaLabel ?? 'Decrease count'}\n        className={clsx(\n          'group rounded-l-lg p-3 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary',\n          { 'hover:bg-contrast-100/50': count > 0 },\n        )}\n        disabled={count === 0}\n        onClick={decrement}\n      >\n        <Minus\n          className={clsx('text-contrast-300 transition-colors duration-300', {\n            'group-hover:text-foreground': count > 0,\n          })}\n          size={18}\n          strokeWidth={1.5}\n        />\n      </button>\n      <input\n        className=\"w-8 select-none text-center focus-visible:outline-none\"\n        // type=\"number\"\n        // style={{\n        //   appearance: 'none', // Remove default styling\n        //   MozAppearance: 'textfield', // For Firefox\n        //   WebkitAppearance: 'none', // For Chrome and Safari\n        // }}\n        value={count}\n      />\n\n      <button\n        aria-label={incrementAriaLabel ?? 'Increase count'}\n        className=\"group rounded-r-lg p-3 transition-colors duration-300 hover:bg-contrast-100/50 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary\"\n        onClick={increment}\n      >\n        <Plus\n          className=\"text-contrast-300 transition-colors duration-300 group-hover:text-foreground\"\n          size={18}\n          strokeWidth={1.5}\n        />\n      </button>\n    </div>\n  );\n};\n"
      },
      "componentType": "primitive"
    },
    {
      "name": "cursor-pagination",
      "dependencies": [],
      "registryDependencies": [
        "lucide-react",
        "nuqs",
        "clsx"
      ],
      "files": [
        "primitives/cursor-pagination/index.tsx"
      ],
      "doc": "---\ntitle: Pagination\npreview: cursor-pagination-example\npreviewSize: sm\n---\n",
      "docFile": "/dev/vibes/soul/docs/cursor-pagination.mdx",
      "example": "import { CursorPagination } from '@/vibes/soul/primitives/cursor-pagination';\n\nexport default function Page() {\n  return (\n    <>\n      <CursorPagination info={{ endCursor: '2' }} />\n      <CursorPagination info={{ startCursor: '1', endCursor: '2' }} />\n      <CursorPagination info={{ startCursor: '1' }} />\n    </>\n  );\n}\n",
      "exampleFile": "/src/vibes/soul/examples/primitives/cursor-pagination/index.tsx",
      "componentName": "CursorPagination",
      "source": {
        "primitives/cursor-pagination/index.tsx": "'use client';\n\nimport { clsx } from 'clsx';\nimport { ArrowLeft, ArrowRight } from 'lucide-react';\nimport Link from 'next/link';\nimport { useSearchParams } from 'next/navigation';\nimport { createSerializer, parseAsString } from 'nuqs';\nimport { Suspense } from 'react';\n\nimport { Streamable, useStreamable } from '@/vibes/soul/lib/streamable';\n\nexport interface CursorPaginationInfo {\n  startCursorParamName?: string;\n  startCursor?: string | null;\n  endCursorParamName?: string;\n  endCursor?: string | null;\n}\n\ninterface Props {\n  label?: Streamable<string | null>;\n  info: Streamable<CursorPaginationInfo>;\n  previousLabel?: Streamable<string | null>;\n  nextLabel?: Streamable<string | null>;\n  scroll?: boolean;\n}\n\nexport function CursorPagination(props: Props) {\n  return (\n    <Suspense fallback={<CursorPaginationSkeleton />}>\n      <CursorPaginationResolved {...props} />\n    </Suspense>\n  );\n}\n\nfunction CursorPaginationResolved({\n  label: streamableLabel,\n  info,\n  previousLabel: streamablePreviousLabel,\n  nextLabel: streamableNextLabel,\n  scroll,\n}: Props) {\n  const label = useStreamable(streamableLabel) ?? 'pagination';\n  const {\n    startCursorParamName = 'before',\n    endCursorParamName = 'after',\n    startCursor,\n    endCursor,\n  } = useStreamable(info);\n  const searchParams = useSearchParams();\n  const serialize = createSerializer({\n    [startCursorParamName]: parseAsString,\n    [endCursorParamName]: parseAsString,\n  });\n  const previousLabel = useStreamable(streamablePreviousLabel) ?? 'Go to previous page';\n  const nextLabel = useStreamable(streamableNextLabel) ?? 'Go to next page';\n\n  return (\n    <nav aria-label={label} className=\"py-10\" role=\"navigation\">\n      <ul className=\"flex items-center justify-center gap-3\">\n        <li>\n          {startCursor != null ? (\n            <PaginationLink\n              aria-label={previousLabel}\n              href={serialize(searchParams, {\n                [startCursorParamName]: startCursor,\n                [endCursorParamName]: null,\n              })}\n              scroll={scroll}\n            >\n              <ArrowLeft size={24} strokeWidth={1} />\n            </PaginationLink>\n          ) : (\n            <SkeletonLink>\n              <ArrowLeft size={24} strokeWidth={1} />\n            </SkeletonLink>\n          )}\n        </li>\n        <li>\n          {endCursor != null ? (\n            <PaginationLink\n              aria-label={nextLabel}\n              href={serialize(searchParams, {\n                [endCursorParamName]: endCursor,\n                [startCursorParamName]: null,\n              })}\n              scroll={scroll}\n            >\n              <ArrowRight size={24} strokeWidth={1} />\n            </PaginationLink>\n          ) : (\n            <SkeletonLink>\n              <ArrowRight size={24} strokeWidth={1} />\n            </SkeletonLink>\n          )}\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\nfunction PaginationLink({\n  href,\n  children,\n  scroll,\n  'aria-label': ariaLabel,\n}: {\n  href: string;\n  children: React.ReactNode;\n  scroll?: boolean;\n  ['aria-label']?: string;\n}) {\n  return (\n    <Link\n      aria-label={ariaLabel}\n      className={clsx(\n        'flex h-12 w-12 items-center justify-center rounded-full border border-contrast-100 text-foreground ring-primary transition-colors duration-300 hover:border-contrast-200 hover:bg-contrast-100 focus-visible:outline-0 focus-visible:ring-2',\n      )}\n      href={href}\n      scroll={scroll}\n    >\n      {children}\n    </Link>\n  );\n}\n\nfunction SkeletonLink({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"flex h-12 w-12 cursor-not-allowed items-center justify-center rounded-full border border-contrast-100 text-foreground opacity-50 duration-300\">\n      {children}\n    </div>\n  );\n}\n\nexport function CursorPaginationSkeleton() {\n  return (\n    <div className=\"flex w-full justify-center bg-background py-10 text-xs\">\n      <div className=\"flex gap-2\">\n        <SkeletonLink>\n          <ArrowLeft />\n        </SkeletonLink>\n        <SkeletonLink>\n          <ArrowRight />\n        </SkeletonLink>\n      </div>\n    </div>\n  );\n}\n"
      },
      "componentType": "primitive"
    },
    {
      "name": "dropdown",
      "dependencies": [],
      "registryDependencies": [
        "clsx",
        "lucide-react",
        "@radix-ui/react-dropdown-menu"
      ],
      "files": [
        "primitives/dropdown/index.tsx"
      ],
      "doc": "---\ntitle: Dropdown\npreview: dropdown-example\npreviewSize: sm\n---\n",
      "docFile": "/dev/vibes/soul/docs/dropdown.mdx",
      "example": "import { Dropdown } from '@/vibes/soul/primitives/dropdown';\n\nexport default function Preview() {\n  return (\n    <div className=\"mx-auto mt-10 flex h-screen max-w-52 flex-col gap-4\">\n      <Dropdown\n        items={['Most Recent', 'Most Popular', 'Price: Low to High', 'Price: High to Low']}\n        label=\"Dropdown\"\n      />\n      <Dropdown\n        error=\"You must select an option\"\n        items={['Most Recent', 'Most Popular', 'Price: Low to High', 'Price: High to Low']}\n        label=\"Dropdown\"\n      />\n    </div>\n  );\n}\n",
      "exampleFile": "/src/vibes/soul/examples/primitives/dropdown/index.tsx",
      "componentName": "Dropdown",
      "source": {
        "primitives/dropdown/index.tsx": "'use client';\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuTriggerProps,\n} from '@radix-ui/react-dropdown-menu';\nimport { clsx } from 'clsx';\nimport { ChevronDown } from 'lucide-react';\nimport { useState } from 'react';\n\nimport { Label } from '@/vibes/soul/primitives/label';\n\ninterface Props {\n  label: string;\n  labelOnTop?: boolean;\n  variant?: 'round' | 'rectangle';\n  items: string[];\n  required?: boolean;\n  error?: string;\n}\n\nexport const Dropdown = function Dropdown({\n  label,\n  labelOnTop = false,\n  variant = 'rectangle',\n  items,\n  required,\n  error,\n  ...props\n}: Props & DropdownMenuTriggerProps) {\n  const [selectedItem, setSelectedItem] = useState<string | null>(null);\n\n  return (\n    <div>\n      <div className=\"flex items-center justify-between\">\n        {labelOnTop && <Label className=\"mb-2 block text-foreground\">{label}</Label>}\n        {required === true && <span className=\"text-xs text-contrast-300\">Required</span>}\n      </div>\n      <DropdownMenu>\n        <DropdownMenuTrigger\n          className={clsx(\n            variant === 'rectangle' ? 'rounded-lg' : 'rounded-full',\n            'flex h-fit w-full select-none items-center justify-between gap-3 border bg-white p-2 px-5 py-3 font-medium text-foreground',\n            'text-sm ring-primary transition-colors hover:bg-contrast-100 focus-visible:outline-none focus-visible:ring-2',\n            error != null && error !== '' ? 'border-error' : 'border-contrast-100',\n          )}\n          {...props}\n        >\n          {selectedItem ?? label}\n          <ChevronDown className=\"w-5 text-foreground transition-transform\" strokeWidth={1.5} />\n        </DropdownMenuTrigger>\n        <DropdownMenuContent\n          className=\"z-50 mt-2 max-h-80 w-full overflow-y-scroll rounded-xl bg-background p-2 shadow-[2px_4px_24px_#00000010] \n          data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 \n          data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 \n          @4xl:rounded-3xl @4xl:p-4\"\n        >\n          {items.map((item) => (\n            <DropdownMenuItem\n              className={clsx(\n                'w-full cursor-default select-none rounded-xl px-3 py-2 text-sm font-medium text-contrast-400 outline-none transition-colors',\n                'hover:bg-contrast-100 hover:text-foreground @4xl:text-base',\n                {\n                  'text-foreground': selectedItem === item,\n                },\n              )}\n              key={item}\n              onSelect={() => setSelectedItem(item)}\n            >\n              {item}\n            </DropdownMenuItem>\n          ))}\n        </DropdownMenuContent>\n      </DropdownMenu>\n      {error != null && error !== '' && <span className=\"text-xs text-error\">{error}</span>}\n    </div>\n  );\n};\n"
      },
      "componentType": "primitive"
    },
    {
      "name": "favorite",
      "dependencies": [],
      "registryDependencies": [
        "clsx"
      ],
      "files": [
        "primitives/favorite/index.tsx",
        "primitives/favorite/heart.tsx",
        "primitives/favorite/styles.css"
      ],
      "doc": "---\ntitle: Favorite\npreview: favorite-example\n---\n",
      "docFile": "/dev/vibes/soul/docs/favorite.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/favorite/index.tsx",
      "componentName": "Favorite",
      "source": {
        "primitives/favorite/heart.tsx": "import { clsx } from 'clsx';\n\nimport './styles.css';\n\nexport function Heart({ filled = false }: { filled?: boolean }) {\n  return (\n    <svg\n      className=\"group-active:heart-pulse transform-gpu transition-transform duration-300 ease-out group-active:scale-75 sm:group-hover:scale-110\"\n      fill=\"none\"\n      height=\"21\"\n      viewBox=\"0 0 20 21\"\n      width=\"20\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      {/* Line Heart */}\n      <path\n        className={clsx({\n          '-translate-x-px -translate-y-px scale-110 opacity-0 transition-[opacity,transform] delay-100':\n            filled,\n        })}\n        d=\"M17.3666 4.34166C16.941 3.91583 16.4356 3.57803 15.8794 3.34757C15.3232 3.1171 14.727 2.99847 14.1249 2.99847C13.5229 2.99847 12.9267 3.1171 12.3705 3.34757C11.8143 3.57803 11.3089 3.91583 10.8833 4.34166L9.99994 5.225L9.1166 4.34166C8.25686 3.48192 7.0908 2.99892 5.87494 2.99892C4.65908 2.99892 3.49301 3.48192 2.63327 4.34166C1.77353 5.20141 1.29053 6.36747 1.29053 7.58333C1.29053 8.79919 1.77353 9.96525 2.63327 10.825L3.5166 11.7083L9.99994 18.1917L16.4833 11.7083L17.3666 10.825C17.7924 10.3994 18.1302 9.89401 18.3607 9.33779C18.5912 8.78158 18.7098 8.1854 18.7098 7.58333C18.7098 6.98126 18.5912 6.38508 18.3607 5.82887C18.1302 5.27265 17.7924 4.76729 17.3666 4.34166Z\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n\n      {/* Inner Filler Heart */}\n      <path\n        className={clsx(\n          'origin-center transition-transform duration-300 ease-out',\n          filled ? 'scale-100 fill-current' : 'scale-0',\n        )}\n        d=\"M17.3666 4.34166C16.941 3.91583 16.4356 3.57803 15.8794 3.34757C15.3232 3.1171 14.727 2.99847 14.1249 2.99847C13.5229 2.99847 12.9267 3.1171 12.3705 3.34757C11.8143 3.57803 11.3089 3.91583 10.8833 4.34166L9.99994 5.225L9.1166 4.34166C8.25686 3.48192 7.0908 2.99892 5.87494 2.99892C4.65908 2.99892 3.49301 3.48192 2.63327 4.34166C1.77353 5.20141 1.29053 6.36747 1.29053 7.58333C1.29053 8.79919 1.77353 9.96525 2.63327 10.825L3.5166 11.7083L9.99994 18.1917L16.4833 11.7083L17.3666 10.825C17.7924 10.3994 18.1302 9.89401 18.3607 9.33779C18.5912 8.78158 18.7098 8.1854 18.7098 7.58333C18.7098 6.98126 18.5912 6.38508 18.3607 5.82887C18.1302 5.27265 17.7924 4.76729 17.3666 4.34166Z\"\n      />\n    </svg>\n  );\n}\n",
        "primitives/favorite/index.tsx": "import { clsx } from 'clsx';\n\nimport { Heart } from '@/vibes/soul/primitives/favorite/heart';\n\ninterface Props {\n  checked?: boolean;\n  setChecked: (liked: boolean) => void;\n}\n\nexport const Favorite = function Favorite({ checked, setChecked }: Props) {\n  return (\n    <label\n      className={clsx(\n        'group relative flex h-[50px] w-[50px] shrink-0 cursor-pointer items-center justify-center rounded-full border border-contrast-100 text-foreground ring-primary transition-[colors,transform] duration-300 focus-within:outline-0 focus-within:ring-2',\n        checked === true ? 'bg-contrast-100' : 'hover:border-contrast-200',\n      )}\n    >\n      <input\n        aria-label=\"Favorite\"\n        checked={checked}\n        className=\"absolute h-0 w-0 opacity-0\"\n        id=\"favorite-checkbox\"\n        onChange={() => {\n          setChecked(checked === true ? false : true);\n        }}\n        type=\"checkbox\"\n      />\n      <Heart filled={checked} />\n    </label>\n  );\n};\n",
        "primitives/favorite/styles.css": ".heart-pulse {\n  animation: heart-pulse 0.75s forwards;\n}\n\n@keyframes heart-pulse {\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.3);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n"
      },
      "componentType": "primitive"
    },
    {
      "name": "feature",
      "dependencies": [
        "button"
      ],
      "registryDependencies": [
        "clsx",
        "lucide-react"
      ],
      "files": [
        "sections/feature/index.tsx",
        "primitives/icon/index.tsx"
      ],
      "doc": "---\ntitle: Feature\npreview:\n  Electric: feature-electric-example\n  Warm: feature-warm-example\n  Luxury: feature-luxury-example\npreviewSize: lg\n---\n",
      "docFile": "/dev/vibes/soul/docs/feature.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/feature/index.tsx",
      "componentName": "Feature",
      "source": {
        "sections/feature/index.tsx": "import { clsx } from 'clsx';\nimport Image from 'next/image';\nimport Link from 'next/link';\n\nimport { Button } from '@/vibes/soul/primitives/button';\nimport { Icon, IconName } from '@/vibes/soul/primitives/icon';\n\nexport interface FeatureProps {\n  image: {\n    src: string;\n    alt: string;\n  };\n  title?: string;\n  description?: string;\n  grid?: Array<{\n    icon: IconName;\n    title: string;\n    description: string;\n  }>;\n  cta: {\n    href: string;\n    label: string;\n  };\n}\n\nexport const Feature = function Feature({ image, title, description, grid, cta }: FeatureProps) {\n  return (\n    <section className=\"relative bg-primary-shadow @container/section\">\n      <div className=\"mx-auto flex w-full max-w-screen-2xl flex-col items-center @3xl/section:max-h-[880px] @3xl/section:flex-row @5xl/section:h-dvh\">\n        {/* Image Side */}\n        <div\n          className=\"relative aspect-square w-full overflow-hidden bg-primary/10\n          @3xl/section:aspect-[9/12] @4xl/section:my-[110px] @4xl/section:w-2/3 @4xl/section:rounded-xl \n          @4xl:ml-10 @5xl/section:w-3/5 @6xl/section:ml-20\"\n        >\n          <Image\n            alt={image.alt}\n            className=\"object-cover\"\n            fill\n            sizes=\"(max-width: 768px) 100vw, 384px\"\n            src={image.src}\n          />\n        </div>\n\n        {/* Content Side */}\n        <div\n          className=\"mx-auto w-full items-start px-3 py-10 text-background\n          @container/content @lg/section:px-10 @5xl:p-20\"\n        >\n          <div className=\"mx-auto flex max-w-xl flex-col gap-4\">\n            {title != null && title !== '' && (\n              <h2 className=\"font-heading text-4xl font-medium leading-none @xl:text-5xl\">\n                {title}\n              </h2>\n            )}\n\n            {description != null && description !== '' && <p className=\"pb-2\">{description}</p>}\n\n            {grid != null && (\n              <ul className=\"mx-auto mb-16 grid gap-10 @xs/content:grid-cols-2 @4xl/section:mx-0\">\n                {grid.map(({ title: itemTitle, description: itemDescription, icon }, idx) => {\n                  return (\n                    <li className=\"flex gap-4 @sm/content:items-center\" key={idx}>\n                      <Icon\n                        className=\"h-8 w-8 @xs/content:h-5 @xs/content:w-5 @lg/content:h-10 @lg/content:w-10\"\n                        name={icon}\n                      />\n                      <div className=\"flex flex-col\">\n                        <span className=\"-mt-1.5 text-lg font-medium @sm/content:-mt-1 @md/content:text-xl\">\n                          {itemTitle}\n                        </span>\n                        <span className=\"text-xs opacity-80 @md/content:text-sm\">\n                          {itemDescription}\n                        </span>\n                      </div>\n                    </li>\n                  );\n                })}\n              </ul>\n            )}\n            <Button\n              className={clsx({\n                'self-center @3xl/section:self-start': grid?.length,\n              })}\n              variant=\"primary\"\n            >\n              <Link href={cta.href}>{cta.label}</Link>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n",
        "primitives/icon/index.tsx": "import { clsx } from 'clsx';\nimport dynamicIconImports from 'lucide-react/dynamicIconImports';\nimport { lazy, Suspense, useMemo } from 'react';\n\nexport type IconName = keyof typeof dynamicIconImports;\n\n// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\nexport const IconNames = Object.keys(dynamicIconImports) as IconName[];\n\nexport function Icon({\n  className,\n  name,\n  size = 24,\n}: {\n  className?: string;\n  size?: number;\n  name: IconName;\n}) {\n  const LucideIcon = useMemo(() => lazy(dynamicIconImports[name]), [name]);\n\n  return (\n    <Suspense\n      fallback={\n        <div\n          className={clsx('animate-pulse rounded-full bg-contrast-100', className)}\n          style={{ width: size, height: size }}\n        />\n      }\n    >\n      <LucideIcon className={className} size={size} />\n    </Suspense>\n  );\n}\n"
      },
      "componentType": "section"
    },
    {
      "name": "featured-video",
      "dependencies": [
        "button"
      ],
      "registryDependencies": [
        "clsx"
      ],
      "files": [
        "sections/featured-video/index.tsx"
      ],
      "doc": "---\ntitle: Featured Video\npreview: featured-video-example\npreviewSize: lg\n---\n",
      "docFile": "/dev/vibes/soul/docs/featured-video.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/featured-video/index.tsx",
      "componentName": "FeaturedVideo",
      "source": {
        "sections/featured-video/index.tsx": "import { clsx } from 'clsx';\nimport Link from 'next/link';\n\nimport { Button } from '@/vibes/soul/primitives/button';\n\ninterface Props {\n  title: string;\n  description: string;\n  video: string;\n  cta: {\n    href: string;\n    label: string;\n  };\n  mediaAlign?: 'left' | 'right' | 'full';\n}\n\nexport const FeaturedVideo = function FeaturedVideo({\n  title,\n  description,\n  video,\n  cta,\n  mediaAlign = 'left',\n}: Props) {\n  return (\n    <section\n      className={clsx(\n        'relative bg-primary-shadow @container',\n        mediaAlign === 'full' && 'h-dvh max-h-[880px]',\n      )}\n    >\n      <div className=\"mx-auto flex h-full max-w-screen-2xl flex-col @3xl:flex-row\">\n        <video\n          autoPlay\n          className={clsx(\n            'w-full object-cover',\n            mediaAlign === 'full'\n              ? 'absolute inset-0 h-full'\n              : 'aspect-square @xl:aspect-[9/6] @3xl:h-dvh @3xl:max-h-[880px] @3xl:w-1/2 @5xl:w-3/5',\n            { '@3xl:order-2': mediaAlign === 'right' },\n          )}\n          loop\n          muted\n        >\n          <source src={video} type=\"video/mp4\" />\n        </video>\n        <div\n          className={clsx(\n            'z-10 mx-auto flex flex-col items-start gap-4 px-3 py-10 text-background @5xl:p-20',\n            mediaAlign === 'full'\n              ? 'mx-auto mt-auto w-full max-w-screen-2xl px-3 @xl:px-6 @5xl:px-20'\n              : 'w-full justify-end @xl:px-6 @3xl:w-1/2 @5xl:w-2/5',\n            { '@3xl:order-1': mediaAlign === 'right' },\n          )}\n        >\n          <h1 className=\"max-w-xl text-4xl font-medium leading-none @xl:text-5xl\">{title}</h1>\n          <p className=\"max-w-md pb-2\">{description}</p>\n          <Button\n            className={clsx(mediaAlign === 'full' ? 'text-background' : 'text-foreground')}\n            variant={mediaAlign === 'full' ? 'tertiary' : 'primary'}\n          >\n            <Link href={cta.href}>{cta.label}</Link>\n          </Button>\n        </div>\n      </div>\n    </section>\n  );\n};\n"
      },
      "componentType": "section"
    },
    {
      "name": "input",
      "dependencies": [],
      "registryDependencies": [
        "clsx",
        "lucide-react"
      ],
      "files": [
        "primitives/input/index.tsx"
      ],
      "doc": "---\ntitle: Input\npreview: input-example\npreviewSize: sm\n---\n",
      "docFile": "/dev/vibes/soul/docs/input.mdx",
      "example": "import { Input } from '@/vibes/soul/primitives/input';\n\nexport default function Preview() {\n  return (\n    <div className=\"mx-auto flex max-w-[390px] flex-col justify-center gap-3 p-5 sm:p-8 lg:p-12\">\n      <Input label=\"Label\" placeholder=\"Amount\" prepend=\"$\" />\n      <Input placeholder=\"First Name\" />\n      <Input error=\"Last name required\" placeholder=\"Last Name\" />\n    </div>\n  );\n}\n",
      "exampleFile": "/src/vibes/soul/examples/primitives/input/index.tsx",
      "componentName": "Input",
      "source": {
        "primitives/input/index.tsx": "'use client';\n\nimport { clsx } from 'clsx';\nimport { ComponentPropsWithRef, forwardRef, Ref } from 'react';\n\nimport { Label } from '@/vibes/soul/primitives/label';\n\nexport interface Props extends ComponentPropsWithRef<'input'> {\n  prepend?: string;\n  label?: string;\n  error?: string;\n  className?: string;\n}\n\nexport const Input = forwardRef(function Input(\n  { prepend, label, className, required, error, ...rest }: Props,\n  ref: Ref<HTMLInputElement>,\n) {\n  return (\n    <div className={clsx('w-full', className)}>\n      <div className=\"flex items-center justify-between\">\n        {label != null && label !== '' && (\n          <Label className=\"mb-2 block text-foreground\">{label}</Label>\n        )}\n        {required === true && <span className=\"text-xs text-contrast-300\">Required</span>}\n      </div>\n      <div\n        className={clsx(\n          'relative overflow-hidden rounded-lg border bg-background transition-colors duration-200 focus-within:border-foreground focus:outline-none',\n          error != null && error !== '' ? 'border-error' : 'border-contrast-100',\n        )}\n      >\n        {prepend != null && prepend !== '' && (\n          <span className=\"pointer-events-none absolute left-5 top-1/2 -translate-y-1/2\">\n            {prepend}\n          </span>\n        )}\n        <input\n          ref={ref}\n          {...rest}\n          className={clsx(\n            'placeholder-contrast-gray-500 w-full bg-transparent px-6 py-3 text-foreground [appearance:textfield] placeholder:font-normal focus:outline-none [&::-webkit-inner-spin-button]:appearance-none [&::-webkit-outer-spin-button]:appearance-none',\n            {\n              'py-3 pl-10 pr-6': prepend,\n            },\n          )}\n        />\n      </div>\n      {error != null && error !== '' && <span className=\"text-xs text-error\">{error}</span>}\n    </div>\n  );\n});\n"
      },
      "componentType": "primitive"
    },
    {
      "name": "inline-email-form",
      "dependencies": [],
      "registryDependencies": [
        "lucide-react",
        "@conform-to/react",
        "@conform-to/zod"
      ],
      "files": [
        "primitives/inline-email-form/index.tsx"
      ],
      "doc": "---\ntitle: Inline Email Form\npreview: inline-email-form-example\npreviewSize: sm\n---\n",
      "docFile": "/dev/vibes/soul/docs/inline-email-form.mdx",
      "example": "import { InlineEmailForm } from '@/vibes/soul/primitives/inline-email-form';\n\nimport { action } from './actions';\n\nexport default function Preview() {\n  return (\n    <div className=\"p-10\">\n      <InlineEmailForm action={action} />\n    </div>\n  );\n}\n",
      "exampleFile": "/src/vibes/soul/examples/primitives/inline-email-form/index.tsx",
      "componentName": "InlineEmailForm",
      "source": {
        "primitives/inline-email-form/index.tsx": "'use client';\n\nimport { getFormProps, getInputProps, SubmissionResult, useForm } from '@conform-to/react';\nimport { parseWithZod } from '@conform-to/zod';\nimport { clsx } from 'clsx';\nimport { ArrowRight } from 'lucide-react';\nimport { useActionState } from 'react';\n\nimport { FormStatus } from '@/vibes/soul/form/form-status';\nimport { Button } from '@/vibes/soul/primitives/button';\n\nimport { schema } from './schema';\n\ntype Action<State, Payload> = (\n  prevState: Awaited<State>,\n  formData: Payload,\n) => State | Promise<State>;\n\nexport function InlineEmailForm({\n  className,\n  action,\n  submitLabel = 'Submit',\n  placeholder = 'Enter your email',\n}: {\n  className?: string;\n  placeholder?: string;\n  submitLabel?: string;\n  action: Action<{ lastResult: SubmissionResult | null; successMessage?: string }, FormData>;\n}) {\n  const [{ lastResult, successMessage }, formAction, isPending] = useActionState(action, {\n    lastResult: null,\n  });\n\n  const [form, fields] = useForm({\n    lastResult,\n    onValidate({ formData }) {\n      return parseWithZod(formData, { schema });\n    },\n    shouldValidate: 'onSubmit',\n    shouldRevalidate: 'onInput',\n  });\n\n  const { errors = [] } = fields.email;\n\n  return (\n    <form {...getFormProps(form)} action={formAction} className={clsx('space-y-2', className)}>\n      <div\n        className={clsx(\n          'relative rounded-xl border bg-background text-base transition-colors duration-200 focus-within:border-primary focus:outline-none',\n          errors.length ? 'border-error' : 'border-black',\n        )}\n      >\n        <input\n          {...getInputProps(fields.email, { type: 'email' })}\n          className=\"placeholder-contrast-gray-500 h-14 w-full bg-transparent pl-5 pr-16 text-foreground placeholder:font-normal focus:outline-none\"\n          data-1p-ignore\n          key={fields.email.id}\n          placeholder={placeholder}\n        />\n        <div className=\"absolute right-0 top-1/2 -translate-y-1/2 pr-2\">\n          <Button\n            aria-label={submitLabel}\n            loading={isPending}\n            shape=\"circle\"\n            size=\"small\"\n            type=\"submit\"\n            variant=\"secondary\"\n          >\n            <ArrowRight size={20} strokeWidth={1.5} />\n          </Button>\n        </div>\n      </div>\n      {errors.map((error, index) => (\n        <FormStatus key={index} type=\"error\">\n          {error}\n        </FormStatus>\n      ))}\n      {form.status === 'success' && successMessage != null && (\n        <FormStatus>{successMessage}</FormStatus>\n      )}\n    </form>\n  );\n}\n",
        "primitives/inline-email-form/schema.ts": "import { z } from 'zod';\n\nexport const schema = z.object({\n  email: z.string().email(),\n});\n"
      },
      "componentType": "primitive"
    },
    {
      "name": "pagination",
      "dependencies": [],
      "registryDependencies": [
        "clsx"
      ],
      "files": [
        "primitives/pagination/index.tsx"
      ],
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/pagination/index.tsx",
      "componentName": "Pagination",
      "source": {},
      "componentType": "primitive"
    },
    {
      "name": "price-label",
      "dependencies": [],
      "registryDependencies": [
        "clsx"
      ],
      "files": [
        "primitives/price-label/index.tsx"
      ],
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/price-label/index.tsx",
      "componentName": "PriceLabel",
      "source": {
        "primitives/price-label/index.tsx": "import { clsx } from 'clsx';\n\nexport interface PriceRange {\n  type: 'range';\n  minValue: string;\n  maxValue: string;\n}\n\nexport interface PriceSale {\n  type: 'sale';\n  previousValue: string;\n  currentValue: string;\n}\n\nexport type Price = string | PriceRange | PriceSale;\n\ninterface Props {\n  className?: string;\n  colorScheme?: 'light' | 'dark';\n  price: Price;\n}\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n * :root {\n *   --price-light-text: hsl(var(--foreground));\n *   --price-light-sale-text: hsl(var(--foreground));\n *   --price-dark-text: hsl(var(--background));\n *   --price-dark-sale-text: hsl(var(--background));\n * }\n * ```\n */\nexport function PriceLabel({ className, colorScheme = 'light', price }: Props) {\n  if (typeof price === 'string') {\n    return (\n      <span\n        className={clsx(\n          'block font-semibold',\n          {\n            light: 'text-[var(--price-light-text,hsl(var(--foreground)))]',\n            dark: 'text-[var(--price-dark-text,hsl(var(--background)))]',\n          }[colorScheme],\n          className,\n        )}\n      >\n        {price}\n      </span>\n    );\n  }\n\n  switch (price.type) {\n    case 'range':\n      return (\n        <span\n          className={clsx(\n            'block font-semibold',\n            {\n              light: 'text-[var(--price-light-text,hsl(var(--foreground)))]',\n              dark: 'text-[var(--price-dark-text,hsl(var(--background)))]',\n            }[colorScheme],\n            className,\n          )}\n        >\n          {price.minValue}\n          &nbsp;&ndash;&nbsp;\n          {price.maxValue}\n        </span>\n      );\n    case 'sale':\n      return (\n        <span className={clsx('block font-semibold', className)}>\n          <span\n            className={clsx(\n              'font-normal line-through opacity-50',\n              {\n                light: 'text-[var(--price-light-text,hsl(var(--foreground)))]',\n                dark: 'text-[var(--price-dark-text,hsl(var(--background)))]',\n              }[colorScheme],\n            )}\n          >\n            {price.previousValue}\n          </span>{' '}\n          <span\n            className={clsx(\n              {\n                light: 'text-[var(--price-light-sale-text,hsl(var(--foreground)))]',\n                dark: 'text-[var(--price-dark-sale-text,hsl(var(--background)))]',\n              }[colorScheme],\n            )}\n          >\n            {price.currentValue}\n          </span>\n        </span>\n      );\n    default:\n      return null;\n  }\n}\n"
      },
      "componentType": "primitive"
    },
    {
      "name": "product-card",
      "dependencies": [
        "badge",
        "checkbox",
        "price-label"
      ],
      "registryDependencies": [
        "clsx"
      ],
      "files": [
        "primitives/product-card/index.tsx",
        "primitives/product-card/compare.tsx"
      ],
      "doc": "---\ntitle: Product Card\npreview: product-card-example\npreviewSize: md\n---\n\n## Usage\n\nImport the component.\n\n<CodeBlock lang=\"bash\">{`import { ProductCard } from '@/vibes/soul/primitives/product-card'\n`}</CodeBlock>\n\nDisplay the component.\n\n<CodeBlock lang=\"bash\">{`<ProductCard\n  id=\"1\"\n  href=\"#\"\n  title=\"Product Name\"\n  image={{\n    src: 'https://rstr.in/monogram/vibes/oUL4h2FvqIl',\n    alt: 'Product Name',\n  }}\n  subtitle=\"Blue/Black/Green\"\n  price=\"123.99\"\n  badge=\"New\"\n  showCompare\n/>\n`}</CodeBlock>\n\n## API Reference\n\n| Prop                | Type                                                     | Default |\n| ------------------- | -------------------------------------------------------- | ------- |\n| `id`                | `string`                                                 |         |\n| `title`             | `string`                                                 |         |\n| `href`              | `string`                                                 |         |\n| `image`             | `Image` <Tooltip content=\"{src: string, alt: string}\" /> |         |\n| `price?`            | `string` \\| [`ProductCardPrice`](#productcardprice)      |         |\n| `subtitle?`         | `string`                                                 |         |\n| `badge?`            | `string`                                                 |         |\n| `rating?`           | `number`                                                 |         |\n| `className?`        | `string`                                                 |         |\n| `showCompare?`      | `boolean`                                                | `false` |\n| `compareLabel?`     | `string`                                                 |         |\n| `compareParamName?` | `string`                                                 |         |\n\n### `ProductCardPrice`\n\n<CodeBlock lang=\"ts\">{`type ProductCardPrice = string | ProductCardPriceRange | ProductCardSalePrice;`}</CodeBlock>\n\n### `ProductCardPriceRange`\n\n<CodeBlock lang=\"ts\">\n  {`interface ProductCardPriceRange {\n  type: 'range'\n  minValue: string\n  maxValue: string\n}`}\n</CodeBlock>\n\n### `ProductCardSalePrice`\n\n<CodeBlock lang=\"ts\">\n  {`interface ProductCardSalePrice {\n  type: 'sale'\n  previousValue: string\n  currentValue: string\n}`}\n</CodeBlock>\n",
      "docFile": "/dev/vibes/soul/docs/product-card.mdx",
      "example": "import { ProductCard } from '@/vibes/soul/primitives/product-card';\n\nexport default function Preview() {\n  return (\n    <div>\n      <div className=\"bg-background p-8 @container\">\n        <div className=\"m-auto flex max-w-screen-md flex-col items-center gap-8 @md:flex-row\">\n          <ProductCard\n            className=\"w-full\"\n            product={{\n              id: '1',\n              href: '#',\n              title: 'Product Name',\n              image: {\n                src: 'https://rstr.in/monogram/vibes/oUL4h2FvqIl',\n                alt: 'Product Name',\n              },\n              subtitle: 'Blue/Black/Green',\n              price: '$123.99',\n              badge: 'New',\n            }}\n            showCompare\n          />\n          <ProductCard\n            className=\"w-full\"\n            product={{\n              id: '1',\n              href: '#',\n              title: 'Product Name',\n              subtitle: 'Blue/Black/Green',\n              price: {\n                type: 'sale',\n                previousValue: '$123.99',\n                currentValue: '$99.99',\n              },\n              badge: 'New',\n            }}\n            showCompare\n          />\n          <ProductCard\n            className=\"w-full\"\n            product={{\n              id: '1',\n              href: '#',\n              title: 'Product Name',\n              image: {\n                src: 'https://rstr.in/monogram/vibes/oUL4h2FvqIl',\n                alt: 'Product Name',\n              },\n              subtitle: 'Blue/Black/Green',\n              price: {\n                type: 'range',\n                minValue: '$99.99',\n                maxValue: '$123.99',\n              },\n            }}\n            showCompare\n          />\n        </div>\n      </div>\n      <div className=\"bg-foreground p-8 @container\">\n        <div className=\"m-auto flex max-w-screen-md flex-col items-center gap-8 @md:flex-row\">\n          <ProductCard\n            className=\"w-full\"\n            colorScheme=\"dark\"\n            product={{\n              id: '1',\n              href: '#',\n              title: 'Product Name',\n              image: {\n                src: 'https://rstr.in/monogram/vibes/oUL4h2FvqIl',\n                alt: 'Product Name',\n              },\n              subtitle: 'Blue/Black/Green',\n              price: '$123.99',\n              badge: 'New',\n            }}\n            showCompare\n          />\n          <ProductCard\n            className=\"w-full\"\n            colorScheme=\"dark\"\n            product={{\n              id: '1',\n              href: '#',\n              title: 'Product Name',\n              subtitle: 'Blue/Black/Green',\n              price: {\n                type: 'sale',\n                previousValue: '$123.99',\n                currentValue: '$99.99',\n              },\n              badge: 'New',\n            }}\n            showCompare\n          />\n          <ProductCard\n            className=\"w-full\"\n            colorScheme=\"dark\"\n            product={{\n              id: '1',\n              href: '#',\n              title: 'Product Name',\n              image: {\n                src: 'https://rstr.in/monogram/vibes/oUL4h2FvqIl',\n                alt: 'Product Name',\n              },\n              subtitle: 'Blue/Black/Green',\n              price: {\n                type: 'range',\n                minValue: '$99.99',\n                maxValue: '$123.99',\n              },\n            }}\n            showCompare\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "exampleFile": "/src/vibes/soul/examples/primitives/product-card/index.tsx",
      "componentName": "ProductCard",
      "source": {
        "primitives/product-card/compare.tsx": "'use client';\n\nimport { parseAsArrayOf, parseAsString, useQueryState } from 'nuqs';\n\nimport { Checkbox } from '@/vibes/soul/form/checkbox';\n\ninterface Props {\n  productId: string;\n  colorScheme?: 'light' | 'dark';\n  paramName?: string;\n  label?: string;\n}\n\nexport const Compare = function Compare({\n  productId,\n  colorScheme = 'light',\n  paramName = 'compare',\n  label = 'Compare',\n}: Props) {\n  const [param, setParam] = useQueryState(\n    paramName,\n    parseAsArrayOf(parseAsString).withOptions({ shallow: false }),\n  );\n\n  return (\n    <Checkbox\n      checked={param?.includes(productId) ?? false}\n      colorScheme={colorScheme}\n      label={label}\n      onCheckedChange={(value) => {\n        void setParam((prev) => {\n          const next =\n            value === true\n              ? [...(prev ?? []), productId]\n              : (prev ?? []).filter((v) => v !== productId);\n\n          return next.length > 0 ? next : null;\n        });\n      }}\n    />\n  );\n};\n",
        "primitives/product-card/index.tsx": "import { clsx } from 'clsx';\nimport Image from 'next/image';\nimport Link from 'next/link';\n\nimport { Badge } from '@/vibes/soul/primitives/badge';\nimport { Price, PriceLabel } from '@/vibes/soul/primitives/price-label';\n\nimport { Compare } from './compare';\n\nexport interface CardProduct {\n  id: string;\n  title: string;\n  href: string;\n  image?: { src: string; alt: string };\n  price?: Price;\n  subtitle?: string;\n  badge?: string;\n  rating?: number;\n}\n\ninterface Props {\n  className?: string;\n  colorScheme?: 'light' | 'dark';\n  aspectRatio?: '5:6' | '3:4' | '1:1';\n  showCompare?: boolean;\n  imagePriority?: boolean;\n  compareLabel?: string;\n  compareParamName?: string;\n  product: CardProduct;\n}\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n * :root {\n *   --product-card-focus: hsl(var(--primary));\n *   --product-card-border-radius: 1rem;\n *   --product-card-light-background: hsl(var(--contrast-100));\n *   --product-card-light-title: hsl(var(--foreground));\n *   --product-card-light-subtitle: hsl(var(--foreground) / 75%);\n *   --product-card-dark-background: hsl(var(--contrast-500));\n *   --product-card-dark-title: hsl(var(--background));\n *   --product-card-dark-subtitle: hsl(var(--background) / 75%);\n * }\n * ```\n */\nexport function ProductCard({\n  product: { id, title, subtitle, badge, price, image, href },\n  colorScheme = 'light',\n  className,\n  showCompare = false,\n  aspectRatio = '5:6',\n  compareLabel,\n  compareParamName,\n  imagePriority = false,\n}: Props) {\n  return (\n    <div className={clsx('@container', className)}>\n      <Link\n        aria-label={title}\n        className=\"group flex cursor-pointer flex-col gap-2 rounded-[var(--product-card-border-radius,1rem)] ring-[var(--product-card-focus,hsl(var(--primary)))] ring-offset-4 focus-visible:outline-0 focus-visible:ring-2\"\n        href={href}\n        id={id}\n      >\n        <div\n          className={clsx(\n            'relative overflow-hidden rounded-[inherit]',\n            {\n              '5:6': 'aspect-[5/6]',\n              '3:4': 'aspect-[3/4]',\n              '1:1': 'aspect-square',\n            }[aspectRatio],\n            {\n              light: 'bg-[var(--product-card-light-background,hsl(var(--contrast-100)))]',\n              dark: 'bg-[var(--product-card-dark-background,hsl(var(--contrast-500)))]',\n            }[colorScheme],\n          )}\n        >\n          {image != null ? (\n            <Image\n              alt={image.alt}\n              className={clsx(\n                'w-full scale-100 select-none object-cover transition-transform duration-500 ease-out group-hover:scale-110',\n                {\n                  light: 'bg-[var(--product-card-light-background,hsl(var(--contrast-100))]',\n                  dark: 'bg-[var(--product-card-dark-background,hsl(var(--contrast-500))]',\n                }[colorScheme],\n              )}\n              fill\n              priority={imagePriority}\n              sizes=\"(max-width: 768px) 70vw, 33vw\"\n              src={image.src}\n            />\n          ) : (\n            <div\n              className={clsx(\n                'break-words pl-5 pt-5 text-4xl font-bold leading-[0.8] tracking-tighter opacity-25 transition-transform duration-500 ease-out group-hover:scale-105 @xs:text-7xl',\n                {\n                  light: 'text-[var(--product-card-light-title,hsl(var(--foreground)))]',\n                  dark: 'text-[var(--product-card-dark-title,hsl(var(--background)))]',\n                }[colorScheme],\n              )}\n            >\n              {title}\n            </div>\n          )}\n          {badge != null && badge !== '' && (\n            <Badge className=\"absolute left-3 top-3\" variant=\"rounded\">\n              {badge}\n            </Badge>\n          )}\n        </div>\n      </Link>\n\n      <div className=\"mt-2 flex flex-col items-start gap-x-4 gap-y-3 px-1 @xs:mt-3 @2xl:flex-row\">\n        <div className=\"flex-1\">\n          <Link className=\"group text-base\" href={href} tabIndex={-1}>\n            <span\n              className={clsx(\n                'block font-semibold',\n                {\n                  light: 'text-[var(--product-card-light-title,hsl(var(--foreground)))]',\n                  dark: 'text-[var(--product-card-dark-title,hsl(var(--background)))]',\n                }[colorScheme],\n              )}\n            >\n              {title}\n            </span>\n\n            {subtitle != null && subtitle !== '' && (\n              <span\n                className={clsx(\n                  'mb-2 block text-sm font-normal',\n                  {\n                    light: 'text-[var(--product-card-light-subtitle,hsl(var(--foreground)/75%))]',\n                    dark: 'text-[var(--product-card-dark-subtitle,hsl(var(--background)/75%))]',\n                  }[colorScheme],\n                )}\n              >\n                {subtitle}\n              </span>\n            )}\n            {price != null && <PriceLabel colorScheme={colorScheme} price={price} />}\n          </Link>\n        </div>\n\n        {showCompare && (\n          <div className=\"mt-0.5 shrink-0\">\n            <Compare\n              colorScheme={colorScheme}\n              label={compareLabel}\n              paramName={compareParamName}\n              productId={id}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport function ProductCardSkeleton({ className }: { className?: string }) {\n  return (\n    <div className={className}>\n      <div className=\"flex aspect-[5/6] flex-col gap-2 rounded-xl bg-contrast-100 @md:rounded-2xl\" />\n      <div className=\"mt-2 flex flex-col items-start gap-x-4 gap-y-3 px-1 @xs:mt-3 @2xl:flex-row\">\n        <div className=\"flex-1\">\n          <div className=\"flex flex-col text-base\">\n            <div className=\"flex h-[1lh] items-center\">\n              <span className=\"block h-[1ex] w-[10ch] rounded-sm bg-contrast-100\" />\n            </div>\n            <div className=\"mb-2 flex h-[1lh] items-center text-sm font-normal text-contrast-400\">\n              <span className=\"block h-[1ex] w-[8ch] rounded-sm bg-contrast-100\" />\n            </div>\n            <div className=\"flex h-[1lh] items-center\">\n              <span className=\"block h-[1ex] w-[5ch] rounded-sm bg-contrast-100\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"
      },
      "componentType": "primitive"
    },
    {
      "name": "products-carousel",
      "dependencies": [
        "product-card",
        "carousel"
      ],
      "registryDependencies": [
        "clsx"
      ],
      "files": [
        "primitives/products-carousel/index.tsx"
      ],
      "doc": "---\ntitle: Products Carousel\npreview: products-carousel-example\npreviewSize: lg\n---\n",
      "docFile": "/dev/vibes/soul/docs/products-carousel.mdx",
      "example": "import { getProducts } from '@/vibes/soul/data';\nimport { ProductsCarousel } from '@/vibes/soul/primitives/products-carousel';\n\nexport default function Preview() {\n  const products = getProducts('Warm');\n\n  return (\n    <div>\n      <section className=\"overflow-hidden @container\">\n        <div className=\"mx-auto w-full max-w-screen-2xl px-4 py-10 @xl:px-6 @xl:py-14 @4xl:px-8 @4xl:py-20\">\n          <ProductsCarousel products={products} />\n        </div>\n      </section>\n      <section className=\"overflow-hidden bg-foreground @container\">\n        <div className=\"mx-auto w-full max-w-screen-2xl px-4 py-10 @xl:px-6 @xl:py-14 @4xl:px-8 @4xl:py-20\">\n          <ProductsCarousel colorScheme=\"dark\" products={products} showScrollbar={false} />\n        </div>\n      </section>\n    </div>\n  );\n}\n",
      "exampleFile": "/src/vibes/soul/examples/primitives/products-carousel/index.tsx",
      "componentName": "ProductsCarousel",
      "source": {
        "primitives/products-carousel/index.tsx": "import { clsx } from 'clsx';\n\nimport { Stream, Streamable } from '@/vibes/soul/lib/streamable';\nimport {\n  Carousel,\n  CarouselButtons,\n  CarouselContent,\n  CarouselItem,\n  CarouselScrollbar,\n} from '@/vibes/soul/primitives/carousel';\nimport {\n  CardProduct,\n  ProductCard,\n  ProductCardSkeleton,\n} from '@/vibes/soul/primitives/product-card';\n\nexport type CarouselProduct = CardProduct;\n\ninterface Props {\n  products: Streamable<CarouselProduct[]>;\n  className?: string;\n  colorScheme?: 'light' | 'dark';\n  aspectRatio?: '5:6' | '3:4' | '1:1';\n  emptyStateTitle?: Streamable<string | null>;\n  emptyStateSubtitle?: Streamable<string | null>;\n  scrollbarLabel?: string;\n  previousLabel?: string;\n  nextLabel?: string;\n  placeholderCount?: number;\n  showButtons?: boolean;\n  showScrollbar?: boolean;\n}\n\nexport function ProductsCarousel({\n  products: streamableProducts,\n  className,\n  colorScheme = 'light',\n  aspectRatio = '5:6',\n  emptyStateTitle,\n  emptyStateSubtitle,\n  scrollbarLabel,\n  previousLabel,\n  nextLabel,\n  placeholderCount = 8,\n  showButtons = true,\n  showScrollbar = true,\n}: Props) {\n  return (\n    <Stream\n      fallback={<ProductsCarouselSkeleton pending placeholderCount={placeholderCount} />}\n      value={streamableProducts}\n    >\n      {(products) => {\n        if (products.length === 0) {\n          return (\n            <ProductsCarouselEmptyState\n              emptyStateSubtitle={emptyStateSubtitle}\n              emptyStateTitle={emptyStateTitle}\n              placeholderCount={placeholderCount}\n            />\n          );\n        }\n\n        return (\n          <Carousel className={className}>\n            <CarouselContent className=\"mb-10\">\n              {products.map((product) => (\n                <CarouselItem\n                  className=\"basis-[calc(100%-1rem)] @md:basis-[calc(50%-0.75rem)] @lg:basis-[calc(33%-0.5rem)] @2xl:basis-[calc(25%-0.25rem)]\"\n                  key={product.id}\n                >\n                  <ProductCard\n                    aspectRatio={aspectRatio}\n                    colorScheme={colorScheme}\n                    product={product}\n                  />\n                </CarouselItem>\n              ))}\n            </CarouselContent>\n            {(showButtons || showScrollbar) && (\n              <div className=\"mt-10 flex w-full items-center justify-between gap-8\">\n                <CarouselScrollbar\n                  className={clsx(!showScrollbar && 'pointer-events-none invisible')}\n                  colorScheme={colorScheme}\n                  label={scrollbarLabel}\n                />\n                <CarouselButtons\n                  className={clsx(!showButtons && 'pointer-events-none invisible')}\n                  colorScheme={colorScheme}\n                  nextLabel={nextLabel}\n                  previousLabel={previousLabel}\n                />\n              </div>\n            )}\n          </Carousel>\n        );\n      }}\n    </Stream>\n  );\n}\n\nexport function ProductsCarouselSkeleton({\n  className,\n  placeholderCount = 8,\n  pending = false,\n}: {\n  className?: string;\n  placeholderCount?: number;\n  pending?: boolean;\n}) {\n  return (\n    <Carousel className={className} data-pending={pending ? '' : undefined}>\n      <CarouselContent className=\"mb-10\">\n        {Array.from({ length: placeholderCount }).map((_, index) => (\n          <CarouselItem\n            className=\"basis-full @md:basis-1/2 @lg:basis-1/3 @2xl:basis-1/4\"\n            key={index}\n          >\n            <ProductCardSkeleton />\n          </CarouselItem>\n        ))}\n      </CarouselContent>\n      <div className=\"h-6 w-56 animate-pulse bg-contrast-100\" />\n    </Carousel>\n  );\n}\n\nexport function ProductsCarouselEmptyState({\n  className,\n  placeholderCount = 8,\n  emptyStateTitle,\n  emptyStateSubtitle,\n}: {\n  className?: string;\n  placeholderCount?: number;\n  emptyStateTitle?: Streamable<string | null>;\n  emptyStateSubtitle?: Streamable<string | null>;\n}) {\n  return (\n    <Carousel className={clsx('relative', className)}>\n      <CarouselContent\n        className={clsx('mb-10 [mask-image:linear-gradient(to_bottom,_black_0%,_transparent_90%)]')}\n      >\n        {Array.from({ length: placeholderCount }).map((_, index) => (\n          <CarouselItem\n            className=\"basis-full @md:basis-1/2 @lg:basis-1/3 @2xl:basis-1/4\"\n            key={index}\n          >\n            <ProductCardSkeleton />\n          </CarouselItem>\n        ))}\n      </CarouselContent>\n      <div className=\"absolute inset-0 mx-auto px-3 py-16 pb-3 @4xl:px-10 @4xl:pb-10 @4xl:pt-28\">\n        <div className=\"mx-auto max-w-xl space-y-2 text-center @4xl:space-y-3\">\n          <h3 className=\"@4x:leading-none font-heading text-2xl leading-tight text-foreground @4xl:text-4xl\">\n            {emptyStateTitle}\n          </h3>\n          <p className=\"text-sm text-contrast-500 @4xl:text-lg\">{emptyStateSubtitle}</p>\n        </div>\n      </div>\n    </Carousel>\n  );\n}\n"
      },
      "componentType": "primitive"
    },
    {
      "name": "products-list",
      "dependencies": [
        "product-card"
      ],
      "registryDependencies": [],
      "files": [
        "primitives/products-list/index.tsx"
      ],
      "doc": "---\ntitle: Product List\npreview:\n  Electric: products-list-electric-example\n  Warm: products-list-warm-example\n  Luxury: products-list-luxury-example\npreviewSize: lg\nfeatures:\n  - Displays a list of products\n  - Displays skeleton loading state for async data\n---\n\n## Usage\n\nImport the component.\n\n<CodeBlock lang=\"bash\">{`import { ProductsList } from '@/vibes/soul/primitives/products-list'`}</CodeBlock>\n\nQuery the product data.\n\n<CodeBlock lang=\"bash\">{`const products = await getProducts()`}</CodeBlock>\n\nDisplay the component.\n\n<CodeBlock lang=\"bash\">{`<ProductsList products={products} />`}</CodeBlock>\n\n### Streaming\n\nThe `products` property accepts either `Product[]` or `Promise<Product[]>`. By passing a `Promise<Product[]>`, you enable streaming which will show a loading state until the data is finished loading and streamed to the browser.\n\n<Preview\n  vibeSlug=\"soul\"\n  componentName={{\n    Electric: 'products-list-section-loading-electric-example',\n    Warm: 'products-list-section-loading-warm-example',\n    Luxury: 'products-list-section-loading-luxury-example',\n  }}\n/>\n\n## API Reference\n\n### `ProductsList`\n\n| Prop                | Type                                                                                                                         | Default |\n| ------------------- | ---------------------------------------------------------------------------------------------------------------------------- | ------- |\n| `products`          | [`Product`](/docs/soul/product-card#product)`[]` &nbsp;\\| &nbsp;`Promise<`[`Product>`](/docs/soul/product-card#product)`[]>` |         |\n| `className`         | `string`                                                                                                                     |         |\n| `showCompare?`      | `boolean`                                                                                                                    | `false` |\n| `compareProducts?`  | [`Product`](/docs/soul/product-card#product)`[]` &nbsp;\\|&nbsp; `Promise<`[`Product`](/docs/soul/product-card#product)`[]>`  |         |\n| `compareLabel?`     | `string`                                                                                                                     |         |\n| `compareParamName?` | `string`                                                                                                                     |         |\n\n## Figma\n\n<Figma url=\"https://www.figma.com/design/kgCf8OkDCe90wBSKNNqueL/Soul-Vibe?node-id=3021-67477&t=AsLeJWIgmBOsgk51-1\" />\n",
      "docFile": "/dev/vibes/soul/docs/products-list.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/products-list/index.tsx",
      "componentName": "ProductsList",
      "source": {
        "primitives/products-list/compare-drawer.tsx": "'use client';\n\nimport { ArrowRight, X } from 'lucide-react';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { parseAsArrayOf, parseAsString, useQueryState } from 'nuqs';\nimport { startTransition } from 'react';\n\nimport { Button } from '@/vibes/soul/primitives/button';\nimport { Drawer } from '@/vibes/soul/primitives/drawer';\n\nfunction getInitials(name: string): string {\n  return name\n    .split(' ')\n    .map((word) => word[0])\n    .join('')\n    .toUpperCase()\n    .slice(0, 2);\n}\n\ninterface DrawerItem {\n  id: string;\n  image?: { src: string; alt: string };\n  href: string;\n  title: string;\n}\n\ninterface Props {\n  items: DrawerItem[];\n  paramName?: string;\n  action?: React.ComponentProps<'form'>['action'];\n  submitLabel?: string;\n}\n\nexport function CompareDrawer({\n  items,\n  paramName = 'compare',\n  action,\n  submitLabel = 'Compare',\n}: Props) {\n  const [, setParam] = useQueryState(\n    paramName,\n    parseAsArrayOf(parseAsString).withOptions({ shallow: false, scroll: false }),\n  );\n\n  return (\n    items.length > 0 && (\n      <Drawer>\n        <form\n          action={action}\n          className=\"mx-auto flex w-full max-w-7xl flex-col items-start justify-end gap-x-3 gap-y-4 @md:flex-row\"\n        >\n          <div className=\"flex flex-1 flex-wrap justify-end gap-4\">\n            {items.map((item) => (\n              <div className=\"relative\" key={item.id}>\n                <input key={item.id} name={paramName} type=\"hidden\" value={item.id} />\n                <Link\n                  className=\"group relative flex max-w-56 items-center whitespace-nowrap rounded-xl border border-contrast-100 bg-background font-semibold ring-primary transition-all duration-150 hover:bg-contrast-100 focus:outline-0 focus:ring-2\"\n                  href={item.href}\n                >\n                  <div className=\"bg-primary-highlight/10 relative aspect-square w-12 shrink-0\">\n                    {item.image?.src != null ? (\n                      <Image\n                        alt={item.image.alt}\n                        className=\"rounded-lg object-cover @4xl:rounded-r-none\"\n                        fill\n                        src={item.image.src}\n                      />\n                    ) : (\n                      <span className=\"max-w-full break-all p-1 text-xs text-primary-shadow opacity-20\">\n                        {getInitials(item.title)}\n                      </span>\n                    )}\n                  </div>\n                  <span className=\"hidden truncate pl-3 pr-5 text-foreground @4xl:block\">\n                    {item.title}\n                  </span>\n                </Link>\n\n                <button\n                  aria-label={`Remove ${item.title}`}\n                  className=\"absolute -right-2.5 -top-2.5 flex h-7 w-7 items-center justify-center rounded-full border border-contrast-100 bg-background text-contrast-400 transition-colors duration-150 hover:border-contrast-200 hover:bg-contrast-100 hover:text-foreground\"\n                  onClick={() => {\n                    startTransition(async () => {\n                      await setParam((prev) => {\n                        const next = prev?.filter((v) => v !== item.id) ?? [];\n\n                        return next.length > 0 ? next : null;\n                      });\n                    });\n                  }}\n                  type=\"button\"\n                >\n                  <X absoluteStrokeWidth size={16} strokeWidth={1.5} />\n                </button>\n              </div>\n            ))}\n          </div>\n\n          <Button className=\"hidden @md:block\" size=\"medium\" type=\"submit\" variant=\"primary\">\n            {submitLabel} <ArrowRight absoluteStrokeWidth size={20} strokeWidth={1} />\n          </Button>\n\n          <Button className=\"w-full @md:hidden\" size=\"small\" type=\"submit\" variant=\"primary\">\n            {submitLabel} <ArrowRight absoluteStrokeWidth size={16} strokeWidth={1} />\n          </Button>\n        </form>\n      </Drawer>\n    )\n  );\n}\n",
        "primitives/products-list/index.tsx": "import { clsx } from 'clsx';\n\nimport { Stream, Streamable } from '@/vibes/soul/lib/streamable';\nimport {\n  CardProduct,\n  ProductCard,\n  ProductCardSkeleton,\n} from '@/vibes/soul/primitives/product-card';\n\nimport { CompareDrawer } from './compare-drawer';\n\nexport type ListProduct = CardProduct;\n\ninterface Props {\n  products: Streamable<ListProduct[]>;\n  compareProducts?: Streamable<ListProduct[] | null>;\n  className?: string;\n  colorScheme?: 'light' | 'dark';\n  aspectRatio?: '5:6' | '3:4' | '1:1';\n  showCompare?: boolean;\n  compareAction?: React.ComponentProps<'form'>['action'];\n  compareLabel?: string;\n  compareParamName?: string;\n  emptyStateTitle?: Streamable<string | null>;\n  emptyStateSubtitle?: Streamable<string | null>;\n  placeholderCount?: number;\n}\n\nexport function ProductsList({\n  products: streamableProducts,\n  className,\n  colorScheme,\n  aspectRatio,\n  showCompare,\n  compareAction,\n  compareProducts: streamableCompareProducts,\n  compareLabel,\n  compareParamName,\n  emptyStateTitle,\n  emptyStateSubtitle,\n  placeholderCount = 6,\n}: Props) {\n  return (\n    <>\n      <Stream\n        fallback={<ProductsListSkeleton pending placeholderCount={placeholderCount} />}\n        value={streamableProducts}\n      >\n        {(products) => {\n          if (products.length === 0) {\n            return (\n              <ProductsListEmptyState\n                emptyStateSubtitle={emptyStateSubtitle}\n                emptyStateTitle={emptyStateTitle}\n                placeholderCount={placeholderCount}\n              />\n            );\n          }\n\n          return (\n            <div className={clsx('w-full @container', className)}>\n              <div className=\"mx-auto grid grid-cols-1 gap-x-4 gap-y-6 @sm:grid-cols-2 @2xl:grid-cols-3 @2xl:gap-x-5 @2xl:gap-y-8 @5xl:grid-cols-4 @7xl:grid-cols-5\">\n                {products.map((product) => (\n                  <ProductCard\n                    aspectRatio={aspectRatio}\n                    colorScheme={colorScheme}\n                    compareLabel={compareLabel}\n                    compareParamName={compareParamName}\n                    key={product.id}\n                    product={product}\n                    showCompare={showCompare}\n                  />\n                ))}\n              </div>\n            </div>\n          );\n        }}\n      </Stream>\n      <Stream value={streamableCompareProducts}>\n        {(compareProducts) =>\n          compareProducts && (\n            <CompareDrawer\n              action={compareAction}\n              items={compareProducts}\n              paramName={compareParamName}\n              submitLabel={compareLabel}\n            />\n          )\n        }\n      </Stream>\n    </>\n  );\n}\n\nexport function ProductsListSkeleton({\n  className,\n  placeholderCount = 6,\n  pending = false,\n}: {\n  className?: string;\n  placeholderCount?: number;\n  pending?: boolean;\n}) {\n  return (\n    <div className={clsx('w-full @container', className)} data-pending={pending ? '' : undefined}>\n      <div className=\"mx-auto grid grid-cols-1 gap-x-4 gap-y-6 @sm:grid-cols-2 @2xl:grid-cols-3 @2xl:gap-x-5 @2xl:gap-y-8 @5xl:grid-cols-4 @7xl:grid-cols-5\">\n        {Array.from({ length: placeholderCount }).map((_, index) => (\n          <ProductCardSkeleton key={index} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport function ProductsListEmptyState({\n  className,\n  placeholderCount = 6,\n  emptyStateTitle,\n  emptyStateSubtitle,\n}: {\n  className?: string;\n  placeholderCount?: number;\n  emptyStateTitle?: Streamable<string | null>;\n  emptyStateSubtitle?: Streamable<string | null>;\n}) {\n  return (\n    <div className={clsx('relative w-full @container', className)}>\n      <div\n        className={clsx(\n          'mx-auto grid grid-cols-1 gap-x-4 gap-y-6 [mask-image:linear-gradient(to_bottom,_black_0%,_transparent_90%)] @sm:grid-cols-2 @2xl:grid-cols-3 @2xl:gap-x-5 @2xl:gap-y-8 @5xl:grid-cols-4 @7xl:grid-cols-5',\n        )}\n      >\n        {Array.from({ length: placeholderCount }).map((_, index) => (\n          <ProductCardSkeleton key={index} />\n        ))}\n      </div>\n      <div className=\"absolute inset-0 mx-auto px-3 py-16 pb-3 @4xl:px-10 @4xl:pb-10 @4xl:pt-28\">\n        <div className=\"mx-auto max-w-xl space-y-2 text-center @4xl:space-y-3\">\n          <h3 className=\"@4x:leading-none font-heading text-2xl leading-tight text-foreground @4xl:text-4xl\">\n            {emptyStateTitle}\n          </h3>\n          <p className=\"text-sm text-contrast-500 @4xl:text-lg\">{emptyStateSubtitle}</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n"
      },
      "componentType": "primitive"
    },
    {
      "name": "rating",
      "dependencies": [],
      "registryDependencies": [],
      "files": [
        "primitives/rating/index.tsx"
      ],
      "doc": "---\ntitle: Rating\npreview: rating-example\npreviewSize: xs\n---\n",
      "docFile": "/dev/vibes/soul/docs/rating.mdx",
      "example": "import { Rating } from '@/vibes/soul/primitives/rating';\n\nexport default function Preview() {\n  return (\n    <div className=\"flex h-screen items-center justify-center\">\n      <Rating rating={4.5} />\n    </div>\n  );\n}\n",
      "exampleFile": "/src/vibes/soul/examples/primitives/rating/index.tsx",
      "componentName": "Rating",
      "source": {
        "primitives/rating/index.tsx": "import { clsx } from 'clsx';\n\nexport interface Props {\n  showRating?: boolean;\n  rating: number;\n  className?: string;\n}\n\ninterface StarType {\n  type: 'empty' | 'half' | 'full';\n}\n\nconst Star = ({ type }: StarType) => {\n  const paths = {\n    empty: (\n      <path\n        d=\"M9.99984 1.66669L12.5748 6.88335L18.3332 7.72502L14.1665 11.7834L15.1498 17.5167L9.99984 14.8084L4.84984 17.5167L5.83317 11.7834L1.6665 7.72502L7.42484 6.88335L9.99984 1.66669Z\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeOpacity=\"0.4\"\n      />\n    ),\n    half: (\n      <>\n        <path\n          d=\"M9.99984 1.66669L12.5748 6.88335L18.3332 7.72502L14.1665 11.7834L15.1498 17.5167L9.99984 14.8084L4.84984 17.5167L5.83317 11.7834L1.6665 7.72502L7.42484 6.88335L9.99984 1.66669Z\"\n          stroke=\"currentColor\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M10.0003 1.6665V14.8082L4.85033 17.5165L5.83366 11.7832L1.66699 7.72484L7.42533 6.88317L10.0003 1.6665Z\"\n          fill=\"currentColor\"\n        />\n      </>\n    ),\n    full: (\n      <path\n        d=\"M9.99984 1.66669L12.5748 6.88335L18.3332 7.72502L14.1665 11.7834L15.1498 17.5167L9.99984 14.8084L4.84984 17.5167L5.83317 11.7834L1.6665 7.72502L7.42484 6.88335L9.99984 1.66669Z\"\n        fill=\"currentColor\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    ),\n  };\n\n  return (\n    <svg\n      className=\"inline-block text-foreground\"\n      fill=\"none\"\n      height={20}\n      viewBox=\"0 0 20 20\"\n      width={20}\n    >\n      {paths[type]}\n    </svg>\n  );\n};\n\nexport const Rating = function Rating({ showRating = true, rating, className }: Readonly<Props>) {\n  const adjustedRating = Math.min(rating, 5);\n\n  const stars: Array<StarType['type']> = Array.from({ length: 5 }, (_, index) => {\n    if (index < Math.floor(adjustedRating)) return 'full';\n    if (index < Math.ceil(adjustedRating)) return 'half';\n    return 'empty';\n  });\n\n  return (\n    <div className={clsx('flex items-center', className)}>\n      {stars.map((type, index) => (\n        <Star key={index} type={type} />\n      ))}\n\n      {showRating && (\n        <span className=\"ml-1.5 flex h-6 min-w-6 shrink-0 items-center justify-center rounded-full border border-contrast-100 px-1 text-xs font-medium text-contrast-400\">\n          {adjustedRating % 1 !== 0 ? adjustedRating.toFixed(1) : adjustedRating}\n        </span>\n      )}\n    </div>\n  );\n};\n"
      },
      "componentType": "primitive"
    },
    {
      "name": "spinner",
      "dependencies": [],
      "registryDependencies": [
        "clsx"
      ],
      "files": [
        "primitives/spinner/index.tsx"
      ],
      "doc": "---\ntitle: Spinner\npreview: spinner-example\npreviewSize: xs\n---\n",
      "docFile": "/dev/vibes/soul/docs/spinner.mdx",
      "example": "import { Spinner } from '@/vibes/soul/primitives/spinner';\n\nexport default function Preview() {\n  return (\n    <div className=\"flex h-screen items-center justify-center gap-10\">\n      <Spinner size=\"sm\" />\n      <Spinner size=\"md\" />\n      <Spinner size=\"lg\" />\n    </div>\n  );\n}\n",
      "exampleFile": "/src/vibes/soul/examples/primitives/spinner/index.tsx",
      "componentName": "Spinner",
      "source": {
        "primitives/spinner/index.tsx": "import { clsx } from 'clsx';\n\ninterface Props {\n  size?: 'xs' | 'sm' | 'md' | 'lg';\n  loadingAriaLabel?: string;\n}\n\nexport const Spinner = function Spinner({ size = 'sm', loadingAriaLabel }: Props) {\n  return (\n    <span\n      aria-label={loadingAriaLabel ?? 'Loading...'}\n      className={clsx(\n        'box-border inline-block animate-spin rounded-full border-contrast-100 border-b-primary-shadow',\n        {\n          xs: 'h-5 w-5 border-2',\n          sm: 'h-6 w-6 border-2',\n          md: 'h-10 w-10 border-[3px]',\n          lg: 'h-14 w-14 border-4',\n        }[size],\n      )}\n      role=\"status\"\n    />\n  );\n};\n"
      },
      "componentType": "primitive"
    },
    {
      "name": "textarea",
      "dependencies": [],
      "registryDependencies": [
        "clsx"
      ],
      "files": [
        "primitives/textarea/index.tsx"
      ],
      "doc": "---\ntitle: Text Area\npreview: textarea-example\npreviewSize: xs\n---\n",
      "docFile": "/dev/vibes/soul/docs/textarea.mdx",
      "example": "import { TextArea } from '@/vibes/soul/primitives/textarea';\n\nexport default function Preview() {\n  return (\n    <div className=\"mx-auto max-w-2xl p-10\">\n      <TextArea label=\"Order Comments\" placeholder=\"Please add custom requests here.\" />\n    </div>\n  );\n}\n",
      "exampleFile": "/src/vibes/soul/examples/primitives/textarea/index.tsx",
      "componentName": "Textarea",
      "source": {
        "primitives/textarea/index.tsx": "'use client';\n\nimport { clsx } from 'clsx';\nimport { ComponentPropsWithRef, forwardRef, Ref } from 'react';\n\nimport { Label } from '@/vibes/soul/primitives/label';\n\nexport interface Props extends ComponentPropsWithRef<'textarea'> {\n  label?: string;\n  className?: string;\n}\n\nexport const TextArea = forwardRef(function TextArea(\n  { label, className, required, ...rest }: Props,\n  ref: Ref<HTMLTextAreaElement>,\n) {\n  return (\n    <div className={clsx('w-full', className)}>\n      <div className=\"flex items-center justify-between\">\n        {label != null && label !== '' && (\n          <Label className=\"mb-2 block text-foreground\">{label}</Label>\n        )}\n        {required === true && <span className=\"text-xs text-contrast-300\">Required</span>}\n      </div>\n      <div className=\"relative overflow-hidden rounded-lg border border-contrast-100 bg-background transition-colors duration-200 focus-within:border-foreground focus:outline-none\">\n        <textarea\n          ref={ref}\n          {...rest}\n          className={clsx(\n            'placeholder-contrast-gray-500 w-full bg-transparent p-3 text-foreground placeholder:font-normal focus:outline-none',\n          )}\n        />\n      </div>\n    </div>\n  );\n});\n"
      },
      "componentType": "primitive"
    },
    {
      "name": "account-layout",
      "dependencies": [],
      "registryDependencies": [
        "clsx"
      ],
      "files": [
        "sections/account-layout/index.tsx"
      ],
      "doc": "---\ntitle: Account Layout\npreview: account-layout-example\npreviewSize: lg\n---\n",
      "docFile": "/dev/vibes/soul/docs/account-layout.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/account-layout/index.tsx",
      "componentName": "AccountLayout",
      "source": {
        "sections/account-layout/account-layout-link-select.tsx": "'use client';\n\nimport { usePathname, useRouter } from 'next/navigation';\n\nimport { Select } from '@/vibes/soul/form/select';\n\nexport function AccountLayoutLinkSelect({\n  links,\n}: {\n  links: Array<{ href: string; label: string }>;\n}) {\n  const pathname = usePathname();\n  const router = useRouter();\n\n  return (\n    <Select\n      name=\"account-layout-link-select\"\n      onValueChange={(value) => {\n        router.push(value);\n      }}\n      options={links.map((link) => ({ value: link.href, label: link.label }))}\n      value={pathname}\n    />\n  );\n}\n",
        "sections/account-layout/account-layout-link.tsx": "'use client';\n\nimport { clsx } from 'clsx';\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\nimport React from 'react';\n\nexport function AccountLayoutLink({\n  className,\n  href,\n  ...rest\n}: React.ComponentPropsWithoutRef<typeof Link>) {\n  const pathname = usePathname();\n  const linkPathname = typeof href === 'string' ? href : (href.pathname ?? null);\n\n  return (\n    <Link\n      {...rest}\n      className={clsx(\n        'flex min-h-10 items-center rounded-md px-3 text-sm font-semibold',\n        linkPathname !== null && pathname.includes(linkPathname)\n          ? 'bg-contrast-100'\n          : 'hover:bg-contrast-100',\n        className,\n      )}\n      href={href}\n    />\n  );\n}\n",
        "sections/account-layout/index.tsx": "import { ReactNode } from 'react';\n\nimport { StickySidebarLayout } from '@/vibes/soul/sections/sticky-sidebar-layout';\n\nimport { AccountLayoutLink } from './account-layout-link';\nimport { AccountLayoutLinkSelect } from './account-layout-link-select';\n\ninterface Props {\n  links: Array<{\n    href: string;\n    label: string;\n  }>;\n  children: ReactNode;\n}\n\nexport function AccountLayout({ links, children }: Props) {\n  return (\n    <StickySidebarLayout\n      sidebar={\n        <nav>\n          <ul className=\"hidden @2xl:block\">\n            {links.map((link, index) => (\n              <li key={index}>\n                <AccountLayoutLink href={link.href}>{link.label}</AccountLayoutLink>\n              </li>\n            ))}\n          </ul>\n          <div className=\"@2xl:hidden\">\n            <AccountLayoutLinkSelect links={links} />\n          </div>\n        </nav>\n      }\n      sidebarSize=\"small\"\n    >\n      {children}\n    </StickySidebarLayout>\n  );\n}\n"
      },
      "componentType": "section"
    },
    {
      "name": "account-settings-section",
      "dependencies": [],
      "registryDependencies": [
        "clsx"
      ],
      "files": [
        "sections/account-settings-section/index.tsx"
      ],
      "doc": "---\ntitle: Account Settings Section\npreview: account-settings-section-example\npreviewSize: lg\n---\n",
      "docFile": "/dev/vibes/soul/docs/account-settings-section.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/account-settings-section/index.tsx",
      "componentName": "AccountSettingsSection",
      "source": {
        "sections/account-settings-section/change-password-form.tsx": "'use client';\n\nimport { getFormProps, getInputProps, SubmissionResult, useForm } from '@conform-to/react';\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod';\nimport { useActionState, useEffect } from 'react';\nimport { useFormStatus } from 'react-dom';\n\nimport { Input } from '@/vibes/soul/form/input';\nimport { Button } from '@/vibes/soul/primitives/button';\n\nimport { changePasswordSchema } from './schema';\n\ntype Action<State, Payload> = (state: Awaited<State>, payload: Payload) => State | Promise<State>;\n\nexport type ChangePasswordAction = Action<SubmissionResult | null, FormData>;\n\ninterface Props {\n  action: ChangePasswordAction;\n  currentPasswordLabel?: string;\n  newPasswordLabel?: string;\n  confirmPasswordLabel?: string;\n  submitLabel?: string;\n}\n\nexport function ChangePasswordForm({\n  action,\n  currentPasswordLabel = 'Current password',\n  newPasswordLabel = 'New password',\n  confirmPasswordLabel = 'Confirm password',\n  submitLabel = 'Update',\n}: Props) {\n  const [lastResult, formAction] = useActionState(action, null);\n  const [form, fields] = useForm({\n    constraint: getZodConstraint(changePasswordSchema),\n    shouldValidate: 'onBlur',\n    shouldRevalidate: 'onInput',\n    onValidate({ formData }) {\n      return parseWithZod(formData, { schema: changePasswordSchema });\n    },\n  });\n\n  useEffect(() => {\n    if (lastResult?.error) {\n      console.log(lastResult.error);\n    }\n  }, [lastResult]);\n\n  return (\n    <form {...getFormProps(form)} action={formAction} className=\"space-y-5\">\n      <Input\n        {...getInputProps(fields.currentPassword, { type: 'password' })}\n        errors={fields.currentPassword.errors}\n        key={fields.currentPassword.id}\n        label={currentPasswordLabel}\n      />\n      <Input\n        {...getInputProps(fields.password, { type: 'password' })}\n        errors={fields.password.errors}\n        key={fields.password.id}\n        label={newPasswordLabel}\n      />\n      <Input\n        {...getInputProps(fields.confirmPassword, { type: 'password' })}\n        className=\"mb-6\"\n        errors={fields.confirmPassword.errors}\n        key={fields.confirmPassword.id}\n        label={confirmPasswordLabel}\n      />\n      <SubmitButton>{submitLabel}</SubmitButton>\n    </form>\n  );\n}\n\nfunction SubmitButton({ children }: { children: React.ReactNode }) {\n  const { pending } = useFormStatus();\n\n  return (\n    <Button loading={pending} size=\"small\" type=\"submit\" variant=\"secondary\">\n      {children}\n    </Button>\n  );\n}\n",
        "sections/account-settings-section/index.tsx": "import { ChangePasswordAction, ChangePasswordForm } from './change-password-form';\nimport { Account, UpdateAccountAction, UpdateAccountForm } from './update-account-form';\n\ninterface Props {\n  title?: string;\n  account: Account;\n  updateAccountAction: UpdateAccountAction;\n  updateAccountSubmitLabel?: string;\n  changePasswordTitle?: string;\n  changePasswordAction: ChangePasswordAction;\n  changePasswordSubmitLabel?: string;\n}\n\nexport function AccountSettingsSection({\n  title = 'Account Settings',\n  account,\n  updateAccountAction,\n  updateAccountSubmitLabel,\n  changePasswordTitle = 'Change Password',\n  changePasswordAction,\n  changePasswordSubmitLabel,\n}: Props) {\n  return (\n    <div className=\"@container\">\n      <div className=\"flex flex-col gap-y-24 @xl:flex-row\">\n        <div className=\"flex w-full flex-col @xl:max-w-lg\">\n          <div className=\"pb-12\">\n            <h1 className=\"mb-10 text-4xl font-medium leading-none @xl:text-4xl\">{title}</h1>\n            <UpdateAccountForm\n              account={account}\n              action={updateAccountAction}\n              submitLabel={updateAccountSubmitLabel}\n            />\n          </div>\n          <div className=\"border-t border-contrast-100 pt-12\">\n            <h1 className=\"mb-10 text-2xl font-medium leading-none @xl:text-2xl\">\n              {changePasswordTitle}\n            </h1>\n            <ChangePasswordForm\n              action={changePasswordAction}\n              submitLabel={changePasswordSubmitLabel}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
        "sections/account-settings-section/schema.ts": "import { z } from 'zod';\n\nexport const updateAccountSchema = z.object({\n  firstName: z.string().min(2, { message: 'Name must be at least 2 characters long.' }).trim(),\n  lastName: z.string().min(2, { message: 'Name must be at least 2 characters long.' }).trim(),\n  email: z.string().email({ message: 'Please enter a valid email.' }).trim(),\n  company: z.string().trim().optional(),\n});\n\nexport const changePasswordSchema = z\n  .object({\n    currentPassword: z.string().trim(),\n    password: z\n      .string()\n      .min(8, { message: 'Be at least 8 characters long' })\n      .regex(/[a-zA-Z]/, { message: 'Contain at least one letter.' })\n      .regex(/[0-9]/, { message: 'Contain at least one number.' })\n      .regex(/[^a-zA-Z0-9]/, {\n        message: 'Contain at least one special character.',\n      })\n      .trim(),\n    confirmPassword: z.string(),\n  })\n  .superRefine(({ confirmPassword, password }, ctx) => {\n    if (confirmPassword !== password) {\n      ctx.addIssue({\n        code: 'custom',\n        message: 'The passwords did not match',\n        path: ['confirmPassword'],\n      });\n    }\n  });\n",
        "sections/account-settings-section/update-account-form.tsx": "'use client';\n\nimport { getFormProps, getInputProps, SubmissionResult, useForm } from '@conform-to/react';\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod';\nimport { useActionState, useEffect, useOptimistic, useTransition } from 'react';\nimport { z } from 'zod';\n\nimport { Input } from '@/vibes/soul/form/input';\nimport { Button } from '@/vibes/soul/primitives/button';\nimport { toast } from '@/vibes/soul/primitives/toaster';\n\nimport { updateAccountSchema } from './schema';\n\ntype Action<S, P> = (state: Awaited<S>, payload: P) => S | Promise<S>;\n\nexport type UpdateAccountAction = Action<State, FormData>;\n\nexport type Account = z.infer<typeof updateAccountSchema>;\n\ninterface State {\n  account: Account;\n  successMessage?: string;\n  lastResult: SubmissionResult | null;\n}\n\ninterface Props {\n  action: UpdateAccountAction;\n  account: Account;\n  firstNameLabel?: string;\n  lastNameLabel?: string;\n  emailLabel?: string;\n  companyLabel?: string;\n  submitLabel?: string;\n}\n\nexport function UpdateAccountForm({\n  action,\n  account,\n  firstNameLabel = 'First name',\n  lastNameLabel = 'Last name',\n  emailLabel = 'Email',\n  companyLabel = 'Company',\n  submitLabel = 'Update',\n}: Props) {\n  const [state, formAction] = useActionState(action, { account, lastResult: null });\n  const [pending, startTransition] = useTransition();\n\n  const [optimisticState, setOptimisticState] = useOptimistic<State, FormData>(\n    state,\n    (prevState, formData) => {\n      const intent = formData.get('intent');\n      const submission = parseWithZod(formData, { schema: updateAccountSchema });\n\n      if (submission.status !== 'success') return prevState;\n\n      switch (intent) {\n        case 'update': {\n          return {\n            ...prevState,\n            account: submission.value,\n          };\n        }\n\n        default:\n          return prevState;\n      }\n    },\n  );\n\n  const [form, fields] = useForm({\n    lastResult: state.lastResult,\n    defaultValue: optimisticState.account,\n    constraint: getZodConstraint(updateAccountSchema),\n    shouldValidate: 'onBlur',\n    shouldRevalidate: 'onInput',\n    onValidate({ formData }) {\n      return parseWithZod(formData, { schema: updateAccountSchema });\n    },\n  });\n\n  useEffect(() => {\n    if (state.lastResult?.status === 'success' && typeof state.successMessage === 'string') {\n      toast.success(state.successMessage);\n    }\n  }, [state]);\n\n  return (\n    <form\n      {...getFormProps(form)}\n      action={(formData) => {\n        startTransition(() => {\n          formAction(formData);\n          setOptimisticState(formData);\n        });\n      }}\n      className=\"space-y-5\"\n    >\n      <div className=\"flex gap-5\">\n        <Input\n          {...getInputProps(fields.firstName, { type: 'text' })}\n          errors={fields.firstName.errors}\n          key={fields.firstName.id}\n          label={firstNameLabel}\n        />\n        <Input\n          {...getInputProps(fields.lastName, { type: 'text' })}\n          errors={fields.lastName.errors}\n          key={fields.lastName.id}\n          label={lastNameLabel}\n        />\n      </div>\n      <Input\n        {...getInputProps(fields.email, { type: 'text' })}\n        errors={fields.email.errors}\n        key={fields.email.id}\n        label={emailLabel}\n      />\n      <Input\n        {...getInputProps(fields.company, { type: 'text' })}\n        errors={fields.company.errors}\n        key={fields.company.id}\n        label={companyLabel}\n      />\n      <Button\n        loading={pending}\n        name=\"intent\"\n        size=\"small\"\n        type=\"submit\"\n        value=\"update\"\n        variant=\"secondary\"\n      >\n        {submitLabel}\n      </Button>\n    </form>\n  );\n}\n"
      },
      "componentType": "section"
    },
    {
      "name": "address-list-section",
      "dependencies": [],
      "registryDependencies": [
        "clsx"
      ],
      "files": [
        "sections/address-list-section/index.tsx"
      ],
      "doc": "---\ntitle: Address List Section\npreview: address-list-section-example\npreviewSize: xl\n---\n",
      "docFile": "/dev/vibes/soul/docs/address-list-section.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/address-list-section/index.tsx",
      "componentName": "AddressListSection",
      "source": {
        "sections/address-list-section/index.tsx": "'use client';\n\nimport { getFormProps, getInputProps, SubmissionResult, useForm } from '@conform-to/react';\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod';\nimport { startTransition, useActionState, useEffect, useOptimistic, useState } from 'react';\nimport { useFormStatus } from 'react-dom';\nimport { z } from 'zod';\n\nimport { Input } from '@/vibes/soul/form/input';\nimport { Badge } from '@/vibes/soul/primitives/badge';\nimport { Button } from '@/vibes/soul/primitives/button';\nimport { Spinner } from '@/vibes/soul/primitives/spinner';\n\nimport { schema } from './schema';\n\nexport type Address = z.infer<typeof schema>;\n\nexport interface DefaultAddressConfiguration {\n  id: string | null;\n}\n\ntype Action<State, Payload> = (state: Awaited<State>, payload: Payload) => State | Promise<State>;\n\ninterface State<A extends Address> {\n  addresses: A[];\n  defaultAddress?: DefaultAddressConfiguration;\n  lastResult: SubmissionResult | null;\n}\n\ninterface Props<A extends Address> {\n  title?: string;\n  addresses: A[];\n  minimumAddressCount?: number;\n  defaultAddress?: DefaultAddressConfiguration;\n  addressAction: Action<State<A>, FormData>;\n  editLabel?: string;\n  deleteLabel?: string;\n  updateLabel?: string;\n  createLabel?: string;\n  showAddFormLabel?: string;\n  setDefaultLabel?: string;\n  cancelLabel?: string;\n  firstNameLabel?: string;\n  lastNameLabel?: string;\n  companyLabel?: string;\n  phoneLabel?: string;\n  addressLine1Label?: string;\n  addressLine2Label?: string;\n  addressLevel1Label?: string;\n  addressLevel2Label?: string;\n  countryLabel?: string;\n  postalCodeLabel?: string;\n}\n\nexport function AddressListSection<A extends Address>({\n  title = 'Addresses',\n  addresses,\n  minimumAddressCount = 1,\n  defaultAddress,\n  addressAction,\n  editLabel = 'Edit',\n  deleteLabel = 'Delete',\n  updateLabel = 'Update',\n  createLabel = 'Create',\n  cancelLabel = 'Cancel',\n  showAddFormLabel = 'Add address',\n  setDefaultLabel = 'Set as default',\n  firstNameLabel,\n  lastNameLabel,\n  companyLabel,\n  phoneLabel,\n  addressLine1Label,\n  addressLine2Label,\n  addressLevel1Label,\n  addressLevel2Label,\n  countryLabel,\n  postalCodeLabel,\n}: Props<A>) {\n  const [state, formAction] = useActionState(addressAction, {\n    addresses,\n    defaultAddress,\n    lastResult: null,\n  });\n\n  const [optimisticState, setOptimisticState] = useOptimistic<State<Address>, FormData>(\n    state,\n    (prevState, formData) => {\n      const intent = formData.get('intent');\n      const submission = parseWithZod(formData, { schema });\n\n      if (submission.status !== 'success') return prevState;\n\n      switch (intent) {\n        case 'create': {\n          const nextAddress = submission.value;\n\n          return {\n            ...prevState,\n            addresses: [...prevState.addresses, nextAddress],\n          };\n        }\n\n        case 'update': {\n          return {\n            ...prevState,\n            addresses: prevState.addresses.map((a) =>\n              a.id === submission.value.id ? submission.value : a,\n            ),\n          };\n        }\n\n        case 'delete': {\n          return {\n            ...prevState,\n            addresses: prevState.addresses.filter((a) => a.id !== submission.value.id),\n          };\n        }\n\n        case 'setDefault': {\n          return { ...prevState, defaultAddress: { id: submission.value.id } };\n        }\n\n        default:\n          return prevState;\n      }\n    },\n  );\n  const [activeAddressIds, setActiveAddressIds] = useState<string[]>([]);\n  const [showNewAddressForm, setShowNewAddressForm] = useState(false);\n\n  return (\n    <div>\n      <div className=\"flex items-center justify-between\">\n        <Title>{title}</Title>\n        {!showNewAddressForm && (\n          <Button onClick={() => setShowNewAddressForm(true)} size=\"small\">\n            {showAddFormLabel}\n          </Button>\n        )}\n      </div>\n      <div>\n        {showNewAddressForm && (\n          <div className=\"border-b border-contrast-200 pb-6 pt-5\">\n            <AddressForm\n              action={formAction}\n              address={{\n                id: 'new',\n                firstName: '',\n                lastName: '',\n                street1: '',\n                street2: '',\n                city: '',\n                state: '',\n                country: '',\n              }}\n              addressLevel1Label={addressLevel1Label}\n              addressLevel2Label={addressLevel2Label}\n              addressLine1Label={addressLine1Label}\n              addressLine2Label={addressLine2Label}\n              cancelLabel={cancelLabel}\n              companyLabel={companyLabel}\n              countryLabel={countryLabel}\n              firstNameLabel={firstNameLabel}\n              intent=\"create\"\n              lastNameLabel={lastNameLabel}\n              onCancel={() => setShowNewAddressForm(false)}\n              onSubmit={(formData) => {\n                setShowNewAddressForm(false);\n\n                startTransition(() => {\n                  formAction(formData);\n                  setOptimisticState(formData);\n                });\n              }}\n              phoneLabel={phoneLabel}\n              postalCodeLabel={postalCodeLabel}\n              submitLabel={createLabel}\n            />\n          </div>\n        )}\n        {optimisticState.addresses.map((address) => (\n          <div className=\"border-b border-contrast-200 pb-6 pt-5\" key={address.id}>\n            {activeAddressIds.includes(address.id) ? (\n              <AddressForm\n                action={formAction}\n                address={address}\n                addressLevel1Label={addressLevel1Label}\n                addressLevel2Label={addressLevel2Label}\n                addressLine1Label={addressLine1Label}\n                addressLine2Label={addressLine2Label}\n                cancelLabel={cancelLabel}\n                companyLabel={companyLabel}\n                countryLabel={countryLabel}\n                firstNameLabel={firstNameLabel}\n                intent=\"update\"\n                lastNameLabel={lastNameLabel}\n                onCancel={() =>\n                  setActiveAddressIds((prev) => prev.filter((id) => id !== address.id))\n                }\n                onSubmit={(formData) => {\n                  setActiveAddressIds((prev) => prev.filter((id) => id !== address.id));\n\n                  startTransition(() => {\n                    formAction(formData);\n                    setOptimisticState(formData);\n                  });\n                }}\n                phoneLabel={phoneLabel}\n                postalCodeLabel={postalCodeLabel}\n                submitLabel={updateLabel}\n              />\n            ) : (\n              <div className=\"space-y-4\">\n                <AddressPreview\n                  address={address}\n                  isDefault={\n                    optimisticState.defaultAddress\n                      ? optimisticState.defaultAddress.id === address.id\n                      : undefined\n                  }\n                />\n                <div className=\"flex gap-1\">\n                  <Button\n                    aria-label={`${editLabel}: ${address.firstName} ${address.lastName}`}\n                    onClick={() => setActiveAddressIds((prev) => [...prev, address.id])}\n                    size=\"small\"\n                    variant=\"tertiary\"\n                  >\n                    {editLabel}\n                  </Button>\n                  {optimisticState.addresses.length > minimumAddressCount && (\n                    <AddressActionButton\n                      action={formAction}\n                      address={address}\n                      aria-label={`${deleteLabel}: ${address.firstName} ${address.lastName}`}\n                      intent=\"delete\"\n                      onSubmit={(formData) => {\n                        startTransition(() => {\n                          formAction(formData);\n                          setOptimisticState(formData);\n                        });\n                      }}\n                    >\n                      {deleteLabel}\n                    </AddressActionButton>\n                  )}\n\n                  {optimisticState.defaultAddress &&\n                    optimisticState.defaultAddress.id !== address.id && (\n                      <AddressActionButton\n                        action={formAction}\n                        address={address}\n                        aria-label={`${setDefaultLabel}: ${address.firstName} ${address.lastName}`}\n                        intent=\"setDefault\"\n                        onSubmit={(formData) => {\n                          startTransition(() => {\n                            formAction(formData);\n                            setOptimisticState(formData);\n                          });\n                        }}\n                      >\n                        {setDefaultLabel}\n                      </AddressActionButton>\n                    )}\n                </div>\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nfunction Title({ children }: { children: React.ReactNode }) {\n  const { pending } = useFormStatus();\n\n  return (\n    <h1 className=\"text-4xl\">\n      {children}\n      {pending && (\n        <span className=\"ml-2\">\n          <Spinner />\n        </span>\n      )}\n    </h1>\n  );\n}\n\nfunction AddressPreview({ address, isDefault = false }: { address: Address; isDefault?: boolean }) {\n  return (\n    <div className=\"flex gap-10\">\n      <div className=\"text-sm\">\n        <p className=\"font-bold\">\n          {address.firstName} {address.lastName}\n        </p>\n        <p>{address.company}</p>\n        <p>{address.street1}</p>\n        <p>{address.street2}</p>\n        <p>\n          {address.city}, {address.state} {address.postalCode}\n        </p>\n        <p className=\"mb-3\">{address.country}</p>\n        <p>{address.phone}</p>\n      </div>\n      <div>{isDefault && <Badge>Default</Badge>}</div>\n    </div>\n  );\n}\n\nfunction AddressActionButton({\n  address,\n  intent,\n  action,\n  onSubmit,\n  ...rest\n}: {\n  address: Address;\n  intent: string;\n  action: (formData: FormData) => void;\n  onSubmit: (formData: FormData) => void;\n} & Omit<React.ComponentProps<'button'>, 'onSubmit'>) {\n  const [form, fields] = useForm({\n    defaultValue: address,\n    constraint: getZodConstraint(schema),\n    onValidate({ formData }) {\n      return parseWithZod(formData, { schema });\n    },\n    onSubmit(event, { submission, formData }) {\n      event.preventDefault();\n\n      if (submission?.status !== 'success') return;\n\n      onSubmit(formData);\n    },\n  });\n\n  return (\n    <form {...getFormProps(form)} action={action}>\n      <input {...getInputProps(fields.id, { type: 'hidden' })} key={fields.id.id} />\n      <input {...getInputProps(fields.firstName, { type: 'hidden' })} key={fields.firstName.id} />\n      <input {...getInputProps(fields.lastName, { type: 'hidden' })} key={fields.lastName.id} />\n      <input {...getInputProps(fields.company, { type: 'hidden' })} key={fields.company.id} />\n      <input {...getInputProps(fields.phone, { type: 'hidden' })} key={fields.phone.id} />\n      <input {...getInputProps(fields.street1, { type: 'hidden' })} key={fields.street1.id} />\n      <input {...getInputProps(fields.street2, { type: 'hidden' })} key={fields.street2.id} />\n      <input {...getInputProps(fields.city, { type: 'hidden' })} key={fields.city.id} />\n      <input {...getInputProps(fields.state, { type: 'hidden' })} key={fields.state.id} />\n      <input {...getInputProps(fields.postalCode, { type: 'hidden' })} key={fields.postalCode.id} />\n      <input {...getInputProps(fields.country, { type: 'hidden' })} key={fields.country.id} />\n      <Button\n        {...rest}\n        name=\"intent\"\n        size=\"small\"\n        type=\"submit\"\n        value={intent}\n        variant=\"tertiary\"\n      />\n    </form>\n  );\n}\n\nfunction AddressForm({\n  address,\n  lastResult,\n  onCancel,\n  action,\n  onSubmit,\n  intent,\n  cancelLabel = 'Cancel',\n  submitLabel = 'Submit',\n  firstNameLabel = 'First name',\n  lastNameLabel = 'Last name',\n  companyLabel = 'Company',\n  phoneLabel = 'Phone',\n  addressLine1Label = 'Address Line 1',\n  addressLine2Label = 'Address Line 1',\n  addressLevel1Label = 'State/Province',\n  addressLevel2Label = 'City/Town',\n  countryLabel = 'Country',\n  postalCodeLabel = 'Postal code',\n}: {\n  address: Address;\n  intent: string;\n  lastResult?: SubmissionResult | null;\n  cancelLabel?: string;\n  submitLabel?: string;\n  firstNameLabel?: string;\n  lastNameLabel?: string;\n  companyLabel?: string;\n  phoneLabel?: string;\n  addressLine1Label?: string;\n  addressLine2Label?: string;\n  addressLevel1Label?: string;\n  addressLevel2Label?: string;\n  countryLabel?: string;\n  postalCodeLabel?: string;\n  onCancel: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  action: (formData: FormData) => void;\n  onSubmit: (formData: FormData) => void;\n}) {\n  const [form, fields] = useForm({\n    lastResult,\n    defaultValue: address,\n    constraint: getZodConstraint(schema),\n    shouldValidate: 'onBlur',\n    shouldRevalidate: 'onInput',\n    onValidate({ formData }) {\n      return parseWithZod(formData, { schema });\n    },\n    onSubmit(event, { formData, submission }) {\n      event.preventDefault();\n\n      if (submission?.status !== 'success') return;\n\n      onSubmit(formData);\n    },\n  });\n\n  useEffect(() => {\n    if (lastResult?.error) console.log(lastResult.error);\n  }, [lastResult?.error]);\n\n  return (\n    <form {...getFormProps(form)} action={action} className=\"w-[480px] space-y-4\">\n      <input {...getInputProps(fields.id, { type: 'hidden' })} key={fields.id.id} />\n      <div className=\"flex gap-4\">\n        <Input\n          {...getInputProps(fields.firstName, { type: 'text' })}\n          autoComplete=\"off\"\n          data-1p-ignore\n          data-lpignore\n          errors={fields.firstName.errors}\n          key={fields.firstName.id}\n          label={firstNameLabel}\n        />\n        <Input\n          {...getInputProps(fields.lastName, { type: 'text' })}\n          autoComplete=\"off\"\n          data-1p-ignore\n          data-lpignore\n          errors={fields.lastName.errors}\n          key={fields.lastName.id}\n          label={lastNameLabel}\n        />\n      </div>\n\n      <Input\n        {...getInputProps(fields.company, { type: 'text' })}\n        autoComplete={`section-${address.id} company`}\n        errors={fields.company.errors}\n        key={fields.company.id}\n        label={companyLabel}\n      />\n      <Input\n        {...getInputProps(fields.phone, { type: 'tel' })}\n        autoComplete={`section-${address.id} phone`}\n        errors={fields.phone.errors}\n        key={fields.phone.id}\n        label={phoneLabel}\n      />\n      <Input\n        {...getInputProps(fields.street1, { type: 'text' })}\n        autoComplete={`section-${address.id} address-line1`}\n        errors={fields.street1.errors}\n        key={fields.street1.id}\n        label={addressLine1Label}\n      />\n      <Input\n        {...getInputProps(fields.street2, { type: 'text' })}\n        autoComplete={`section-${address.id} address-line2`}\n        errors={fields.street2.errors}\n        key={fields.street2.id}\n        label={addressLine2Label}\n      />\n      <div className=\"flex gap-4\">\n        <Input\n          {...getInputProps(fields.city, { type: 'text' })}\n          autoComplete={`section-${address.id} address-level2`}\n          errors={fields.city.errors}\n          key={fields.city.id}\n          label={addressLevel2Label}\n        />\n        <Input\n          {...getInputProps(fields.state, { type: 'text' })}\n          autoComplete={`section-${address.id} address-level1`}\n          errors={fields.state.errors}\n          key={fields.state.id}\n          label={addressLevel1Label}\n        />\n      </div>\n      <div className=\"flex gap-4\">\n        <Input\n          {...getInputProps(fields.postalCode, { type: 'text' })}\n          autoComplete={`section-${address.id} postal-code`}\n          errors={fields.postalCode.errors}\n          key={fields.postalCode.id}\n          label={postalCodeLabel}\n        />\n        <Input\n          {...getInputProps(fields.country, { type: 'text' })}\n          autoComplete={`section-${address.id} country`}\n          errors={fields.country.errors}\n          key={fields.country.id}\n          label={countryLabel}\n        />\n      </div>\n\n      <div className=\"flex gap-1\">\n        <Button\n          aria-label={`${cancelLabel} ${submitLabel} ${address.firstName} ${address.lastName}`}\n          onClick={onCancel}\n          size=\"small\"\n          variant=\"tertiary\"\n        >\n          {cancelLabel}\n        </Button>\n        <Button\n          aria-label={`${submitLabel} ${address.firstName} ${address.lastName}`}\n          name=\"intent\"\n          size=\"small\"\n          type=\"submit\"\n          value={intent}\n        >\n          {submitLabel}\n        </Button>\n      </div>\n    </form>\n  );\n}\n",
        "sections/address-list-section/schema.ts": "import { z } from 'zod';\n\nexport const schema = z.object({\n  id: z.string(),\n  firstName: z.string(),\n  lastName: z.string(),\n  company: z.string().optional(),\n  street1: z.string(),\n  street2: z.string().optional(),\n  city: z.string(),\n  state: z.string().optional(),\n  postalCode: z.string().optional(),\n  phone: z.string().optional(),\n  country: z.string(),\n});\n"
      },
      "componentType": "section"
    },
    {
      "name": "blog-post-list",
      "dependencies": [],
      "registryDependencies": [
        "clsx"
      ],
      "files": [
        "sections/blog-post-list/index.tsx"
      ],
      "doc": "---\ntitle: Blog Post List\ndescription: Blog Post List is used to display a list of blog post cards.\npreview: blog-post-list-example\npreviewSize: lg\n---\n\n## Usage\n\n<CodeBlock lang=\"bash\">{`import { BlogPostList } from '@/vibes/soul/sections/blog-post-list'`}</CodeBlock>\n\n<CodeBlock lang=\"bash\">{`<BlogPostList />`}</CodeBlock>\n\n## API Reference\n\n| Prop                                                                                       | Type                                                                           | Default      |\n| ------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------ | ------------ |\n| `type` <Tooltip content='This is an example tooltip for what this particular prop does'/>  | `enum` <Tooltip content={`\"single\" ${String.fromCharCode(124)} \"multiple\"`} /> | `\"multiple\"` |\n| `title` <Tooltip content='This is an example tooltip for what this particular prop does'/> | `string`                                                                       |              |\n| `body` <Tooltip content='This is an example tooltip for what this particular prop does'/>  | `string`                                                                       |              |\n\n## Figma\n\n<Figma url=\"https://www.figma.com/design/kgCf8OkDCe90wBSKNNqueL/Soul-Vibe?node-id=737-16279&t=dbm9GtAtS2A3vy2g-4\" />\n",
      "docFile": "/dev/vibes/soul/docs/blog-post-list.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/blog-post-list/index.tsx",
      "componentName": "BlogPostList",
      "source": {
        "sections/blog-post-list/index.tsx": "import { clsx } from 'clsx';\n\nimport { Stream, Streamable } from '@/vibes/soul/lib/streamable';\nimport {\n  BlogPost,\n  BlogPostCard,\n  BlogPostCardSkeleton,\n} from '@/vibes/soul/primitives/blog-post-card';\n\ninterface Props {\n  posts: Streamable<BlogPost[]>;\n  className?: string;\n}\n\nexport function BlogPostList({ posts: streamablePosts, className = '' }: Props) {\n  return (\n    <div className={clsx('@container', className)}>\n      <div className=\"mx-auto grid grid-cols-1 gap-x-5 gap-y-8 @md:grid-cols-2 @xl:gap-y-10 @3xl:grid-cols-3 @6xl:grid-cols-4\">\n        <Stream\n          fallback={Array.from({ length: 5 }).map((_, index) => (\n            <BlogPostCardSkeleton key={index} />\n          ))}\n          value={streamablePosts}\n        >\n          {(posts) => posts.map((post) => <BlogPostCard key={post.id} {...post} />)}\n        </Stream>\n      </div>\n    </div>\n  );\n}\n"
      },
      "componentType": "section",
      "description": "Blog Post List is used to display a list of blog post cards."
    },
    {
      "name": "cart",
      "dependencies": [
        "button",
        "counter"
      ],
      "registryDependencies": [
        "clsx"
      ],
      "files": [
        "sections/cart/index.tsx"
      ],
      "doc": "---\ntitle: Cart\ndescription: The Cart component displays the items in the user's cart, along with a summary of the total cost.\npreview:\n  Electric: cart-electric-example\n  Warm: cart-warm-example\n  Luxury: cart-luxury-example\npreviewSize: xl\nfeatures:\n  - Displays the items in the user's cart\n  - Displays a summary of the total cost\n  - Allows the user to remove items from the cart\n  - Allows the user to update the quantity of items in the cart\n---\n\n## Usage\n\n<CodeBlock lang=\"bash\">{`import { Cart } from '@/vibes/soul/sections/cart'`}</CodeBlock>\n\n<CodeBlock lang=\"bash\">{`const products = await getLineItems()\nconst subtotal = await getSubtotal()`}</CodeBlock>\n\n<CodeBlock lang=\"bash\">{`<Cart\n  title=\"Cart\"\n  lineItems={products}\n  summary={{\n    title: 'Summary',\n    caption: 'Shipping & taxes calculated at checkout',\n    subtotal: subtotal,\n    subtotalLabel: 'Subtotal',\n    shippingLabel: 'Shipping',\n    taxLabel: 'Tax',\n    tax: '$11.60',\n    grandTotalLabel: 'Total',\n    grandTotal: '$127.60',\n    ctaLabel: 'Checkout',\n  }}\n  emptyState={{\n    title: 'Your cart is empty',\n    subtitle: 'Add some products to get started.',\n    cta: {\n      label: 'Continue shopping',\n      href: '#',\n    },\n  }}\n  removeLineItemAction={removeLineItemAction}\n  updateLineItemQuantityAction={updateLineItemQuantityAction}\n  // redirectToCheckoutAction={}\n/>\n`}</CodeBlock>\n\n### Streaming\n\nNotice in the [API Reference](#api-reference) that some properties accept data (ex. `string` or `number`) or a `Promise`. By passing a `Promise`, you enable the component to stream data from the server as it's loaded.\n\nYou can view this in the following example where the `lineItems` and `summary.subtotal` properties are passed as Promises:\n\n<Preview\n  vibeSlug=\"soul\"\n  componentName={{\n    Electric: 'cart-loading-electric-example',\n    Warm: 'cart-loading-warm-example',\n    Luxury: 'cart-loading-luxury-example',\n  }}\n/>\n\n## API Reference\n\n### `Cart`\n\n| Prop                           | Type                                                                                                    | Default  |\n| ------------------------------ | ------------------------------------------------------------------------------------------------------- | -------- |\n| `title?`                       | `string`                                                                                                | `\"Cart\"` |\n| `lineItems`                    | [`CartLineItem`](#cartlineitem)`[]` &nbsp; \\| &nbsp; `Promise<`[`CartLineItem>`](#cartlineitem)`[]>`    |          |\n| `summary`                      | [`CartSummary`](#cartsummary)                                                                           |          |\n| `emptyState`                   | [`CartEmptyState`](#cartemptystate)                                                                     |          |\n| `removeLineItemAction`         | `function` <Tooltip content='(id: string) => Promise<void>' />                                          |          |\n| `updateLineItemQuantityAction` | `function` <Tooltip content='({ id, quantity } : { id: string; quantity: number }) => Promise<void>' /> |          |\n| `redirectToCheckoutAction`     | `function` <Tooltip content='() => Promise<void>' />                                                    |          |\n\n### `CartLineItem`\n\n<CodeBlock lang=\"ts\">\n  {`\ninterface CartLineItem {\n  id: string\n  image: Image\n  title: string\n  subtitle: string\n  quantity: number\n  price: string\n}\n`}\n</CodeBlock>\n\n### `CartSummary`\n\n<CodeBlock lang=\"ts\">{`interface CartSummary {\n  title?: string\n  caption?: string\n  subtotalLabel?: string\n  subtotal: string | Promise<string>\n  shippingLabel?: string\n  shipping?: string\n  taxLabel?: string\n  tax?: string | Promise<string>\n  grandTotalLabel?: string\n  grandTotal?: string | Promise<string>\n  ctaLabel?: string\n}\n`}\n\n</CodeBlock>\n### `CartEmptyState`\n\n<CodeBlock lang=\"ts\">\n  {`\ninterface CartEmptyState {\n    title: string\n    subtitle: string\n    cta: {\n        label: string\n        href: string\n    }\n  }\n`}\n</CodeBlock>\n\n## Figma\n\n<Figma url=\"https://www.figma.com/design/kgCf8OkDCe90wBSKNNqueL/Soul-Vibe?node-id=1720-21795&t=RzBeIql49iCnmSMw-4\" />\n",
      "docFile": "/dev/vibes/soul/docs/cart.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/cart/index.tsx",
      "componentName": "Cart",
      "source": {
        "sections/cart/index.tsx": "'use client';\n\nimport { getFormProps, getInputProps, SubmissionResult, useForm } from '@conform-to/react';\nimport { parseWithZod } from '@conform-to/zod';\nimport { clsx } from 'clsx';\nimport { ArrowRight, Minus, Plus, Trash2 } from 'lucide-react';\nimport Image from 'next/image';\nimport { startTransition, Suspense, use, useActionState, useEffect, useOptimistic } from 'react';\nimport { useFormStatus } from 'react-dom';\n\nimport { Button } from '@/vibes/soul/primitives/button';\nimport { ButtonLink } from '@/vibes/soul/primitives/button-link';\nimport { StickySidebarLayout } from '@/vibes/soul/sections/sticky-sidebar-layout';\n\nimport { cartLineItemActionFormDataSchema } from './schema';\n\ntype Action<State, Payload> = (state: Awaited<State>, payload: Payload) => State | Promise<State>;\n\nexport interface CartLineItem {\n  id: string;\n  image: { alt: string; src: string };\n  title: string;\n  subtitle: string;\n  quantity: number;\n  price: string;\n}\n\ninterface CartSummary {\n  title?: string;\n  caption?: string;\n  subtotalLabel?: string;\n  subtotal: string | Promise<string>;\n  shippingLabel?: string;\n  shipping?: string;\n  taxLabel?: string;\n  tax?: string | Promise<string>;\n  grandTotalLabel?: string;\n  grandTotal?: string | Promise<string>;\n  ctaLabel?: string;\n}\n\ninterface CartEmptyState {\n  title: string;\n  subtitle: string;\n  cta: {\n    label: string;\n    href: string;\n  };\n}\n\ninterface CartState<LineItem extends CartLineItem> {\n  lineItems: LineItem[];\n  lastResult: SubmissionResult | null;\n}\n\ninterface CartProps<LineItem extends CartLineItem> {\n  title?: string;\n  lineItems: LineItem[] | Promise<LineItem[]>;\n  summary: CartSummary;\n  emptyState: CartEmptyState;\n  lineItemAction: Action<CartState<LineItem>, FormData>;\n  checkoutAction: Action<SubmissionResult | null, FormData>;\n  deleteLineItemLabel?: string;\n  decrementLineItemLabel?: string;\n  incrementLineItemLabel?: string;\n}\n\nexport function Cart<LineItem extends CartLineItem>({\n  title = 'Cart',\n  lineItems,\n  lineItemAction,\n  checkoutAction,\n  summary,\n  emptyState,\n  deleteLineItemLabel,\n  decrementLineItemLabel,\n  incrementLineItemLabel,\n}: CartProps<LineItem>) {\n  return (\n    <Suspense fallback={<CartSkeleton title={title} />}>\n      <CartInner\n        checkoutAction={checkoutAction}\n        decrementLineItemLabel={decrementLineItemLabel}\n        deleteLineItemLabel={deleteLineItemLabel}\n        emptyState={emptyState}\n        incrementLineItemLabel={incrementLineItemLabel}\n        lineItemAction={lineItemAction}\n        lineItems={lineItems}\n        summary={summary}\n        title={title}\n      />\n    </Suspense>\n  );\n}\n\nfunction CartInner<LineItem extends CartLineItem>({\n  title,\n  lineItems,\n  summary = {\n    title: 'Summary',\n    subtotalLabel: 'Subtotal',\n    subtotal: '$0.00',\n    shippingLabel: 'Shipping',\n    shipping: '$0.00',\n    taxLabel: 'Tax',\n    tax: '$0.00',\n    grandTotalLabel: 'Grand Total',\n    grandTotal: '$0.00',\n  },\n  emptyState,\n  decrementLineItemLabel,\n  incrementLineItemLabel,\n  deleteLineItemLabel,\n  lineItemAction,\n  checkoutAction,\n}: CartProps<LineItem>) {\n  const resolvedLineItems = lineItems instanceof Promise ? use(lineItems) : lineItems;\n\n  const [state, formAction] = useActionState(lineItemAction, {\n    lineItems: resolvedLineItems,\n    lastResult: null,\n  });\n\n  const [optimisticLineItems, setOptimisticLineItems] = useOptimistic<CartLineItem[], FormData>(\n    state.lineItems,\n    (prevState, formData) => {\n      const submission = parseWithZod(formData, { schema: cartLineItemActionFormDataSchema });\n\n      if (submission.status !== 'success') return prevState;\n\n      switch (submission.value.intent) {\n        case 'increment': {\n          const { id } = submission.value;\n\n          return prevState.map((item) =>\n            item.id === id ? { ...item, quantity: item.quantity + 1 } : item,\n          );\n        }\n\n        case 'decrement': {\n          const { id } = submission.value;\n\n          return prevState.map((item) =>\n            item.id === id ? { ...item, quantity: item.quantity - 1 } : item,\n          );\n        }\n\n        case 'delete': {\n          const { id } = submission.value;\n\n          return prevState.filter((item) => item.id !== id);\n        }\n\n        default:\n          return prevState;\n      }\n    },\n  );\n\n  const optimisticQuantity = optimisticLineItems.reduce((total, item) => total + item.quantity, 0);\n\n  if (optimisticLineItems.length === 0) {\n    return <CartEmptyState {...emptyState} />;\n  }\n\n  return (\n    <StickySidebarLayout\n      sidebar={\n        <>\n          <h2 className=\"mb-10 font-heading text-4xl font-medium leading-none @xl:text-5xl\">\n            {summary.title}\n          </h2>\n          <table aria-label=\"Receipt Summary\" className=\"w-full\">\n            <caption className=\"sr-only\">{summary.caption}</caption>\n            <tbody>\n              <tr className=\"border-b border-contrast-100\">\n                <td>{summary.subtotalLabel}</td>\n                <td className=\"py-4 text-right\">{summary.subtotal}</td>\n              </tr>\n              {summary.shipping != null && summary.shipping !== '' && (\n                <tr className=\"border-b border-contrast-100\">\n                  <td>{summary.shippingLabel}</td>\n                  <td className=\"py-4 text-right\">{summary.shipping}</td>\n                </tr>\n              )}\n              {summary.tax != null && summary.tax !== '' && (\n                <tr>\n                  <td>{summary.taxLabel}</td>\n                  <td className=\"py-4 text-right\">{summary.tax}</td>\n                </tr>\n              )}\n            </tbody>\n\n            {summary.grandTotal != null && summary.grandTotal !== '' && (\n              <tfoot>\n                <tr className=\"text-xl\">\n                  <th className=\"text-left\" scope=\"row\">\n                    {summary.grandTotalLabel}\n                  </th>\n                  <td className=\"py-10 text-right\">{summary.grandTotal}</td>\n                </tr>\n              </tfoot>\n            )}\n          </table>\n          <CheckoutButton action={checkoutAction} className=\"mt-10 w-full\">\n            {summary.ctaLabel}\n            <ArrowRight size={20} strokeWidth={1} />\n          </CheckoutButton>\n        </>\n      }\n      sidebarPosition=\"after\"\n      sidebarSize=\"1/3\"\n    >\n      <div className=\"w-full\">\n        <h1 className=\"mb-10 font-heading text-4xl font-medium leading-none @xl:text-5xl\">\n          {title}\n          <span className=\"ml-4 text-contrast-200\">{optimisticQuantity}</span>\n        </h1>\n\n        {/* Cart Items */}\n        <ul className=\"flex flex-col gap-5 @container\">\n          {optimisticLineItems.map((lineItem) => (\n            <li\n              className=\"flex flex-col items-start gap-x-5 gap-y-6 @container @sm:flex-row @sm:gap-y-4\"\n              key={lineItem.id}\n            >\n              <div className=\"relative aspect-square w-full overflow-hidden rounded-xl bg-contrast-100 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-4 @sm:max-w-24 @md:max-w-36\">\n                <Image\n                  alt={lineItem.image.alt}\n                  className=\"object-cover\"\n                  fill\n                  sizes=\"(max-width: 400px) 100vw, 144px\"\n                  src={lineItem.image.src}\n                />\n              </div>\n              <div className=\"flex flex-grow flex-col flex-wrap justify-between gap-y-2 @xl:flex-row\">\n                <div className=\"flex w-full flex-1 flex-col @xl:w-1/2 @xl:pr-4\">\n                  <span className=\"font-medium\">{lineItem.title}</span>\n                  <span className=\"text-contrast-300\">{lineItem.subtitle}</span>\n                </div>\n                <CounterForm\n                  action={formAction}\n                  decrementLabel={decrementLineItemLabel}\n                  deleteLabel={deleteLineItemLabel}\n                  incrementLabel={incrementLineItemLabel}\n                  lineItem={lineItem}\n                  onSubmit={(formData) => {\n                    startTransition(() => {\n                      formAction(formData);\n                      setOptimisticLineItems(formData);\n                    });\n                  }}\n                />\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </StickySidebarLayout>\n  );\n}\n\nfunction CounterForm({\n  lineItem,\n  action,\n  onSubmit,\n  incrementLabel = 'Increase count',\n  decrementLabel = 'Decrease count',\n  deleteLabel = 'Remove item',\n}: {\n  lineItem: CartLineItem;\n  incrementLabel?: string;\n  decrementLabel?: string;\n  deleteLabel?: string;\n  action: (payload: FormData) => void;\n  onSubmit: (formData: FormData) => void;\n}) {\n  const [form, fields] = useForm({\n    defaultValue: { id: lineItem.id },\n    shouldValidate: 'onBlur',\n    shouldRevalidate: 'onInput',\n    onValidate({ formData }) {\n      return parseWithZod(formData, { schema: cartLineItemActionFormDataSchema });\n    },\n    onSubmit(event, { formData }) {\n      event.preventDefault();\n\n      onSubmit(formData);\n    },\n  });\n\n  return (\n    <form {...getFormProps(form)} action={action}>\n      <input {...getInputProps(fields.id, { type: 'hidden' })} key={fields.id.id} />\n      <div className=\"flex w-full flex-wrap items-center justify-between gap-x-5 gap-y-2 @sm:justify-start @xl:w-1/2 @xl:flex-nowrap\">\n        <span className=\"font-medium @xl:ml-auto\">{lineItem.price}</span>\n\n        {/* Counter */}\n        <div className=\"flex items-center rounded-lg border\">\n          <button\n            aria-label={decrementLabel}\n            className={clsx(\n              'group rounded-l-lg p-3 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary',\n              lineItem.quantity === 1 ? 'opacity-50' : 'hover:bg-contrast-100/50',\n            )}\n            disabled={lineItem.quantity === 1}\n            name=\"intent\"\n            type=\"submit\"\n            value=\"decrement\"\n          >\n            <Minus\n              className={clsx(\n                'text-contrast-300 transition-colors duration-300',\n                lineItem.quantity !== 1 && 'group-hover:text-foreground',\n              )}\n              size={18}\n              strokeWidth={1.5}\n            />\n          </button>\n          <span className=\"flex w-8 select-none justify-center focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary\">\n            {lineItem.quantity}\n          </span>\n          <button\n            aria-label={incrementLabel}\n            className={clsx(\n              'group rounded-r-lg p-3 transition-colors duration-300 hover:bg-contrast-100/50 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary',\n            )}\n            name=\"intent\"\n            type=\"submit\"\n            value=\"increment\"\n          >\n            <Plus\n              className=\"text-contrast-300 transition-colors duration-300 group-hover:text-foreground\"\n              size={18}\n              strokeWidth={1.5}\n            />\n          </button>\n        </div>\n\n        <button\n          aria-label={deleteLabel}\n          className=\"-ml-1 flex h-8 w-8 shrink-0 items-center justify-center rounded-full transition-colors duration-300 hover:bg-contrast-100 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-4\"\n          name=\"intent\"\n          type=\"submit\"\n          value=\"delete\"\n        >\n          <Trash2 size={20} strokeWidth={1} />\n        </button>\n      </div>\n    </form>\n  );\n}\n\nfunction CheckoutButton({\n  action,\n  ...rest\n}: { action: Action<SubmissionResult | null, FormData> } & React.ComponentPropsWithoutRef<\n  typeof Button\n>) {\n  const [lastResult, formAction] = useActionState(action, null);\n\n  useEffect(() => {\n    if (lastResult?.error) {\n      console.log(lastResult.error);\n    }\n  }, [lastResult?.error]);\n\n  return (\n    <form action={formAction}>\n      <SubmitButton {...rest} />\n    </form>\n  );\n}\n\nfunction SubmitButton(props: React.ComponentPropsWithoutRef<typeof Button>) {\n  const { pending } = useFormStatus();\n\n  return <Button {...props} disabled={pending} loading={pending} type=\"submit\" />;\n}\n\nexport function CartEmptyState({ title, subtitle, cta }: CartEmptyState) {\n  return (\n    <div className=\"@container\">\n      <div className=\"px-4 py-10 text-center @xl:px-6 @xl:py-14 @4xl:px-8 @4xl:py-20\">\n        <h1 className=\"mb-3 text-center font-heading text-2xl leading-none text-foreground @lg:text-4xl @3xl:text-5xl\">\n          {title}\n        </h1>\n        <p className=\"mb-10 text-center leading-normal text-contrast-500 @3xl:text-lg\">\n          {subtitle}\n        </p>\n        <ButtonLink href={cta.href}>{cta.label}</ButtonLink>\n      </div>\n    </div>\n  );\n}\n\nexport function CartSkeleton({ title = 'Cart' }: { title?: string }) {\n  return (\n    <StickySidebarLayout\n      className=\"animate-pulse\"\n      sidebar={\n        <>\n          {/* Summary Title */}\n          <div className=\"mt-3.5 h-4 w-40 rounded-lg bg-contrast-100 @xl:h-7 @xl:w-52\" />\n\n          {/* Subtotal */}\n          <div className=\"mt-[66px] flex justify-between border-b border-contrast-100/50 pb-5\">\n            <div className=\"h-4 w-16 rounded-md bg-contrast-100\" />\n            <div className=\"h-4 w-9 rounded-md bg-contrast-100\" />\n          </div>\n\n          {/* Shipping */}\n          <div className=\"mt-5 flex justify-between border-b border-contrast-100/50 pb-5\">\n            <div className=\"h-4 w-[70px] rounded-md bg-contrast-100\" />\n            <div className=\"h-4 w-8 rounded-md bg-contrast-100\" />\n          </div>\n\n          {/* Tax */}\n          <div className=\"mt-5 flex justify-between border-b border-contrast-100/50 pb-5\">\n            <div className=\"h-4 w-8 rounded-md bg-contrast-100\" />\n            <div className=\"h-4 w-8 rounded-md bg-contrast-100\" />\n          </div>\n\n          {/* Grand Total */}\n          {/* <div className=\"mt-10 flex justify-between border-b border-contrast-100/50 pb-5\">\n                <div className=\"h-6 w-20 rounded-lg bg-contrast-100\" />\n                <div className=\"h-6 w-16 rounded-lg bg-contrast-100\" />\n              </div> */}\n\n          {/* Checkout Button */}\n          <div className=\"mt-10 h-[50px] w-full rounded-full bg-contrast-100\" />\n        </>\n      }\n      sidebarPosition=\"after\"\n      sidebarSize=\"1/3\"\n    >\n      <div className=\"w-full\">\n        <h1 className=\"mb-10 font-heading text-4xl font-medium leading-none @xl:text-5xl\">\n          {title}\n        </h1>\n\n        {/* Cart Line Items */}\n        <ul className=\"flex flex-col gap-5\">\n          {Array.from({ length: 2 }).map((_, index) => (\n            <li\n              className=\"flex flex-col items-start gap-x-5 gap-y-6 @container @sm:flex-row @sm:gap-y-4\"\n              key={index}\n            >\n              {/* Image */}\n              <div className=\"relative aspect-square w-full overflow-hidden rounded-xl bg-contrast-100 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-4 @sm:max-w-24 @md:max-w-36\" />\n              <div className=\"flex flex-grow flex-col flex-wrap justify-between gap-y-4 @xl:flex-row\">\n                <div className=\"flex w-full flex-1 flex-col @xl:w-1/2 @xl:pr-4\">\n                  {/* Line Item Title */}\n                  <div className=\"mb-3 h-4 w-44 rounded-md bg-contrast-100\" />\n                  {/* Subtitle */}\n                  <div className=\"h-3 w-36 rounded-md bg-contrast-100\" />\n                </div>\n                <div className=\"flex flex-wrap items-center justify-end gap-x-5 gap-y-2 @sm:justify-start @xl:w-1/2 @xl:flex-nowrap @xl:justify-end\">\n                  {/* Price */}\n                  <div className=\"h-4 w-8 rounded-md bg-contrast-100\" />\n                  {/* Counter */}\n                  <div className=\"h-[44px] w-[120px] rounded-lg bg-contrast-100\" />\n                  {/* DeleteLineItemButton */}\n                  <div className=\"mr-1 h-6 w-6 rounded-full bg-contrast-100\" />\n                </div>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </StickySidebarLayout>\n  );\n}\n",
        "sections/cart/schema.ts": "import { z } from 'zod';\n\nexport const cartLineItemActionFormDataSchema = z.discriminatedUnion('intent', [\n  z.object({\n    intent: z.literal('increment'),\n    id: z.string(),\n  }),\n  z.object({\n    intent: z.literal('decrement'),\n    id: z.string(),\n  }),\n  z.object({\n    intent: z.literal('delete'),\n    id: z.string(),\n  }),\n]);\n",
        "sections/cart/types.ts": "import { SubmissionResult } from '@conform-to/react';\n\nexport type Action<State, Payload> = (\n  state: Awaited<State>,\n  payload: Payload,\n) => State | Promise<State>;\n\nexport interface CartState {\n  lineItems: CartLineItem[];\n  lastResult: SubmissionResult | null;\n}\n\nexport interface CartLineItem {\n  id: string;\n  image: { alt: string; src: string };\n  title: string;\n  subtitle: string;\n  quantity: number;\n  price: string;\n}\n\nexport interface CartSummary {\n  title?: string;\n  caption?: string;\n  subtotalLabel?: string;\n  subtotal: string | Promise<string>;\n  shippingLabel?: string;\n  shipping?: string;\n  taxLabel?: string;\n  tax?: string | Promise<string>;\n  grandTotalLabel?: string;\n  grandTotal?: string | Promise<string>;\n  ctaLabel?: string;\n}\n\nexport interface CartEmptyState {\n  title: string;\n  subtitle: string;\n  cta: {\n    label: string;\n    href: string;\n  };\n}\n"
      },
      "componentType": "section",
      "description": "The Cart component displays the items in the user's cart, along with a summary of the total cost."
    },
    {
      "name": "checkout",
      "dependencies": [],
      "registryDependencies": [],
      "files": [
        "sections/checkout/index.tsx"
      ],
      "doc": "---\ntitle: Checkout\npreview: checkout-example\npreviewSize: xl\n---\n",
      "docFile": "/dev/vibes/soul/docs/checkout.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/checkout/index.tsx",
      "componentName": "Checkout",
      "source": {
        "sections/checkout/checkout-form.tsx": "'use client';\n\nimport * as RadioGroupPrimitive from '@radix-ui/react-radio-group';\nimport { clsx } from 'clsx';\nimport { useState } from 'react';\n\nimport { Button } from '@/vibes/soul/primitives/button';\nimport { Checkbox } from '@/vibes/soul/primitives/checkbox';\nimport { Dropdown } from '@/vibes/soul/primitives/dropdown';\nimport { Input } from '@/vibes/soul/primitives/input';\nimport { Label } from '@/vibes/soul/primitives/label';\nimport { TextArea } from '@/vibes/soul/primitives/textarea';\n\nconst shippingMethods = [\n  {\n    id: '1',\n    label: 'Free Shipping',\n    cost: '$0.00',\n  },\n  {\n    id: '2',\n    label: 'Expidited Shipping',\n    cost: '$10.00',\n  },\n];\ninterface Props {\n  includeSameAsBillingAddress?: boolean;\n  includeShippingMethod?: boolean;\n  includeOrderComments?: boolean;\n  onSubmit?: (e: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\nexport const CheckoutForm = function CheckoutForm({\n  includeSameAsBillingAddress,\n  includeShippingMethod,\n  includeOrderComments,\n  onSubmit,\n}: Props) {\n  const [useSameAddress, setUseSameAddress] = useState(true);\n  const [shippingMethod, setShippingMethod] = useState<string | null>();\n  return (\n    <form className=\"grid w-full grid-cols-1 gap-5 @sm:grid-cols-2\">\n      <Input label=\"First Name\" required type=\"text\" />\n      <Input label=\"Last Name\" required type=\"text\" />\n      <Input label=\"Company Name\" type=\"text\" />\n      {/* TODO: Phone number input */}\n      <Input label=\"Phone Number\" type=\"text\" />\n      <Input label=\"Address\" required type=\"text\" />\n      <Input label=\"Apartment/Suite/Building\" type=\"text\" />\n      <Input label=\"City\" required type=\"text\" />\n\n      <Dropdown items={['USA', 'England', 'Brazil']} label=\"Country\" labelOnTop required />\n      <Dropdown\n        items={['Alabama', 'California', 'Georgia', 'Florida', 'Texas']}\n        label=\"State/Provence\"\n        labelOnTop\n        required\n      />\n      <Input label=\"ZIP/Postcode\" required type=\"text\" />\n\n      {includeSameAsBillingAddress === true && (\n        <Checkbox\n          checked={useSameAddress}\n          className=\"@sm:col-span-2\"\n          label=\"My billing address is the same as my shipping address.\"\n          setChecked={setUseSameAddress}\n        />\n      )}\n\n      {includeShippingMethod === true && (\n        <div className=\"mt-2 @sm:col-span-2\">\n          <Label className=\"text-foreground\">Shipping Method</Label>\n          <RadioGroupPrimitive.Root className=\"mt-2 flex flex-col gap-2\">\n            {shippingMethods.map((option, index) => (\n              <RadioGroupPrimitive.Item\n                className={clsx(\n                  'flex w-full items-center justify-between rounded-lg border p-4 text-sm font-medium transition-colors duration-300',\n                  'ring-primary focus-visible:outline-0 focus-visible:ring-2',\n                  option.id === shippingMethod\n                    ? 'bg-foreground text-background'\n                    : 'bg-contrast-100 hover:bg-contrast-200',\n                )}\n                key={index}\n                onClick={() => setShippingMethod(option.id)}\n                value={option.id}\n              >\n                <span>{option.label}</span>\n                <span>{option.cost}</span>\n              </RadioGroupPrimitive.Item>\n            ))}\n          </RadioGroupPrimitive.Root>\n        </div>\n      )}\n\n      {includeOrderComments === true && (\n        <TextArea className=\"mt-2 @sm:col-span-2\" label=\"Order Comments\" />\n      )}\n\n      {/* TODO: disbale until form is complete */}\n      <Button className=\"ml-auto @sm:col-span-2\" onClick={(e) => onSubmit?.(e)} variant=\"secondary\">\n        Continue\n      </Button>\n    </form>\n  );\n};\n",
        "sections/checkout/index.tsx": "'use client';\n\nimport * as Accordion from '@radix-ui/react-accordion';\nimport { clsx } from 'clsx';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { useEffect, useState } from 'react';\n\nimport { Button } from '@/vibes/soul/primitives/button';\nimport { Checkbox } from '@/vibes/soul/primitives/checkbox';\nimport { Input } from '@/vibes/soul/primitives/input';\nimport { CartLineItem } from '@/vibes/soul/sections/cart';\nimport { CheckoutForm } from '@/vibes/soul/sections/checkout/checkout-form';\n\nexport const Checkout = function Checkout({ products }: { products: CartLineItem[] }) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [checked, setChecked] = useState(true);\n  const [openAccordion, setOpenAccordion] = useState<string | undefined>(undefined);\n\n  // TODO: Remove this when we have a real API\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsLoading(false);\n    }, 3000);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, []);\n\n  const handleAccordionChange = (value: string | undefined) => {\n    setOpenAccordion(value);\n  };\n\n  const accordions = [\n    {\n      title: 'Customer',\n      preview: <span>email@email.com</span>,\n      form: (\n        <form className=\"space-y-4\">\n          <div className=\"flex items-end gap-4\">\n            <Input label=\"Email\" value=\"test@test.com\" />\n            <Button\n              className=\"h-[48px]\"\n              onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n                e.preventDefault();\n                handleAccordionChange('');\n              }}\n              size=\"small\"\n              variant=\"secondary\"\n            >\n              Continue\n            </Button>\n          </div>\n          <Checkbox\n            checked={checked}\n            id=\"newsletter-subscribe\"\n            label=\"Subscribe to our newsletter\"\n            setChecked={setChecked}\n          />\n          <span className=\"block pt-8 text-xs\">\n            Already have an account?{' '}\n            <Link className=\"font-semibold\" href=\"#\">\n              Log in\n            </Link>\n          </span>\n        </form>\n      ),\n    },\n    {\n      title: 'Shipping',\n      preview: (\n        <div className=\"flex flex-col\">\n          <span>Jane Jones</span>\n          <span>Monogram</span>\n          <span>+1 (404) 555 0123</span>\n          <span>1234 Main St, Atlanta, GA 30303</span>\n          <span className=\"mt-1 w-fit border-t pt-1\">\n            Free Shipping <span className=\"font-medium\">$0.00</span>\n          </span>\n        </div>\n      ),\n      form: (\n        <CheckoutForm\n          includeOrderComments\n          includeSameAsBillingAddress\n          includeShippingMethod\n          onSubmit={(e: React.MouseEvent<HTMLButtonElement>) => {\n            e.preventDefault();\n            handleAccordionChange('');\n          }}\n        />\n      ),\n    },\n    {\n      title: 'Billing',\n      preview: (\n        <div className=\"flex flex-col\">\n          <span>Jane Jones</span>\n          <span>Monogram</span>\n          <span>+1 (404) 555 0123</span>\n          <span>1234 Main St, Atlanta, GA 30303</span>\n        </div>\n      ),\n      form: (\n        <CheckoutForm\n          onSubmit={(e: React.MouseEvent<HTMLButtonElement>) => {\n            e.preventDefault();\n            handleAccordionChange('');\n          }}\n        />\n      ),\n    },\n    {\n      title: 'Payment',\n      preview: <></>,\n      form: <></>,\n    },\n  ];\n\n  return (\n    <div className=\"mx-auto max-w-screen-2xl @container\">\n      <div className=\"flex w-full flex-col gap-4 pb-10 pt-24 @3xl:flex-row @4xl:pb-20 @4xl:pt-32\">\n        {/* Customer Form Side */}\n        <div className={clsx(products.length > 0 && '@3xl:w-1/2 @6xl:w-2/3', 'w-full max-w-3xl')}>\n          <h1 className=\"mb-10 px-3 font-heading text-4xl font-medium leading-none @xl:pl-6 @xl:text-5xl @5xl:pl-20\">\n            Checkout\n            {!isLoading && products.length > 0 && (\n              <span className=\"ml-4 text-contrast-200\">{products.length}</span>\n            )}\n          </h1>\n\n          <Accordion.Root\n            asChild\n            collapsible\n            onValueChange={handleAccordionChange}\n            type=\"single\"\n            value={openAccordion}\n          >\n            <ul>\n              {accordions.map((accordion, i) => (\n                <Accordion.Item asChild key={i} value={`${i + 1}`}>\n                  <li className=\"group px-3 transition-colors duration-500 @container/accordion data-[state=closed]:bg-transparent data-[state=open]:bg-contrast-100/50 @xl:rounded-r-lg @xl:px-6 @5xl:pl-20 @5xl:pr-10 @6xl:px-20 @7xl:rounded-lg\">\n                    <Accordion.Header>\n                      <div className=\"grid grid-cols-[max-content_1fr_minmax(max-content,auto)] gap-x-4 py-5 group-data-[state=closed]:grid-rows-[auto,auto] group-data-[state=open]:grid-rows-1 @md:gap-x-8 @xl/accordion:grid-rows-1\">\n                        <h2 className=\"w-32 justify-stretch whitespace-nowrap font-heading text-3xl font-medium\">\n                          {accordion.title}\n                        </h2>\n\n                        {((typeof openAccordion === 'string' &&\n                          parseInt(openAccordion, 10) !== i + 1) ||\n                          openAccordion === undefined) && (\n                          <div className=\"col-span-3 row-start-2 mt-4 flex w-full flex-col gap-2 overflow-hidden pb-2 text-sm group-data-[state=closed]:h-full group-data-[state=open]:h-0 @xl/accordion:col-span-1 @xl/accordion:col-start-2 @xl/accordion:row-start-1\">\n                            {accordion.preview}\n                          </div>\n                        )}\n                        <Accordion.Trigger asChild>\n                          <Button\n                            className=\"col-start-3 h-min group-data-[state=open]:pointer-events-none group-data-[state=closed]:opacity-100 group-data-[state=open]:opacity-0 \"\n                            size=\"small\"\n                            variant=\"secondary\"\n                          >\n                            Edit\n                          </Button>\n                        </Accordion.Trigger>\n                      </div>\n                    </Accordion.Header>\n                    <Accordion.Content className=\"w-full overflow-hidden data-[state=closed]:animate-collapse data-[state=open]:animate-expand\">\n                      <div className=\"pb-8 pt-2\">{accordion.form}</div>\n                    </Accordion.Content>\n                    <hr\n                      className={clsx(\n                        openAccordion !== undefined && openAccordion !== ''\n                          ? 'opacity-0'\n                          : 'opacity-100',\n                      )}\n                    />\n                  </li>\n                </Accordion.Item>\n              ))}\n            </ul>\n          </Accordion.Root>\n        </div>\n\n        {/* Summary Side */}\n        <div className=\"w-full px-3 @xl:mx-auto @xl:pr-6 @3xl:w-1/2 @5xl:pr-20 @6xl:w-1/3\">\n          {isLoading ? (\n            // Skeleton Loader\n            <div className=\"animate-pulse\">\n              <div className=\"mb-20 mt-6 h-10 w-44 rounded bg-contrast-100\" />\n              <div className=\"h-96 w-full rounded bg-contrast-100\" />\n            </div>\n          ) : (\n            products.length > 0 && (\n              <div>\n                <div className=\"mb-10 flex items-end justify-between\">\n                  <h2 className=\"inline font-heading text-4xl font-medium leading-none @xl:text-5xl\">\n                    Summary\n                  </h2>\n                  <Link\n                    className=\"mb-0.5 text-sm text-contrast-300 transition-colors duration-300 hover:text-foreground\"\n                    href=\"#\"\n                  >\n                    Edit Cart\n                  </Link>\n                </div>\n\n                {/* Mini Products List in Order Summary */}\n                <ul className=\"flex flex-col gap-y-4\">\n                  {products.map(({ id, title, image, price, quantity }) => (\n                    <li className=\"flex items-center justify-between gap-x-4\" key={id}>\n                      <div className=\"flex items-center gap-x-4\">\n                        <div className=\"relative aspect-[3/4] w-16 overflow-hidden rounded-lg bg-contrast-100\">\n                          <Image\n                            alt={image.alt}\n                            className=\"h-full w-full object-cover\"\n                            fill\n                            sizes=\"64px\"\n                            src={image.src}\n                          />\n                        </div>\n                        <div>\n                          <span className=\"text-sm\">{title}</span>\n                          <span className=\"block text-sm text-contrast-300\">x{quantity}</span>\n                        </div>\n                      </div>\n                      <span>{price}</span>\n                    </li>\n                  ))}\n                </ul>\n\n                <div className=\"flex items-end gap-2 pb-7 pt-10\">\n                  <Input label=\"Coupon / Gift Certificate\" />\n                  <Button className=\"h-[48px]\" size=\"small\" variant=\"secondary\">\n                    Apply\n                  </Button>\n                </div>\n\n                <table aria-label=\"Receipt Summary\" className=\"w-full\">\n                  <caption className=\"sr-only\">Receipt Summary</caption>\n                  <tbody>\n                    <tr className=\"border-b border-contrast-100\">\n                      <td>Subtotal</td>\n                      <td className=\"py-4 text-right\">$50.00</td>\n                    </tr>\n                    <tr className=\"border-b border-contrast-100\">\n                      <td>Shipping</td>\n                      <td className=\"py-4 text-right\">\n                        {/* Add Address Button and Modal Form */} --\n                      </td>\n                    </tr>\n                    <tr className=\"border-b border-contrast-100\">\n                      <td>Tax</td>\n                      <td className=\"py-4 text-right\">$4.50</td>\n                    </tr>\n                  </tbody>\n                  <tfoot>\n                    <tr className=\"text-xl\">\n                      <th className=\"text-left\">Grand Total</th>\n                      <td className=\"py-10 text-right\">$59.50</td>\n                    </tr>\n                  </tfoot>\n                </table>\n              </div>\n            )\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n"
      },
      "componentType": "section"
    },
    {
      "name": "countdown",
      "dependencies": [],
      "registryDependencies": [
        "clsx",
        "lucide-react"
      ],
      "files": [
        "sections/countdown/index.tsx"
      ],
      "doc": "---\ntitle: Countdown\ndescription: A countdown component that displays the time left until a specified date.\npreview: countdown-example\npreviewSize: xl\nfeatures:\n  - Displays the time left until a specified date.\n  - Supports varying layouts (default, full, split, and banner).\n  - Customizable with a title and target date.\n---\n\n## Usage\n\nImport the component.\n\n<CodeBlock lang=\"bash\">{`import { Countdown } from '@/vibes/soul/primitives/countdown'`}</CodeBlock>\n\nDisplay the component.\n\n<CodeBlock lang=\"bash\">{`<Countdown title=\"Sale ends in\" targetDate={new Date('2025-06-30')} />`}</CodeBlock>\n\n## API Reference\n\n| Prop       | Type                                                                                 | Default      |\n| ---------- | ------------------------------------------------------------------------------------ | ------------ |\n| title      | `string`                                                                             |              |\n| targetDate | `Date`                                                                               | `new Date()` |\n| variant    | [`Default`](#default) \\| [`Full`](#full) \\| [`Split`](#split) \\| [`Banner`](#banner) | `'default'`  |\n\n### Default\n\n| Prop   | Type       | Default |\n| ------ | ---------- | ------- |\n| type   | `default`  |         |\n| images | `string[]` |         |\n\n### Full\n\n| Prop            | Type     | Default |\n| --------------- | -------- | ------- |\n| type            | `full`   |         |\n| backgroundImage | `string` |         |\n\n### Split\n\n| Prop  | Type     | Default |\n| ----- | -------- | ------- |\n| type  | `split`  |         |\n| image | `string` |         |\n\n### Banner\n\n| Prop | Type     | Default |\n| ---- | -------- | ------- |\n| type | `banner` |         |\n\n## Figma\n\n<Figma url=\"https://www.figma.com/design/kgCf8OkDCe90wBSKNNqueL/Soul-Vibe?node-id=2281-42529&t=bvdVWjdyC3mhKCHG-4\" />\n",
      "docFile": "/dev/vibes/soul/docs/countdown.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/countdown/index.tsx",
      "componentName": "Countdown",
      "source": {
        "sections/countdown/index.tsx": "'use client';\n\nimport { clsx } from 'clsx';\nimport { X } from 'lucide-react';\nimport Image from 'next/image';\nimport React, { useCallback, useEffect, useState } from 'react';\n\ninterface Default {\n  type: 'default';\n  images?: string[];\n}\n\ninterface Full {\n  type: 'full';\n  backgroundImage: string;\n}\n\ninterface Split {\n  type: 'split';\n  image: string;\n}\n\ninterface Banner {\n  type: 'banner';\n}\n\ninterface Props {\n  title: string;\n  targetDate: Date;\n  variant: Default | Full | Split | Banner;\n}\n\nexport const Countdown = function Countdown({\n  title,\n  targetDate,\n  variant = { type: 'default' },\n}: Props) {\n  const calculateTimeLeft = useCallback(() => {\n    const difference = +targetDate - +new Date();\n    let timeRemaining = { days: 0, hours: 0, mins: 0, secs: 0 };\n\n    if (difference > 0) {\n      timeRemaining = {\n        days: Math.floor(difference / (1000 * 60 * 60 * 24)),\n        hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\n        mins: Math.floor((difference / 1000 / 60) % 60),\n        secs: Math.floor((difference / 1000) % 60),\n      };\n    }\n\n    return timeRemaining;\n  }, [targetDate]);\n  const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());\n  const [banner, setBanner] = useState({ dismissed: false, initialized: false });\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setTimeLeft(calculateTimeLeft());\n    }, 1000);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, [targetDate, calculateTimeLeft]);\n\n  useEffect(() => {\n    const hidden = localStorage.getItem('hidden-countdown') === 'true';\n    setBanner({ dismissed: hidden, initialized: true });\n  }, []);\n\n  const hideBanner = useCallback(() => {\n    setBanner((prev) => ({ ...prev, dismissed: true }));\n    localStorage.setItem('hidden-countdown', 'true');\n  }, []);\n\n  if (!banner.initialized) return null;\n\n  const AnimatedNumber = ({ value }: { value: number }) => {\n    const [displayValue, setDisplayValue] = useState(value);\n\n    useEffect(() => {\n      const timeout = setTimeout(() => setDisplayValue(value));\n      return () => clearTimeout(timeout);\n    }, [value]);\n\n    return (\n      <div className=\"relative h-14 overflow-hidden [&>*]:h-14\">\n        {Array.from({ length: 10 }, (_, i) => (\n          <div\n            className=\"flex flex-shrink-0 flex-col items-center justify-center\"\n            key={i}\n            style={{ transform: `translateY(-${displayValue * 100}%)` }}\n          >\n            {i}\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const TwoDigitAnimatedNumber = ({ value }: { value: number }) => (\n    <div\n      className={clsx(\n        'flex items-center justify-center rounded-lg',\n        variant.type === 'full'\n          ? 'bg-primary-shadow text-primary'\n          : 'bg-primary text-primary-shadow',\n        {\n          default: 'h-14 w-14 @2xl:h-28 @2xl:w-28',\n          full: 'h-14 w-14 @2xl:h-28 @2xl:w-28',\n          split: 'h-14 w-14 @2xl:h-16 @2xl:w-16',\n          banner: 'h-9 w-9',\n        }[variant.type],\n      )}\n    >\n      <AnimatedNumber value={Math.floor(value / 10)} />\n      <AnimatedNumber value={value % 10} />\n    </div>\n  );\n\n  return (\n    <section\n      className={clsx('relative grid origin-top transition-all duration-300 ease-out @container', {\n        'pointer-events-none grid-rows-[0fr]': variant.type === 'banner' && banner.dismissed,\n        'grid-rows-[1fr]': variant.type === 'banner' && !banner.dismissed,\n        'fixed top-0': variant.type === 'banner',\n        'bg-primary-shadow': variant.type === 'default' || variant.type === 'split',\n      })}\n    >\n      <div className=\"overflow-hidden\">\n        <div\n          className={clsx(\n            'relative flex flex-col items-center justify-center overflow-hidden bg-primary-shadow bg-cover bg-center bg-no-repeat font-medium',\n            {\n              default: 'py-32 @5xl:container @5xl:mx-auto',\n              full: 'py-40',\n              split: '@5xl:container @3xl:mx-auto @3xl:grid @3xl:grid-cols-2',\n              banner: '',\n            }[variant.type],\n          )}\n        >\n          {variant.type === 'full' || variant.type === 'split' ? (\n            <Image\n              alt={title}\n              className={clsx('h-full w-full object-cover', {\n                'absolute inset-0': variant.type === 'full',\n              })}\n              height={1000}\n              src={variant.type === 'full' ? variant.backgroundImage : variant.image}\n              width={1000}\n            />\n          ) : null}\n\n          {variant.type === 'default' && variant.images\n            ? variant.images.map((image, index) => (\n                <Image\n                  alt={title}\n                  className={clsx(\n                    'absolute object-contain',\n                    index === 0\n                      ? '-left-20 top-0 -translate-y-2/3 @5xl:-translate-y-1/3'\n                      : '-right-20 bottom-0 translate-y-2/3 @5xl:translate-y-1/3',\n                  )}\n                  height={500}\n                  key={`image-${index + 1}`}\n                  src={image}\n                  width={500}\n                />\n              ))\n            : null}\n\n          <div\n            className={clsx(\n              'relative z-10 text-center text-white',\n              {\n                default:\n                  'text-3xl @2xl:text-6xl [&>div>div>span]:text-lg [&>h2]:text-3xl @2xl:[&>h2]:text-[40px]',\n                full: 'text-3xl @2xl:text-6xl [&>div>div>span]:text-lg',\n                split: 'py-9 text-3xl @2xl:text-[40px] [&>div>div>span]:text-xs [&>h2]:text-2xl',\n                banner:\n                  'flex flex-col items-center gap-4 py-2.5 text-lg @xl:flex-row @xl:gap-6 @2xl:text-xl [&>div>div>span]:text-xs [&>div>span]:mt-0.5',\n              }[variant.type],\n            )}\n          >\n            <h2\n              className={clsx('leading-[1.1] [text-wrap:pretty]', {\n                'mb-6 max-w-2xl': variant.type !== 'banner',\n              })}\n            >\n              {title}\n            </h2>\n            <div className=\"flex justify-center space-x-2\">\n              {Object.entries(timeLeft).map(([unit, value], index, array) => (\n                <React.Fragment key={unit}>\n                  <div className=\"flex flex-col items-center\" key={unit}>\n                    <TwoDigitAnimatedNumber value={value} />\n                    <span className=\"mt-1 capitalize\">{unit}</span>\n                  </div>\n                  {index < array.length - 1 && <span>:</span>}\n                </React.Fragment>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Close button (banner variation) */}\n        {variant.type === 'banner' ? (\n          <button\n            aria-label=\"Dismiss banner\"\n            className=\"absolute right-5 top-1/2 z-10 -translate-y-1/2 text-white transition-transform hover:scale-110\"\n            onClick={(e) => {\n              e.preventDefault();\n              hideBanner();\n            }}\n            type=\"button\"\n          >\n            <X className=\"h-5 w-5\" />\n          </button>\n        ) : null}\n      </div>\n    </section>\n  );\n};\n"
      },
      "componentType": "section",
      "description": "A countdown component that displays the time left until a specified date."
    },
    {
      "name": "compare-section",
      "dependencies": [],
      "registryDependencies": [],
      "files": [
        "sections/compare-section/index.tsx"
      ],
      "doc": "---\ntitle: Compare Section\npreview:\n  Electric: compare-section-electric-example\n  Warm: compare-section-warm-example\n  Luxury: compare-section-luxury-example\npreviewSize: lg\n---\n",
      "docFile": "/dev/vibes/soul/docs/compare-section.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/compare-section/index.tsx",
      "componentName": "CompareSection",
      "source": {
        "sections/compare-section/index.tsx": "import { clsx } from 'clsx';\n\nimport {\n  Carousel,\n  CarouselButtons,\n  CarouselContent,\n  CarouselItem,\n} from '@/vibes/soul/primitives/carousel';\nimport {\n  CompareCard,\n  CompareCardSkeleton,\n  CompareProduct,\n} from '@/vibes/soul/primitives/compare-card';\n\ninterface Props {\n  className?: string;\n  title?: string;\n  products: CompareProduct[];\n  addToCartLabel?: string;\n  emptyStateMessage?: string;\n  previousLabel?: string;\n  nextLabel?: string;\n  addToCartAction?: (id: string) => Promise<void>;\n}\n\nexport function CompareSection({\n  className,\n  title = 'Compare products',\n  products,\n  addToCartAction,\n  addToCartLabel,\n  emptyStateMessage,\n  previousLabel,\n  nextLabel,\n}: Props) {\n  if (products.length === 0) {\n    return <CompareSectionEmptyState message={emptyStateMessage} />;\n  }\n\n  return (\n    <div className={clsx('overflow-hidden @container', className)}>\n      <div className=\"mx-auto w-full max-w-screen-2xl px-4 py-10 @xl:px-6 @xl:py-14 @4xl:px-8 @4xl:py-20\">\n        <Carousel>\n          <div className=\"mb-8 flex w-full items-end justify-between gap-10 @xl:mb-10\">\n            <h1 className=\"font-heading text-2xl leading-none @xl:text-3xl @4xl:text-4xl\">\n              {title} <span className=\"text-contrast-300\">{products.length}</span>\n            </h1>\n            <CarouselButtons\n              className=\"hidden xl:block\"\n              nextLabel={nextLabel}\n              previousLabel={previousLabel}\n            />\n          </div>\n          <CarouselContent>\n            {products.map((product) => (\n              <CarouselItem\n                className=\"basis-[calc(100%-20px)] @md:basis-1/2 @lg:basis-1/3 @2xl:basis-1/4\"\n                key={product.id}\n              >\n                <CompareCard\n                  addToCartAction={addToCartAction}\n                  addToCartLabel={addToCartLabel}\n                  key={product.id}\n                  product={product}\n                />\n              </CarouselItem>\n            ))}\n          </CarouselContent>\n        </Carousel>\n      </div>\n    </div>\n  );\n}\n\nexport function CompareSectionSkeleton({\n  className,\n  title = 'Compare products',\n}: {\n  className?: string;\n  title?: string;\n}) {\n  return (\n    <div className={clsx('overflow-hidden @container', className)}>\n      <div className=\"mx-auto w-full max-w-screen-2xl px-4 py-10 @xl:px-6 @xl:py-14 @4xl:px-8 @4xl:py-20\">\n        <Carousel>\n          <div className=\"mb-8 flex w-full items-end justify-between gap-10 @xl:mb-10\">\n            <h1 className=\"font-heading text-2xl leading-none @xl:text-3xl @4xl:text-4xl\">\n              {title}\n            </h1>\n            <div className=\"flex h-6 w-14 animate-pulse bg-contrast-100\" />\n          </div>\n          <CarouselContent>\n            {Array.from({ length: 4 }).map((_, index) => (\n              <CarouselItem\n                className=\"basis-[calc(100%-20px)] @md:basis-1/2 @lg:basis-1/3 @2xl:basis-1/4\"\n                key={index}\n              >\n                <CompareCardSkeleton />\n              </CarouselItem>\n            ))}\n          </CarouselContent>\n        </Carousel>\n      </div>\n    </div>\n  );\n}\n\nexport function CompareSectionEmptyState({\n  className,\n  title = 'Compare products',\n  message = 'No products found',\n}: {\n  className?: string;\n  title?: string;\n  message?: string;\n}) {\n  return (\n    <div className={clsx('overflow-hidden @container', className)}>\n      <div className=\"mx-auto w-full max-w-screen-2xl px-4 py-10 @xl:px-6 @xl:py-14 @4xl:px-8 @4xl:py-20\">\n        <Carousel>\n          <div className=\"mb-8 flex w-full items-end justify-between gap-10 @xl:mb-10\">\n            <h1 className=\"font-heading text-2xl leading-none @xl:text-3xl @4xl:text-4xl\">\n              {title}\n            </h1>\n            <div className=\"flex h-6 w-14 animate-pulse bg-contrast-100\" />\n          </div>\n          <CarouselContent className=\"[mask-image:radial-gradient(circle,transparent,black)]\">\n            {Array.from({ length: 4 }).map((_, index) => (\n              <CarouselItem\n                className=\"basis-[calc(100%-20px)] @md:basis-1/2 @lg:basis-1/3 @2xl:basis-1/4\"\n                key={index}\n              >\n                <CompareCardSkeleton />\n              </CarouselItem>\n            ))}\n          </CarouselContent>\n          <div className=\"absolute inset-0 flex items-center justify-center text-xl\">{message}</div>\n        </Carousel>\n      </div>\n    </div>\n  );\n}\n"
      },
      "componentType": "section"
    },
    {
      "name": "discount",
      "dependencies": [],
      "registryDependencies": [
        "clsx",
        "lucide-react"
      ],
      "files": [
        "sections/discount/index.tsx"
      ],
      "doc": "---\ntitle: Discount\npreview: discount-example\n---\n",
      "docFile": "/dev/vibes/soul/docs/discount.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/discount/index.tsx",
      "componentName": "Discount",
      "source": {
        "sections/discount/index.tsx": "'use client';\n\nimport { clsx } from 'clsx';\nimport { X } from 'lucide-react';\nimport Image from 'next/image';\nimport { useEffect, useState } from 'react';\n\nimport { Button } from '@/vibes/soul/primitives/button';\n\ninterface DiscountType {\n  label: string;\n  code: string;\n}\n\ninterface Props {\n  backgroundImage: string;\n  discounts: DiscountType[];\n}\n\nexport const Discount = function Discount({ backgroundImage, discounts }: Props) {\n  // TODO: store dismissed state in local storage\n  const [dismissed, setDismissed] = useState(false);\n  const [spin, setSpin] = useState(false);\n  const [isSpun, setIsSpun] = useState(false);\n  const [shuffledCodes, setShuffledCodes] = useState<DiscountType[]>([]);\n  const [copied, setCopied] = useState(false);\n\n  useEffect(() => {\n    if (spin) {\n      setTimeout(() => {\n        setIsSpun(true);\n      }, 5000);\n    }\n  }, [spin]);\n\n  useEffect(() => {\n    const shuffled = shuffleCodes(\n      Array<DiscountType>(10)\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        .fill(discounts[0]!)\n        .flatMap(() => discounts),\n    );\n    setShuffledCodes(shuffled);\n  }, [discounts]);\n\n  const shuffleCodes = (array: DiscountType[]) => {\n    return array.sort(() => Math.random() - 0.5);\n  };\n\n  const copy = async () => {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      await navigator.clipboard.writeText(shuffledCodes[shuffledCodes.length - 2]!.code);\n      setCopied(true);\n      setTimeout(() => {\n        setCopied(false);\n      }, 2000);\n    } catch (error) {\n      console.log('Failed to copy:', error);\n    }\n  };\n\n  return (\n    <section\n      className={clsx(\n        'fixed left-0 top-0 flex h-dvh w-full items-center justify-center bg-contrast-100 text-background transition-[opacity,transform] duration-300 @container',\n        dismissed ? 'translate-y-full opacity-0' : 'translate-y-0 opacity-100',\n      )}\n    >\n      <Image\n        alt=\"Background image\"\n        className=\"object-cover\"\n        fill\n        sizes=\"100vw\"\n        src={backgroundImage}\n      />\n      <button\n        className=\"absolute right-5 top-5 text-foreground transition-transform hover:scale-110\"\n        onClick={() => {\n          setDismissed(true);\n        }}\n        type=\"button\"\n      >\n        <X className=\"h-6 w-6\" />\n      </button>\n\n      {/* Desktop Version */}\n      <button\n        className=\"z-10 m-5 hidden h-24 w-full max-w-4xl cursor-pointer items-center justify-between gap-10 overflow-hidden rounded-3xl bg-primary-shadow transition-transform active:scale-[0.99] @4xl:flex\"\n        onClick={() => {\n          if (isSpun) {\n            void copy();\n          } else {\n            setSpin(true);\n          }\n        }}\n      >\n        <DiscountUI\n          copied={copied}\n          copy={copy}\n          discounts={discounts}\n          isSpun={isSpun}\n          setSpin={setSpin}\n          shuffledCodes={shuffledCodes}\n          spin={spin}\n        />\n      </button>\n\n      {/* Mobile Version */}\n      <div className=\"z-10 m-5 flex w-full max-w-xs cursor-pointer flex-col items-center justify-between overflow-hidden rounded-3xl transition-transform @4xl:hidden\">\n        <DiscountUI\n          copied={copied}\n          copy={copy}\n          discounts={discounts}\n          isSpun={isSpun}\n          renderButton\n          setSpin={setSpin}\n          shuffledCodes={shuffledCodes}\n          spin={spin}\n        />\n      </div>\n    </section>\n  );\n};\n\nconst DiscountUI = ({\n  isSpun,\n  copied,\n  spin,\n  setSpin,\n  discounts,\n  shuffledCodes,\n  copy,\n  renderButton,\n}: {\n  isSpun: boolean;\n  copied: boolean;\n  spin: boolean;\n  setSpin: (value: boolean) => void;\n  discounts: DiscountType[];\n  shuffledCodes: DiscountType[];\n  copy: () => Promise<void>;\n  renderButton?: boolean;\n}) => {\n  let discountText = 'Spin for discount';\n  if (isSpun) {\n    discountText = copied ? 'Copied!' : `Copy discount code`;\n  }\n\n  return (\n    <>\n      <h2 className=\"flex min-h-20 w-full select-none items-center justify-center bg-primary-shadow py-3 text-center text-3xl font-medium leading-none @4xl:mb-0 @4xl:justify-start @4xl:bg-transparent @4xl:px-6 @4xl:text-5xl\">\n        {discountText}\n      </h2>\n      <div className=\"flex w-full max-w-xs flex-col gap-4 rounded-b-3xl bg-background px-6 pb-6 pt-4 @4xl:rounded-t-3xl @4xl:p-0\">\n        <div\n          className=\"relative h-[100px] w-full overflow-hidden bg-background text-foreground before:absolute\n            before:left-0 before:top-0 before:z-10 before:h-8 before:w-full before:bg-gradient-to-b before:from-background before:to-transparent after:absolute\n            after:bottom-0 after:left-0 after:z-10 after:h-8 after:w-full after:bg-gradient-to-t after:from-background after:to-transparent @4xl:max-w-72\n          \"\n        >\n          <div\n            className=\"absolute -top-8 left-0 w-full transition-all [transition-duration:5000ms] [transition-timing-function:cubic-bezier(0.285,-0.125,0.050,1.130)]\"\n            style={{\n              transform: spin\n                ? `translateY(calc(-100% + ${discounts.length * 33}px))`\n                : 'translateY(0)',\n            }}\n          >\n            {shuffledCodes.map((discount, index) => (\n              <div\n                className=\"flex select-none items-center justify-center py-1 text-5xl font-medium uppercase leading-[1] tracking-[-1px] text-foreground transition-transform duration-500 @4xl:justify-end @4xl:px-6\"\n                key={index}\n              >\n                {discount.label}\n              </div>\n            ))}\n          </div>\n        </div>\n        {renderButton === true && (\n          <Button\n            className=\"w-full select-none justify-center\"\n            onClick={() => {\n              if (isSpun) {\n                void copy();\n              } else {\n                setSpin(true);\n              }\n            }}\n            variant=\"secondary\"\n          >\n            {isSpun ? 'Copy' : 'Spin'}\n          </Button>\n        )}\n      </div>\n    </>\n  );\n};\n"
      },
      "componentType": "section"
    },
    {
      "name": "featured-blog-post-list",
      "dependencies": [
        "button",
        "blog-post-card"
      ],
      "registryDependencies": [],
      "files": [
        "sections/featured-blog-post-list/index.tsx"
      ],
      "doc": "---\ntitle: Featured Blog Post List\npreview: featured-blog-post-list-example\npreviewSize: lg\n---\n",
      "docFile": "/dev/vibes/soul/docs/featured-blog-post-list.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/featured-blog-post-list/index.tsx",
      "componentName": "FeaturedBlogPostList",
      "source": {
        "sections/featured-blog-post-list/index.tsx": "import { Streamable } from '@/vibes/soul/lib/streamable';\nimport { BlogPost } from '@/vibes/soul/primitives/blog-post-card';\nimport { Breadcrumb, Breadcrumbs } from '@/vibes/soul/primitives/breadcrumbs';\nimport { CursorPagination, CursorPaginationInfo } from '@/vibes/soul/primitives/cursor-pagination';\nimport { BlogPostList } from '@/vibes/soul/sections/blog-post-list';\n\ninterface Props {\n  title: string;\n  description?: string;\n  posts: Streamable<BlogPost[]>;\n  paginationInfo?: Streamable<CursorPaginationInfo>;\n  breadcrumbs?: Streamable<Breadcrumb[]>;\n}\n\nexport function FeaturedBlogPostList({\n  title,\n  description,\n  posts,\n  paginationInfo,\n  breadcrumbs,\n}: Props) {\n  return (\n    <section className=\"@container\">\n      <div className=\"mx-auto max-w-screen-2xl px-4 py-10 @xl:px-6 @xl:py-14 @4xl:px-8 @4xl:py-20\">\n        {breadcrumbs && <Breadcrumbs breadcrumbs={breadcrumbs} />}\n\n        <div className=\"pt-6\">\n          <h1 className=\"mb-3 font-heading text-4xl font-medium leading-none text-foreground @xl:text-5xl @4xl:text-6xl\">\n            {title}\n          </h1>\n\n          {description != null && description !== '' && (\n            <p className=\"max-w-lg text-lg text-contrast-500\">{description}</p>\n          )}\n\n          <BlogPostList className=\"mb-8 mt-8 @4xl:mb-10 @4xl:mt-10\" posts={posts} />\n\n          {paginationInfo && <CursorPagination info={paginationInfo} />}\n        </div>\n      </div>\n    </section>\n  );\n}\n"
      },
      "componentType": "section"
    },
    {
      "name": "featured-image",
      "dependencies": [
        "button"
      ],
      "registryDependencies": [],
      "files": [
        "sections/featured-image/index.tsx"
      ],
      "doc": "---\ntitle: Featured Image\npreview:\n  Electric: featured-image-electric-example\n  Warm: featured-image-warm-example\n  Luxury: featured-image-luxury-example\npreviewSize: lg\n---\n",
      "docFile": "/dev/vibes/soul/docs/featured-image.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/featured-image/index.tsx",
      "componentName": "FeaturedImage",
      "source": {
        "sections/featured-image/index.tsx": "import { clsx } from 'clsx';\nimport Image from 'next/image';\n\nimport { ButtonLink } from '../../primitives/button-link';\n\nexport interface FeaturedImageProps {\n  title: string;\n  description: string;\n  image: {\n    src: string;\n    blurDataUrl?: string;\n    alt: string;\n  };\n  cta: {\n    href: string;\n    label: string;\n  };\n  mediaAlign?: 'left' | 'right' | 'full';\n}\n\nexport const FeaturedImage = function FeaturedImage({\n  title,\n  description,\n  image,\n  cta,\n  mediaAlign = 'left',\n}: FeaturedImageProps) {\n  return (\n    <section\n      className={clsx(\n        'relative bg-primary-shadow @container',\n        mediaAlign === 'full' && 'h-dvh max-h-[700px]',\n      )}\n    >\n      <div className=\"mx-auto flex h-full max-w-screen-2xl flex-col @3xl:flex-row\">\n        <div\n          className={clsx(\n            'w-full object-cover',\n            mediaAlign === 'full'\n              ? 'absolute inset-0 h-full'\n              : 'relative aspect-square bg-primary/10 @xl:aspect-[9/6] @3xl:h-dvh @3xl:max-h-[880px] @3xl:w-1/2 @5xl:w-3/5',\n            {\n              '@3xl:order-2 @7xl:mr-20': mediaAlign === 'right',\n              '@7xl:ml-20': mediaAlign === 'left',\n            },\n          )}\n        >\n          <Image\n            alt={image.alt}\n            blurDataURL={image.blurDataUrl}\n            className=\"object-cover\"\n            fill\n            placeholder={image.blurDataUrl != null && image.blurDataUrl !== '' ? 'blur' : 'empty'}\n            sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 60vw\"\n            src={image.src}\n          />\n        </div>\n        <div\n          className={clsx(\n            'z-10 mx-auto flex flex-col items-start gap-4 px-3 pb-20 pt-10 text-background @5xl:p-20',\n            mediaAlign === 'full'\n              ? '5xl:px-20 mx-auto mt-auto w-full max-w-screen-2xl px-3 @xl:px-6'\n              : 'w-full justify-end @xl:px-6 @3xl:w-1/2 @5xl:w-2/5',\n            { '@3xl:order-1': mediaAlign === 'right' },\n          )}\n        >\n          <h2 className=\"max-w-xl font-heading text-4xl leading-none @xl:text-5xl\">{title}</h2>\n          <p className=\"max-w-md pb-2\">{description}</p>\n          <ButtonLink\n            className={clsx(mediaAlign === 'full' ? 'text-background' : 'text-foreground')}\n            href={cta.href}\n            variant={mediaAlign === 'full' ? 'tertiary' : 'primary'}\n          >\n            {cta.label}\n          </ButtonLink>\n        </div>\n      </div>\n    </section>\n  );\n};\n"
      },
      "componentType": "section"
    },
    {
      "name": "featured-products-carousel",
      "dependencies": [
        "products-carousel"
      ],
      "registryDependencies": [],
      "files": [
        "sections/featured-products-carousel/index.tsx"
      ],
      "doc": "---\ntitle: Featured Products Carousel\npreview: featured-products-carousel-example\npreviewSize: lg\n---\n",
      "docFile": "/dev/vibes/soul/docs/featured-products-carousel.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/featured-products-carousel/index.tsx",
      "componentName": "FeaturedProductsCarousel",
      "source": {
        "sections/featured-products-carousel/index.tsx": "import { Streamable } from '@/vibes/soul/lib/streamable';\nimport { AnimatedLink } from '@/vibes/soul/primitives/animated-link';\nimport { CarouselProduct, ProductsCarousel } from '@/vibes/soul/primitives/products-carousel';\n\ninterface Link {\n  label: string;\n  href: string;\n}\n\ninterface Props {\n  title?: string;\n  description?: string;\n  cta?: Link;\n  products: Streamable<CarouselProduct[]>;\n  emptyStateTitle?: Streamable<string | null>;\n  emptyStateSubtitle?: Streamable<string | null>;\n  placeholderCount?: number;\n  scrollbarLabel?: string;\n  previousLabel?: string;\n  nextLabel?: string;\n}\n\nexport function FeaturedProductsCarousel({\n  title,\n  description,\n  cta,\n  products,\n  emptyStateTitle,\n  emptyStateSubtitle,\n  placeholderCount,\n  scrollbarLabel,\n  previousLabel,\n  nextLabel,\n}: Props) {\n  return (\n    <section className=\"group/pending overflow-hidden @container\">\n      <div className=\"mx-auto w-full max-w-screen-2xl px-4 py-10 @xl:px-6 @xl:py-14 @4xl:px-8 @4xl:py-20\">\n        <div className=\"mb-6 flex w-full flex-row flex-wrap items-end justify-between gap-x-8 gap-y-6 text-foreground @4xl:mb-8\">\n          <div>\n            <h2 className=\"font-heading text-2xl leading-none @xl:text-3xl @4xl:text-4xl\">\n              {title}\n            </h2>\n            {description != null && description !== '' && (\n              <p className=\"mt-3 max-w-xl leading-relaxed text-contrast-500\">{description}</p>\n            )}\n          </div>\n\n          {cta != null && cta.href !== '' && cta.label !== '' && (\n            <AnimatedLink className=\"mr-3\" label={cta.label} link={{ href: cta.href }} />\n          )}\n        </div>\n        <div className=\"group-has-[[data-pending]]/pending:animate-pulse\">\n          <ProductsCarousel\n            emptyStateSubtitle={emptyStateSubtitle}\n            emptyStateTitle={emptyStateTitle}\n            nextLabel={nextLabel}\n            placeholderCount={placeholderCount}\n            previousLabel={previousLabel}\n            products={products}\n            scrollbarLabel={scrollbarLabel}\n          />\n        </div>\n      </div>\n    </section>\n  );\n}\n"
      },
      "componentType": "section"
    },
    {
      "name": "featured-products-list",
      "dependencies": [
        "button",
        "product-card"
      ],
      "registryDependencies": [],
      "files": [
        "sections/featured-products-list/index.tsx"
      ],
      "doc": "---\ntitle: Featured Product List\npreview:\n  Electric: featured-products-list-electric-example\n  Warm: featured-products-list-warm-example\n  Luxury: featured-products-list-luxury-example\npreviewSize: lg\n---\n",
      "docFile": "/dev/vibes/soul/docs/featured-products-list.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/featured-products-list/index.tsx",
      "componentName": "FeaturedProductsList",
      "source": {
        "sections/featured-products-list/index.tsx": "import { Streamable } from '@/vibes/soul/lib/streamable';\nimport { ButtonLink } from '@/vibes/soul/primitives/button-link';\nimport { ListProduct, ProductsList } from '@/vibes/soul/primitives/products-list';\nimport { StickySidebarLayout } from '@/vibes/soul/sections/sticky-sidebar-layout';\n\ninterface Link {\n  label: string;\n  href: string;\n}\n\ninterface Props {\n  title: string;\n  description?: string;\n  cta?: Link;\n  products: Streamable<ListProduct[]>;\n  emptyStateTitle?: Streamable<string | null>;\n  emptyStateSubtitle?: Streamable<string | null>;\n  placeholderCount?: number;\n}\n\nexport function FeaturedProductsList({\n  title,\n  description,\n  cta,\n  products,\n  emptyStateTitle,\n  emptyStateSubtitle,\n  placeholderCount,\n}: Props) {\n  return (\n    <StickySidebarLayout\n      sidebar={\n        <>\n          <h2 className=\"mb-3 font-heading text-4xl font-medium leading-none text-foreground @4xl:text-5xl\">\n            {title}\n          </h2>\n          {description != null && description !== '' && (\n            <p className=\"mb-8 max-w-xl text-lg font-light leading-normal text-foreground\">\n              {description}\n            </p>\n          )}\n\n          {cta?.href != null && cta.href !== '' && cta.label !== '' && (\n            <ButtonLink href={cta.href} variant=\"secondary\">\n              {cta.label}\n            </ButtonLink>\n          )}\n        </>\n      }\n      sidebarSize=\"1/3\"\n    >\n      <div className=\"group-has-[[data-pending]]/pending:animate-pulse\">\n        <ProductsList\n          className=\"flex-1\"\n          emptyStateSubtitle={emptyStateSubtitle}\n          emptyStateTitle={emptyStateTitle}\n          placeholderCount={placeholderCount}\n          products={products}\n        />\n      </div>\n    </StickySidebarLayout>\n  );\n}\n"
      },
      "componentType": "section"
    },
    {
      "name": "featured-video",
      "dependencies": [
        "button"
      ],
      "registryDependencies": [
        "clsx"
      ],
      "files": [
        "sections/featured-video/index.tsx"
      ],
      "doc": "---\ntitle: Featured Video\npreview: featured-video-example\npreviewSize: lg\n---\n",
      "docFile": "/dev/vibes/soul/docs/featured-video.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/featured-video/index.tsx",
      "componentName": "FeaturedVideo",
      "source": {
        "sections/featured-video/index.tsx": "import { clsx } from 'clsx';\nimport Link from 'next/link';\n\nimport { Button } from '@/vibes/soul/primitives/button';\n\ninterface Props {\n  title: string;\n  description: string;\n  video: string;\n  cta: {\n    href: string;\n    label: string;\n  };\n  mediaAlign?: 'left' | 'right' | 'full';\n}\n\nexport const FeaturedVideo = function FeaturedVideo({\n  title,\n  description,\n  video,\n  cta,\n  mediaAlign = 'left',\n}: Props) {\n  return (\n    <section\n      className={clsx(\n        'relative bg-primary-shadow @container',\n        mediaAlign === 'full' && 'h-dvh max-h-[880px]',\n      )}\n    >\n      <div className=\"mx-auto flex h-full max-w-screen-2xl flex-col @3xl:flex-row\">\n        <video\n          autoPlay\n          className={clsx(\n            'w-full object-cover',\n            mediaAlign === 'full'\n              ? 'absolute inset-0 h-full'\n              : 'aspect-square @xl:aspect-[9/6] @3xl:h-dvh @3xl:max-h-[880px] @3xl:w-1/2 @5xl:w-3/5',\n            { '@3xl:order-2': mediaAlign === 'right' },\n          )}\n          loop\n          muted\n        >\n          <source src={video} type=\"video/mp4\" />\n        </video>\n        <div\n          className={clsx(\n            'z-10 mx-auto flex flex-col items-start gap-4 px-3 py-10 text-background @5xl:p-20',\n            mediaAlign === 'full'\n              ? 'mx-auto mt-auto w-full max-w-screen-2xl px-3 @xl:px-6 @5xl:px-20'\n              : 'w-full justify-end @xl:px-6 @3xl:w-1/2 @5xl:w-2/5',\n            { '@3xl:order-1': mediaAlign === 'right' },\n          )}\n        >\n          <h1 className=\"max-w-xl text-4xl font-medium leading-none @xl:text-5xl\">{title}</h1>\n          <p className=\"max-w-md pb-2\">{description}</p>\n          <Button\n            className={clsx(mediaAlign === 'full' ? 'text-background' : 'text-foreground')}\n            variant={mediaAlign === 'full' ? 'tertiary' : 'primary'}\n          >\n            <Link href={cta.href}>{cta.label}</Link>\n          </Button>\n        </div>\n      </div>\n    </section>\n  );\n};\n"
      },
      "componentType": "section"
    },
    {
      "name": "footer",
      "dependencies": [],
      "registryDependencies": [
        "clsx"
      ],
      "files": [
        "sections/footer/index.tsx"
      ],
      "doc": "---\ntitle: Footer\npreview:\n  Electric: footer-electric-example\n  Warm: footer-warm-example\n  Luxury: footer-luxury-example\npreviewSize: lg\n---\n",
      "docFile": "/dev/vibes/soul/docs/footer.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/footer/index.tsx",
      "componentName": "Footer",
      "source": {
        "sections/footer/index.tsx": "import { clsx } from 'clsx';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { forwardRef, ReactNode, type Ref } from 'react';\n\nimport { Stream, Streamable } from '@/vibes/soul/lib/streamable';\nimport { Logo } from '@/vibes/soul/primitives/logo';\n\ninterface Image {\n  src: string;\n  alt: string;\n}\n\ninterface Link {\n  href: string;\n  label: string;\n}\n\nexport interface Section {\n  title?: string;\n  links: Link[];\n}\n\ninterface SocialMediaLink {\n  href: string;\n  icon: ReactNode;\n}\n\ninterface ContactInformation {\n  address?: string;\n  phone?: string;\n}\n\ninterface Props {\n  logo?: Streamable<string | Image | null>;\n  sections: Streamable<Section[]>;\n  copyright?: Streamable<string | null>;\n  contactInformation?: Streamable<ContactInformation | null>;\n  paymentIcons?: Streamable<ReactNode[] | null>;\n  socialMediaLinks?: Streamable<SocialMediaLink[] | null>;\n  contactTitle?: string;\n  className?: string;\n  logoHref?: string;\n  logoLabel?: string;\n  logoWidth?: number;\n}\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n * :root {\n *   --footer-focus: hsl(var(--primary));\n *   --footer-background: hsl(var(--background));\n *   --footer-border-top: hsl(var(--contrast-100));\n *   --footer-border-bottom: hsl(var(--primary));\n *   --footer-contact-title: hsl(var(--contrast-300));\n *   --footer-contact-text: hsl(var(--foreground));\n *   --footer-social-icon: hsl(var(--contrast-400));\n *   --footer-social-icon-hover: hsl(var(--foreground));\n *   --footer-section-title: hsl(var(--foreground));\n *   --footer-link: hsl(var(--contrast-400));\n *   --footer-link-hover: hsl(var(--foreground));\n *   --footer-copyright: hsl(var(--contrast-400));\n * }\n * ```\n */\nexport const Footer = forwardRef(function Footer(\n  {\n    logo,\n    sections: streamableSections,\n    contactTitle = 'Contact Us',\n    contactInformation: streamableContactInformation,\n    paymentIcons: streamablePaymentIcons,\n    socialMediaLinks: streamableSocialMediaLinks,\n    copyright: streamableCopyright,\n    className,\n    logoHref = '#',\n    logoLabel = 'Home',\n    logoWidth = 200,\n  }: Props,\n  ref: Ref<HTMLDivElement>,\n) {\n  return (\n    <footer\n      className={clsx(\n        'border-b-4 border-t border-b-[var(--footer-border-bottom,hsl(var(--primary)))] border-t-[var(--footer-border-top,hsl(var(--contrast-100)))] bg-[var(--footer-background,hsl(var(--background)))] @container',\n        className,\n      )}\n      ref={ref}\n    >\n      <div className=\"mx-auto max-w-screen-2xl px-4 py-6 @xl:px-6 @xl:py-10 @4xl:px-8 @4xl:py-12\">\n        <div className=\"flex flex-col justify-between gap-x-8 gap-y-12 @3xl:flex-row\">\n          <div className=\"@3xl:w-1/3\">\n            {/* Logo Information */}\n            <Logo href={logoHref} label={logoLabel} logo={logo} width={logoWidth} />\n\n            {/* Contact Information */}\n            <Stream\n              fallback={\n                <div className=\"animate-pulse text-lg @lg:text-xl\">\n                  <div className=\"flex h-[1lh] items-center\">\n                    <span className=\"h-[1ex] w-[10ch] rounded bg-contrast-100\" />\n                  </div>\n                  <div className=\"flex h-[1lh] items-center\">\n                    <span className=\"h-[1ex] w-[15ch] rounded bg-contrast-100\" />\n                  </div>\n                  <div className=\"flex h-[1lh] items-center\">\n                    <span className=\"h-[1ex] w-[12ch] rounded bg-contrast-100\" />\n                  </div>\n                </div>\n              }\n              value={streamableContactInformation}\n            >\n              {(contactInformation) => {\n                if (contactInformation?.address != null || contactInformation?.phone != null) {\n                  return (\n                    <div className=\"text-lg font-medium @lg:text-xl\">\n                      <h3 className=\"text-[var(--footer-contact-title,hsl(var(--contrast-300)))]\">\n                        {contactTitle}\n                      </h3>\n                      <div className=\"text-[var(--footer-contact-text,hsl(var(--foreground)))]\">\n                        {contactInformation.address != null &&\n                          contactInformation.address !== '' && <p>{contactInformation.address}</p>}\n                        {contactInformation.phone != null && contactInformation.phone !== '' && (\n                          <p>{contactInformation.phone}</p>\n                        )}\n                      </div>\n                    </div>\n                  );\n                }\n              }}\n            </Stream>\n\n            {/* Social Media Links */}\n            <Stream\n              fallback={\n                <div className=\"flex animate-pulse items-center gap-3 pt-8 @3xl:pt-10\">\n                  <div className=\"h-8 w-8 rounded-full bg-contrast-100\" />\n                  <div className=\"h-8 w-8 rounded-full bg-contrast-100\" />\n                  <div className=\"h-8 w-8 rounded-full bg-contrast-100\" />\n                  <div className=\"h-8 w-8 rounded-full bg-contrast-100\" />\n                </div>\n              }\n              value={streamableSocialMediaLinks}\n            >\n              {(socialMediaLinks) => {\n                if (socialMediaLinks != null) {\n                  return (\n                    <div className=\"flex items-center gap-3 pt-8 @3xl:pt-10\">\n                      {socialMediaLinks.map(({ href, icon }, i) => {\n                        return (\n                          <Link\n                            className=\"flex items-center justify-center rounded-lg fill-[var(--footer-social-icon,hsl(var(--contrast-400)))] p-1 ring-[var(--footer-focus,hsl(var(--primary)))] transition-colors duration-300 ease-out hover:fill-[var(--footer-social-icon-hover,hsl(var(--foreground)))] focus-visible:outline-0 focus-visible:ring-2\"\n                            href={href}\n                            key={i}\n                          >\n                            {icon}\n                          </Link>\n                        );\n                      })}\n                    </div>\n                  );\n                }\n              }}\n            </Stream>\n          </div>\n\n          {/* Footer Columns of Links */}\n          <Stream\n            fallback={\n              <div className=\"grid w-full flex-1 animate-pulse gap-y-8 [grid-template-columns:_repeat(auto-fill,_minmax(200px,_1fr))] @xl:gap-y-10\">\n                <div className=\"pr-8\">\n                  <div className=\"mb-3 flex h-[1lh] items-center\">\n                    <span className=\"h-[1ex] w-[10ch] rounded bg-contrast-100\" />\n                  </div>\n\n                  <ul>\n                    <li className=\"py-2 text-sm\">\n                      <div className=\"flex h-[1lh] items-center text-sm\">\n                        <span className=\"h-[1ex] w-[10ch] rounded-sm bg-contrast-100\" />\n                      </div>\n                    </li>\n                    <li className=\"py-2 text-sm\">\n                      <div className=\"flex h-[1lh] items-center text-sm\">\n                        <span className=\"h-[1ex] w-[10ch] rounded-sm bg-contrast-100\" />\n                      </div>\n                    </li>\n                    <li className=\"py-2 text-sm\">\n                      <div className=\"flex h-[1lh] items-center text-sm\">\n                        <span className=\"h-[1ex] w-[10ch] rounded-sm bg-contrast-100\" />\n                      </div>\n                    </li>\n                    <li className=\"py-2 text-sm\">\n                      <div className=\"flex h-[1lh] items-center text-sm\">\n                        <span className=\"h-[1ex] w-[10ch] rounded-sm bg-contrast-100\" />\n                      </div>\n                    </li>\n                  </ul>\n                </div>\n\n                <div className=\"pr-8\">\n                  <div className=\"mb-3 flex h-[1lh] items-center\">\n                    <span className=\"h-[1ex] w-[10ch] rounded bg-contrast-100\" />\n                  </div>\n\n                  <ul>\n                    <li className=\"py-2 text-sm\">\n                      <div className=\"flex h-[1lh] items-center text-sm\">\n                        <span className=\"h-[1ex] w-[10ch] rounded-sm bg-contrast-100\" />\n                      </div>\n                    </li>\n                    <li className=\"py-2 text-sm\">\n                      <div className=\"flex h-[1lh] items-center text-sm\">\n                        <span className=\"h-[1ex] w-[10ch] rounded-sm bg-contrast-100\" />\n                      </div>\n                    </li>\n                    <li className=\"py-2 text-sm\">\n                      <div className=\"flex h-[1lh] items-center text-sm\">\n                        <span className=\"h-[1ex] w-[10ch] rounded-sm bg-contrast-100\" />\n                      </div>\n                    </li>\n                    <li className=\"py-2 text-sm\">\n                      <div className=\"flex h-[1lh] items-center text-sm\">\n                        <span className=\"h-[1ex] w-[10ch] rounded-sm bg-contrast-100\" />\n                      </div>\n                    </li>\n                  </ul>\n                </div>\n\n                <div className=\"pr-8\">\n                  <div className=\"mb-3 flex h-[1lh] items-center\">\n                    <span className=\"h-[1ex] w-[10ch] rounded bg-contrast-100\" />\n                  </div>\n\n                  <ul>\n                    <li className=\"py-2 text-sm\">\n                      <div className=\"flex h-[1lh] items-center text-sm\">\n                        <span className=\"h-[1ex] w-[10ch] rounded-sm bg-contrast-100\" />\n                      </div>\n                    </li>\n                    <li className=\"py-2 text-sm\">\n                      <div className=\"flex h-[1lh] items-center text-sm\">\n                        <span className=\"h-[1ex] w-[10ch] rounded-sm bg-contrast-100\" />\n                      </div>\n                    </li>\n                    <li className=\"py-2 text-sm\">\n                      <div className=\"flex h-[1lh] items-center text-sm\">\n                        <span className=\"h-[1ex] w-[10ch] rounded-sm bg-contrast-100\" />\n                      </div>\n                    </li>\n                    <li className=\"py-2 text-sm\">\n                      <div className=\"flex h-[1lh] items-center text-sm\">\n                        <span className=\"h-[1ex] w-[10ch] rounded-sm bg-contrast-100\" />\n                      </div>\n                    </li>\n                  </ul>\n                </div>\n\n                <div className=\"pr-8\">\n                  <div className=\"mb-3 flex h-[1lh] items-center\">\n                    <span className=\"h-[1ex] w-[10ch] rounded bg-contrast-100\" />\n                  </div>\n\n                  <ul>\n                    <li className=\"py-2 text-sm\">\n                      <div className=\"flex h-[1lh] items-center text-sm\">\n                        <span className=\"h-[1ex] w-[10ch] rounded-sm bg-contrast-100\" />\n                      </div>\n                    </li>\n                    <li className=\"py-2 text-sm\">\n                      <div className=\"flex h-[1lh] items-center text-sm\">\n                        <span className=\"h-[1ex] w-[10ch] rounded-sm bg-contrast-100\" />\n                      </div>\n                    </li>\n                    <li className=\"py-2 text-sm\">\n                      <div className=\"flex h-[1lh] items-center text-sm\">\n                        <span className=\"h-[1ex] w-[10ch] rounded-sm bg-contrast-100\" />\n                      </div>\n                    </li>\n                    <li className=\"py-2 text-sm\">\n                      <div className=\"flex h-[1lh] items-center text-sm\">\n                        <span className=\"h-[1ex] w-[10ch] rounded-sm bg-contrast-100\" />\n                      </div>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            }\n            value={streamableSections}\n          >\n            {(sections) => {\n              if (sections.length > 0) {\n                return (\n                  <div className=\"grid w-full flex-1 gap-y-8 [grid-template-columns:_repeat(auto-fill,_minmax(200px,_1fr))] @xl:gap-y-10\">\n                    {sections.map(({ title, links }, i) => (\n                      <div className=\"pr-8\" key={i}>\n                        {title != null && (\n                          <span className=\"mb-3 block font-semibold text-[var(--footer-section-title,hsl(var(--foreground)))]\">\n                            {title}\n                          </span>\n                        )}\n\n                        <ul>\n                          {links.map((link, idx) => {\n                            return (\n                              <li key={idx}>\n                                <Link\n                                  className=\"block rounded-lg py-2 text-sm font-medium text-[var(--footer-link,hsl(var(--contrast-400)))] ring-[var(--footer-focus,hsl(var(--primary)))] transition-colors duration-300 hover:text-[var(--footer-link-hover,hsl(var(--foreground)))] focus-visible:outline-0 focus-visible:ring-2\"\n                                  href={link.href}\n                                >\n                                  {link.label}\n                                </Link>\n                              </li>\n                            );\n                          })}\n                        </ul>\n                      </div>\n                    ))}\n                  </div>\n                );\n              }\n            }}\n          </Stream>\n        </div>\n\n        <div className=\"flex flex-col-reverse items-start gap-y-8 pt-16 @3xl:flex-row @3xl:items-center @3xl:pt-20\">\n          {/* Copyright */}\n          <Stream\n            fallback={\n              <div className=\"flex h-[1lh] flex-1 animate-pulse items-center text-sm\">\n                <span className=\"h-[1ex] w-[40ch] rounded-sm bg-contrast-100\" />\n              </div>\n            }\n            value={streamableCopyright}\n          >\n            {(copyright) => {\n              if (copyright != null) {\n                return (\n                  <p className=\"flex-1 text-sm text-[var(--footer-copyright,hsl(var(--contrast-400)))]\">\n                    {copyright}\n                  </p>\n                );\n              }\n            }}\n          </Stream>\n\n          {/* Payment Icons */}\n          <Stream\n            fallback={\n              <div className=\"flex animate-pulse flex-wrap gap-2\">\n                <div className=\"h-6 w-[2.1875rem] rounded bg-contrast-100\" />\n                <div className=\"h-6 w-[2.1875rem] rounded bg-contrast-100\" />\n                <div className=\"h-6 w-[2.1875rem] rounded bg-contrast-100\" />\n                <div className=\"h-6 w-[2.1875rem] rounded bg-contrast-100\" />\n                <div className=\"h-6 w-[2.1875rem] rounded bg-contrast-100\" />\n                <div className=\"h-6 w-[2.1875rem] rounded bg-contrast-100\" />\n              </div>\n            }\n            value={streamablePaymentIcons}\n          >\n            {(paymentIcons) => {\n              if (paymentIcons != null) {\n                return <div className=\"flex flex-wrap gap-2\">{paymentIcons}</div>;\n              }\n            }}\n          </Stream>\n        </div>\n      </div>\n    </footer>\n  );\n});\n",
        "sections/footer/payment-icons.tsx": "export const Amex = function Amex() {\n  return (\n    <svg fill=\"none\" height=\"24\" viewBox=\"0 0 35 24\" width=\"35\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect fill=\"#1F72CD\" height=\"23\" rx=\"3.5\" stroke=\"#D9D9D9\" width=\"34\" x=\"0.5\" y=\"0.5\" />\n      <path\n        clipRule=\"evenodd\"\n        d=\"M6.68111 8.5L3.5 15.7467H7.30824L7.78035 14.5913H8.85949L9.3316 15.7467H13.5234V14.8649L13.8969 15.7467H16.0652L16.4387 14.8462V15.7467H25.1566L26.2166 14.6213L27.2092 15.7467L31.6868 15.7561L28.4957 12.1436L31.6868 8.5H27.2786L26.2467 9.60463L25.2854 8.5H15.8016L14.9872 10.3704L14.1537 8.5H10.3534V9.35186L9.93068 8.5H6.68111ZM19.6994 9.52905H24.7055L26.2367 11.2316L27.8172 9.52905H29.3484L27.0219 12.1426L29.3484 14.726H27.7477L26.2166 13.0036L24.628 14.726H19.6994V9.52905ZM20.9356 11.555V10.6057V10.6048H24.0593L25.4223 12.1229L23.9989 13.6493H20.9356V12.613H23.6667V11.555H20.9356ZM7.41799 9.52905H9.2743L11.3843 14.4431V9.52905H13.4178L15.0476 13.0524L16.5496 9.52905H18.573V14.7291H17.3418L17.3317 10.6544L15.5368 14.7291H14.4355L12.6305 10.6544V14.7291H10.0977L9.61756 13.5633H7.02338L6.54421 14.728H5.18717L7.41799 9.52905ZM7.46634 12.4856L8.32101 10.4089L9.1747 12.4856H7.46634Z\"\n        fill=\"white\"\n        fillRule=\"evenodd\"\n      />\n    </svg>\n  );\n};\n\nexport const ApplePay = function ApplePay() {\n  return (\n    <svg fill=\"none\" height=\"24\" viewBox=\"0 0 35 24\" width=\"35\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect fill=\"white\" height=\"23\" rx=\"3.5\" stroke=\"#D9D9D9\" width=\"34\" x=\"0.5\" y=\"0.5\" />\n      <path\n        clipRule=\"evenodd\"\n        d=\"M8.3462 8.93296C8.81624 8.97261 9.28628 8.69506 9.58006 8.34316C9.86894 7.98135 10.0599 7.49563 10.0109 7C9.59475 7.01983 9.08064 7.27755 8.78686 7.63936C8.51757 7.95161 8.28745 8.45715 8.3462 8.93296ZM13.9377 15.3167V7.58981H16.8021C18.2807 7.58981 19.3138 8.62072 19.3138 10.1274C19.3138 11.6342 18.2611 12.675 16.7629 12.675H15.1226V15.3167H13.9377ZM10.006 9.02714C9.5919 9.00301 9.21406 9.1532 8.90886 9.27451C8.71246 9.35257 8.54614 9.41868 8.41961 9.41868C8.27762 9.41868 8.10444 9.34904 7.90999 9.27085C7.65521 9.16839 7.36392 9.05125 7.05845 9.05687C6.35829 9.06679 5.70709 9.46825 5.34966 10.1076C4.61522 11.3863 5.1587 13.2796 5.86866 14.3205C6.2163 14.8359 6.63248 15.4009 7.18086 15.3811C7.42211 15.3719 7.59566 15.2974 7.77526 15.2202C7.98203 15.1314 8.19683 15.0391 8.53223 15.0391C8.85599 15.0391 9.0614 15.129 9.25858 15.2152C9.44606 15.2973 9.62611 15.376 9.89339 15.3712C10.4614 15.3613 10.8188 14.8557 11.1664 14.3403C11.5416 13.7871 11.7064 13.2471 11.7314 13.1652L11.7344 13.1557C11.7338 13.1551 11.7291 13.153 11.721 13.1492C11.5956 13.0911 10.637 12.6469 10.6278 11.4557C10.6186 10.4559 11.3881 9.94937 11.5093 9.86963L11.5093 9.86962C11.5166 9.86477 11.5216 9.8615 11.5238 9.85979C11.0342 9.12626 10.2704 9.04696 10.006 9.02714ZM21.478 15.3761C22.2223 15.3761 22.9126 14.9945 23.226 14.3898H23.2505V15.3166H24.3472V11.4706C24.3472 10.3554 23.4659 9.63672 22.1096 9.63672C20.8513 9.63672 19.921 10.3653 19.8867 11.3665H20.9541C21.0423 10.8907 21.478 10.5784 22.0754 10.5784C22.8 10.5784 23.2064 10.9204 23.2064 11.5499V11.9761L21.7277 12.0653C20.3519 12.1496 19.6077 12.7195 19.6077 13.7108C19.6077 14.712 20.3764 15.3761 21.478 15.3761ZM21.7962 14.4592C21.1646 14.4592 20.7631 14.1519 20.7631 13.6811C20.7631 13.1954 21.1499 12.9129 21.8893 12.8683L23.2063 12.784V13.2202C23.2063 13.9438 22.5992 14.4592 21.7962 14.4592ZM27.9851 15.619C27.5102 16.9721 26.9667 17.4181 25.8112 17.4181C25.7231 17.4181 25.4293 17.4082 25.3607 17.3884V16.4616C25.4342 16.4715 25.6153 16.4814 25.7084 16.4814C26.2323 16.4814 26.526 16.2584 26.7072 15.6785L26.8149 15.3365L24.8075 9.71108H26.0462L27.4416 14.2758H27.4661L28.8616 9.71108H30.066L27.9851 15.619ZM15.1225 8.60087H16.4886C17.5168 8.60087 18.1044 9.15598 18.1044 10.1324C18.1044 11.1088 17.5168 11.6688 16.4837 11.6688H15.1225V8.60087Z\"\n        fill=\"black\"\n        fillRule=\"evenodd\"\n      />\n    </svg>\n  );\n};\n\nexport const Bitcoin = function Bitcoin() {\n  return (\n    <svg fill=\"none\" height=\"24\" viewBox=\"0 0 35 24\" width=\"35\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect fill=\"white\" height=\"23\" rx=\"3.5\" stroke=\"#D9D9D9\" width=\"34\" x=\"0.5\" y=\"0.5\" />\n      <path\n        clipRule=\"evenodd\"\n        d=\"M25.6269 12.0646C25.6269 16.5185 22.0165 20.1292 17.5627 20.1292C13.109 20.1292 9.49854 16.5185 9.49854 12.0646C9.49854 7.61064 13.109 4 17.5627 4C22.0165 4 25.6269 7.61064 25.6269 12.0646ZM19.5001 9.06828C20.6219 9.45351 21.4424 10.0303 21.2815 11.1038C21.1645 11.8899 20.7272 12.2701 20.146 12.4032C20.9433 12.8167 21.215 13.6014 20.9626 14.5502C20.4832 15.9157 19.3437 16.0306 17.8281 15.7452L17.4601 17.213L16.5717 16.9922L16.9346 15.5441C16.7043 15.4871 16.4689 15.4261 16.2265 15.361L15.862 16.8162L14.9746 16.5954L15.3421 15.1245L13.5527 14.6748L13.9941 13.6613C13.9941 13.6613 14.6491 13.8342 14.64 13.8216C14.8916 13.8836 15.0035 13.7203 15.0475 13.6119L16.0447 9.62797C16.0559 9.43989 15.9906 9.20291 15.6307 9.11316C15.6443 9.10358 14.9852 8.95332 14.9852 8.95332L15.2216 8.00789L17.0136 8.4501L17.3781 6.99591L18.266 7.21676L17.9091 8.64221C18.148 8.69616 18.388 8.75112 18.6213 8.80911L18.9757 7.39274L19.8641 7.61359L19.5001 9.06828ZM17.3744 11.4941C17.9796 11.6545 19.2964 12.0037 19.5259 11.0882C19.7601 10.1516 18.4807 9.86878 17.8543 9.73028L17.8543 9.73027C17.7833 9.71457 17.7207 9.70074 17.6697 9.68801L17.2272 11.4558C17.2694 11.4662 17.3189 11.4794 17.3744 11.4941ZM16.6887 14.3404C17.4136 14.5313 18.9988 14.9489 19.251 13.9402C19.5092 12.9088 17.9722 12.5652 17.2223 12.3976C17.1385 12.3789 17.0645 12.3624 17.004 12.3473L16.516 14.2956C16.5656 14.3079 16.6236 14.3232 16.6886 14.3403L16.6887 14.3404Z\"\n        fill=\"#F7931A\"\n        fillRule=\"evenodd\"\n      />\n    </svg>\n  );\n};\n\nexport const GooglePay = function GooglePay() {\n  return (\n    <svg fill=\"none\" height=\"24\" viewBox=\"0 0 35 24\" width=\"35\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect fill=\"white\" height=\"23\" rx=\"3.5\" stroke=\"#D9D9D9\" width=\"34\" x=\"0.5\" y=\"0.5\" />\n      <path\n        clipRule=\"evenodd\"\n        d=\"M16.5301 15.7585V12.7375H18.0893C18.7282 12.7375 19.2675 12.5234 19.7071 12.1012L19.8126 11.9942C20.6156 11.12 20.5629 9.75817 19.7071 8.94941C19.2792 8.52125 18.6931 8.28932 18.0893 8.30122H15.5864V15.7585H16.5301ZM16.5303 11.8217V9.21703H18.1131C18.4531 9.21703 18.7756 9.34786 19.0159 9.58573C19.526 10.0853 19.5377 10.9178 19.0453 11.4352C18.8049 11.6909 18.4649 11.8336 18.1131 11.8217H16.5303ZM24.2147 11.0546C23.8102 10.6799 23.2592 10.4896 22.5617 10.4896C21.6649 10.4896 20.9908 10.8227 20.5453 11.4827L21.3777 12.012C21.6825 11.5601 22.0987 11.3341 22.6262 11.3341C22.9603 11.3341 23.2827 11.459 23.5347 11.6849C23.7809 11.899 23.9216 12.2083 23.9216 12.5353V12.7554C23.5582 12.5532 23.101 12.4461 22.5383 12.4461C21.8818 12.4461 21.3542 12.6007 20.9615 12.9159C20.5688 13.2311 20.3695 13.6474 20.3695 14.1766C20.3578 14.6583 20.5629 15.1162 20.9263 15.4254C21.2956 15.7585 21.7645 15.925 22.3155 15.925C22.9662 15.925 23.482 15.6336 23.8747 15.0508H23.9157V15.7585H24.8184V12.6126C24.8184 11.9525 24.6191 11.4292 24.2147 11.0546ZM21.6533 14.8189C21.4599 14.6761 21.3426 14.4442 21.3426 14.1944C21.3426 13.9149 21.4716 13.683 21.7237 13.4987C21.9816 13.3143 22.3041 13.2192 22.6851 13.2192C23.2128 13.2132 23.6231 13.3322 23.9163 13.57C23.9163 13.9744 23.758 14.3253 23.4473 14.6226C23.1659 14.9081 22.7848 15.0686 22.3862 15.0686C22.1223 15.0746 21.8644 14.9854 21.6533 14.8189ZM26.8465 18.0004L30 10.6562H28.9743L27.5147 14.3194H27.4972L26.0025 10.6562H24.9767L27.0458 15.4314L25.8735 18.0004H26.8465Z\"\n        fill=\"#3C4043\"\n        fillRule=\"evenodd\"\n      />\n      <path\n        d=\"M13.272 12.0831C13.272 11.7917 13.2486 11.5003 13.2017 11.2148H9.22168V12.8621H11.5018C11.408 13.3914 11.1032 13.8671 10.6578 14.1644V15.2349H12.0176C12.8148 14.4915 13.272 13.3914 13.272 12.0831Z\"\n        fill=\"#4285F4\"\n      />\n      <path\n        d=\"M9.22211 16.2696C10.3592 16.2696 11.3205 15.889 12.0181 15.2349L10.6582 14.1645C10.2772 14.4261 9.79068 14.5748 9.22211 14.5748C8.12013 14.5748 7.18815 13.8195 6.85404 12.8086H5.45312V13.9147C6.16824 15.3598 7.62776 16.2696 9.22211 16.2696Z\"\n        fill=\"#34A853\"\n      />\n      <path\n        d=\"M6.85401 12.8088C6.67814 12.2796 6.67814 11.7027 6.85401 11.1675V10.0674H5.45288C4.84904 11.2746 4.84904 12.7018 5.45288 13.909L6.85401 12.8088Z\"\n        fill=\"#FBBC04\"\n      />\n      <path\n        d=\"M9.22211 9.40114C9.82585 9.38925 10.4061 9.62117 10.8399 10.0434L12.0474 8.81836C11.2795 8.09285 10.2713 7.69442 9.22211 7.70631C7.62776 7.70631 6.16824 8.62211 5.45312 10.0672L6.85404 11.1733C7.18815 10.1564 8.12013 9.40114 9.22211 9.40114Z\"\n        fill=\"#EA4335\"\n      />\n    </svg>\n  );\n};\n\nexport const Mastercard = function Mastercard() {\n  return (\n    <svg fill=\"none\" height=\"24\" viewBox=\"0 0 35 24\" width=\"35\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect fill=\"white\" height=\"23\" rx=\"3.5\" stroke=\"#D9D9D9\" width=\"34\" x=\"0.5\" y=\"0.5\" />\n      <path\n        clipRule=\"evenodd\"\n        d=\"M17.75 17.1569C16.5584 18.1852 15.0128 18.806 13.3238 18.806C9.55511 18.806 6.5 15.7154 6.5 11.903C6.5 8.09057 9.55511 5 13.3238 5C15.0128 5 16.5584 5.62075 17.75 6.64903C18.9416 5.62075 20.4872 5 22.1762 5C25.9449 5 29 8.09057 29 11.903C29 15.7154 25.9449 18.806 22.1762 18.806C20.4872 18.806 18.9416 18.1852 17.75 17.1569Z\"\n        fill=\"#ED0006\"\n        fillRule=\"evenodd\"\n      />\n      <path\n        clipRule=\"evenodd\"\n        d=\"M17.75 17.1569C19.2172 15.8908 20.1475 14.0068 20.1475 11.903C20.1475 9.79917 19.2172 7.91517 17.75 6.64903C18.9416 5.62075 20.4872 5 22.1762 5C25.9449 5 29 8.09057 29 11.903C29 15.7154 25.9449 18.806 22.1762 18.806C20.4872 18.806 18.9416 18.1852 17.75 17.1569Z\"\n        fill=\"#F9A000\"\n        fillRule=\"evenodd\"\n      />\n      <path\n        clipRule=\"evenodd\"\n        d=\"M17.75 6.64941C19.2172 7.91555 20.1476 9.79954 20.1476 11.9033C20.1476 14.0071 19.2172 15.8911 17.75 17.1573C16.2829 15.8911 15.3525 14.0071 15.3525 11.9033C15.3525 9.79954 16.2829 7.91555 17.75 6.64941Z\"\n        fill=\"#FF5E00\"\n        fillRule=\"evenodd\"\n      />\n    </svg>\n  );\n};\n\nexport const Paypal = function Paypal() {\n  return (\n    <svg fill=\"none\" height=\"24\" viewBox=\"0 0 35 24\" width=\"35\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect fill=\"white\" height=\"23\" rx=\"3.5\" stroke=\"#D9D9D9\" width=\"34\" x=\"0.5\" y=\"0.5\" />\n      <path\n        clipRule=\"evenodd\"\n        d=\"M9.90001 15.2412H8.34439C8.23794 15.2412 8.1474 15.3186 8.1308 15.4236L7.50163 19.4127C7.48913 19.4914 7.55009 19.5624 7.62993 19.5624H8.37259C8.47905 19.5624 8.56958 19.485 8.58618 19.3797L8.75588 18.3038C8.77225 18.1985 8.863 18.1212 8.96924 18.1212H9.46169C10.4864 18.1212 11.0778 17.6253 11.2323 16.6427C11.3019 16.2128 11.2353 15.875 11.0339 15.6384C10.8129 15.3787 10.4206 15.2412 9.90001 15.2412ZM10.0795 16.6982C9.99443 17.2564 9.56792 17.2564 9.15553 17.2564H8.92078L9.08547 16.2138C9.09525 16.1509 9.14984 16.1045 9.21353 16.1045H9.32112C9.60204 16.1045 9.86706 16.1045 10.004 16.2646C10.0856 16.3602 10.1106 16.5021 10.0795 16.6982ZM14.5501 16.6803H13.8052C13.7417 16.6803 13.6869 16.7267 13.6771 16.7897L13.6441 16.9981L13.592 16.9226C13.4308 16.6885 13.0712 16.6103 12.7122 16.6103C11.889 16.6103 11.1859 17.2337 11.049 18.1084C10.9778 18.5446 11.079 18.9617 11.3264 19.2527C11.5535 19.5202 11.8783 19.6316 12.2647 19.6316C12.928 19.6316 13.2959 19.2051 13.2959 19.2051L13.2626 19.4122C13.2501 19.4913 13.3111 19.5623 13.3904 19.5623H14.0615C14.1682 19.5623 14.2582 19.4849 14.2751 19.3796L14.6777 16.83C14.6904 16.7515 14.6297 16.6803 14.5501 16.6803ZM13.5117 18.1302C13.4398 18.5557 13.102 18.8414 12.6713 18.8414C12.455 18.8414 12.282 18.7721 12.1711 18.6406C12.061 18.5101 12.0191 18.3242 12.0541 18.1172C12.1213 17.6952 12.4647 17.4003 12.889 17.4003C13.1004 17.4003 13.2724 17.4705 13.3857 17.6031C13.4992 17.7371 13.5442 17.9241 13.5117 18.1302ZM17.769 16.6802H18.5176C18.6224 16.6802 18.6836 16.7977 18.624 16.8837L16.1342 20.4776C16.0939 20.5359 16.0275 20.5705 15.9565 20.5705H15.2089C15.1036 20.5705 15.0421 20.452 15.1031 20.3657L15.8783 19.2714L15.0538 16.8516C15.0253 16.7675 15.0874 16.6802 15.1769 16.6802H15.9124C16.008 16.6802 16.0923 16.7429 16.1199 16.8344L16.5575 18.2958L17.59 16.775C17.6304 16.7156 17.6976 16.6802 17.769 16.6802Z\"\n        fill=\"#253B80\"\n        fillRule=\"evenodd\"\n      />\n      <path\n        clipRule=\"evenodd\"\n        d=\"M25.8856 19.4129L26.5241 15.3509C26.5338 15.2878 26.5885 15.2414 26.652 15.2412H27.3707C27.4501 15.2412 27.511 15.3124 27.4985 15.3911L26.8689 19.38C26.8525 19.4852 26.762 19.5626 26.6553 19.5626H26.0134C25.9341 19.5626 25.8731 19.4916 25.8856 19.4129ZM20.9963 15.2414H19.4404C19.3341 15.2414 19.2436 15.3188 19.227 15.4238L18.5978 19.4129C18.5853 19.4916 18.6463 19.5626 18.7257 19.5626H19.524C19.5983 19.5626 19.6617 19.5085 19.6733 19.4348L19.8518 18.3041C19.8683 18.1987 19.959 18.1214 20.0652 18.1214H20.5574C21.5824 18.1214 22.1736 17.6255 22.3283 16.6429C22.398 16.213 22.331 15.8752 22.1297 15.6386C21.9088 15.3789 21.5169 15.2414 20.9963 15.2414ZM21.1757 16.6984C21.0909 17.2566 20.6644 17.2566 20.2517 17.2566H20.0172L20.1821 16.2141C20.1919 16.1511 20.246 16.1047 20.3099 16.1047H20.4175C20.6983 16.1047 20.9635 16.1047 21.1004 16.2648C21.182 16.3604 21.2069 16.5023 21.1757 16.6984ZM25.646 16.6805H24.9015C24.8375 16.6805 24.7832 16.7269 24.7736 16.79L24.7407 16.9983L24.6884 16.9228C24.5271 16.6887 24.1677 16.6105 23.8088 16.6105C22.9855 16.6105 22.2827 17.234 22.1457 18.1086C22.0748 18.5448 22.1755 18.962 22.423 19.2529C22.6505 19.5204 22.9749 19.6319 23.3613 19.6319C24.0246 19.6319 24.3924 19.2053 24.3924 19.2053L24.3592 19.4124C24.3467 19.4915 24.4076 19.5625 24.4875 19.5625H25.1583C25.2645 19.5625 25.355 19.4851 25.3716 19.3799L25.7745 16.8302C25.7868 16.7517 25.7258 16.6805 25.646 16.6805ZM24.6076 18.1304C24.5362 18.556 24.1979 18.8416 23.7671 18.8416C23.5512 18.8416 23.3779 18.7723 23.2669 18.6408C23.1568 18.5103 23.1154 18.3244 23.15 18.1174C23.2175 17.6954 23.5606 17.4005 23.9848 17.4005C24.1964 17.4005 24.3683 17.4707 24.4816 17.6033C24.5955 17.7373 24.6406 17.9243 24.6076 18.1304Z\"\n        fill=\"#179BD7\"\n        fillRule=\"evenodd\"\n      />\n      <path\n        d=\"M15.6571 13.8138L15.8484 12.5991L15.4224 12.5892H13.3882L14.8019 3.62534C14.8062 3.59828 14.8205 3.57305 14.8413 3.55513C14.8622 3.53722 14.8889 3.52734 14.9167 3.52734H18.3467C19.4855 3.52734 20.2713 3.7643 20.6816 4.232C20.8739 4.45141 20.9964 4.68068 21.0557 4.933C21.1178 5.19776 21.1189 5.51406 21.0582 5.89985L21.0538 5.92801V6.1752L21.2462 6.28418C21.4082 6.37011 21.5368 6.46848 21.6356 6.58111C21.8002 6.7687 21.9066 7.00712 21.9516 7.28978C21.998 7.5805 21.9826 7.92643 21.9066 8.31807C21.8188 8.76859 21.6769 9.16096 21.4854 9.48202C21.309 9.77785 21.0845 10.0232 20.818 10.2134C20.5635 10.394 20.261 10.5312 19.9191 10.619C19.5878 10.7052 19.2101 10.7488 18.7958 10.7488H18.5288C18.338 10.7488 18.1525 10.8175 18.007 10.9408C17.8611 11.0665 17.7645 11.2383 17.7349 11.4263L17.7148 11.5357L17.3769 13.6767L17.3616 13.7553C17.3576 13.7802 17.3506 13.7927 17.3404 13.8011C17.3312 13.8087 17.3181 13.8138 17.3052 13.8138H15.6571Z\"\n        fill=\"#253B80\"\n      />\n      <path\n        d=\"M21.4284 5.95703C21.4182 6.02248 21.4065 6.0894 21.3933 6.15815C20.9409 8.48056 19.3934 9.28286 17.4169 9.28286H16.4106C16.1689 9.28286 15.9652 9.45838 15.9275 9.6968L15.4123 12.9645L15.2664 13.8907C15.2418 14.0473 15.3626 14.1884 15.5205 14.1884H17.3054C17.5168 14.1884 17.6963 14.0348 17.7295 13.8264L17.7471 13.7357L18.0832 11.603L18.1048 11.4861C18.1376 11.2769 18.3175 11.1234 18.5289 11.1234H18.7958C20.5251 11.1234 21.8789 10.4213 22.2746 8.38951C22.4398 7.54077 22.3543 6.8321 21.9169 6.33367C21.7846 6.18338 21.6204 6.05868 21.4284 5.95703Z\"\n        fill=\"#179BD7\"\n      />\n      <path\n        d=\"M20.9549 5.7688C20.8859 5.74869 20.8145 5.7304 20.7414 5.71395C20.6679 5.69787 20.5925 5.6836 20.515 5.67117C20.2437 5.62729 19.9464 5.60645 19.6279 5.60645H16.9395C16.8732 5.60645 16.8104 5.62143 16.7541 5.6485C16.6301 5.7081 16.538 5.82549 16.5157 5.96919L15.9437 9.59159L15.9272 9.69727C15.9649 9.45884 16.1686 9.28332 16.4103 9.28332H17.4166C19.3931 9.28332 20.9407 8.48066 21.393 6.15862C21.4065 6.08987 21.4179 6.02295 21.4281 5.9575C21.3137 5.89679 21.1897 5.84487 21.0562 5.80061C21.0234 5.78965 20.9894 5.77905 20.9549 5.7688Z\"\n        fill=\"#222D65\"\n      />\n      <path\n        d=\"M16.5156 5.96866C16.5379 5.82495 16.6301 5.70757 16.754 5.64833C16.8107 5.62126 16.8733 5.60627 16.9394 5.60627H19.6279C19.9464 5.60627 20.2437 5.62712 20.5149 5.671C20.5925 5.68343 20.6679 5.6977 20.7414 5.71378C20.8145 5.73024 20.8858 5.74853 20.9549 5.76863C20.9893 5.77887 21.0233 5.78947 21.0565 5.80008C21.19 5.84433 21.314 5.89662 21.4284 5.95696C21.5631 5.09871 21.4274 4.51437 20.9634 3.98523C20.4518 3.40271 19.5284 3.15332 18.3469 3.15332H14.9168C14.6755 3.15332 14.4697 3.32884 14.4323 3.56763L13.0037 12.6236C12.9755 12.8028 13.1137 12.9645 13.2943 12.9645H15.412L15.9437 9.59105L16.5156 5.96866Z\"\n        fill=\"#253B80\"\n      />\n    </svg>\n  );\n};\n\nexport const Visa = function Visa() {\n  return (\n    <svg fill=\"none\" height=\"24\" viewBox=\"0 0 35 24\" width=\"35\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect fill=\"white\" height=\"23\" rx=\"3.5\" stroke=\"#D9D9D9\" width=\"34\" x=\"0.5\" y=\"0.5\" />\n      <path\n        clipRule=\"evenodd\"\n        d=\"M10.6253 16.2582H8.50494L6.91495 10.1924C6.83949 9.91334 6.67925 9.66667 6.44354 9.5504C5.85531 9.25823 5.20712 9.0257 4.5 8.90843V8.6749H7.91567C8.38708 8.6749 8.74064 9.0257 8.79957 9.43313L9.62454 13.8086L11.7438 8.6749H13.8052L10.6253 16.2582ZM14.9838 16.2582H12.9813L14.6302 8.6749H16.6327L14.9838 16.2582ZM19.2234 10.7757C19.2823 10.3673 19.6359 10.1337 20.0483 10.1337C20.6965 10.0751 21.4026 10.1924 21.9919 10.4835L22.3454 8.85081C21.7562 8.61727 21.108 8.5 20.5198 8.5C18.5762 8.5 17.162 9.55041 17.162 11.0082C17.162 12.1173 18.1637 12.6996 18.8708 13.0504C19.6359 13.4002 19.9305 13.6338 19.8716 13.9835C19.8716 14.5082 19.2823 14.7418 18.6941 14.7418C17.9869 14.7418 17.2798 14.5669 16.6327 14.2747L16.2791 15.9085C16.9862 16.1996 17.7512 16.3169 18.4584 16.3169C20.6376 16.3745 21.9919 15.3251 21.9919 13.75C21.9919 11.7665 19.2234 11.6502 19.2234 10.7757ZM29 16.2582L27.41 8.6749H25.7022C25.3486 8.6749 24.9951 8.90843 24.8772 9.25823L21.9329 16.2582H23.9943L24.4058 15.1502H26.9386L27.1743 16.2582H29ZM25.9968 10.7171L26.585 13.5751H24.9361L25.9968 10.7171Z\"\n        fill=\"#172B85\"\n        fillRule=\"evenodd\"\n      />\n    </svg>\n  );\n};\n",
        "sections/footer/social-icons.tsx": "export const Facebook = function Facebook() {\n  return (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n      <g clipPath=\"url(#clip0_1793_28340)\">\n        <path d=\"M12 0C5.37264 0 0 5.37264 0 12C0 17.6275 3.87456 22.3498 9.10128 23.6467V15.6672H6.62688V12H9.10128V10.4198C9.10128 6.33552 10.9498 4.4424 14.9597 4.4424C15.72 4.4424 17.0318 4.59168 17.5685 4.74048V8.06448C17.2853 8.03472 16.7933 8.01984 16.1822 8.01984C14.2147 8.01984 13.4544 8.76528 13.4544 10.703V12H17.3741L16.7006 15.6672H13.4544V23.9122C19.3963 23.1946 24.0005 18.1354 24.0005 12C24 5.37264 18.6274 0 12 0Z\" />\n      </g>\n      <defs>\n        <clipPath id=\"clip0_1793_28340\">\n          <rect fill=\"white\" height=\"24\" width=\"24\" />\n        </clipPath>\n      </defs>\n    </svg>\n  );\n};\n\nexport const Instagram = function Instagram() {\n  return (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n      <g clipPath=\"url(#clip0_1793_28338)\">\n        <path d=\"M12 2.16094C15.2063 2.16094 15.5859 2.175 16.8469 2.23125C18.0188 2.28281 18.6516 2.47969 19.0734 2.64375C19.6313 2.85938 20.0344 3.12188 20.4516 3.53906C20.8734 3.96094 21.1313 4.35938 21.3469 4.91719C21.5109 5.33906 21.7078 5.97656 21.7594 7.14375C21.8156 8.40937 21.8297 8.78906 21.8297 11.9906C21.8297 15.1969 21.8156 15.5766 21.7594 16.8375C21.7078 18.0094 21.5109 18.6422 21.3469 19.0641C21.1313 19.6219 20.8687 20.025 20.4516 20.4422C20.0297 20.8641 19.6313 21.1219 19.0734 21.3375C18.6516 21.5016 18.0141 21.6984 16.8469 21.75C15.5813 21.8062 15.2016 21.8203 12 21.8203C8.79375 21.8203 8.41406 21.8062 7.15313 21.75C5.98125 21.6984 5.34844 21.5016 4.92656 21.3375C4.36875 21.1219 3.96563 20.8594 3.54844 20.4422C3.12656 20.0203 2.86875 19.6219 2.65313 19.0641C2.48906 18.6422 2.29219 18.0047 2.24063 16.8375C2.18438 15.5719 2.17031 15.1922 2.17031 11.9906C2.17031 8.78438 2.18438 8.40469 2.24063 7.14375C2.29219 5.97187 2.48906 5.33906 2.65313 4.91719C2.86875 4.35938 3.13125 3.95625 3.54844 3.53906C3.97031 3.11719 4.36875 2.85938 4.92656 2.64375C5.34844 2.47969 5.98594 2.28281 7.15313 2.23125C8.41406 2.175 8.79375 2.16094 12 2.16094ZM12 0C8.74219 0 8.33438 0.0140625 7.05469 0.0703125C5.77969 0.126563 4.90313 0.332812 4.14375 0.628125C3.35156 0.9375 2.68125 1.34531 2.01563 2.01562C1.34531 2.68125 0.9375 3.35156 0.628125 4.13906C0.332812 4.90313 0.126563 5.775 0.0703125 7.05C0.0140625 8.33437 0 8.74219 0 12C0 15.2578 0.0140625 15.6656 0.0703125 16.9453C0.126563 18.2203 0.332812 19.0969 0.628125 19.8563C0.9375 20.6484 1.34531 21.3188 2.01563 21.9844C2.68125 22.65 3.35156 23.0625 4.13906 23.3672C4.90313 23.6625 5.775 23.8687 7.05 23.925C8.32969 23.9812 8.7375 23.9953 11.9953 23.9953C15.2531 23.9953 15.6609 23.9812 16.9406 23.925C18.2156 23.8687 19.0922 23.6625 19.8516 23.3672C20.6391 23.0625 21.3094 22.65 21.975 21.9844C22.6406 21.3188 23.0531 20.6484 23.3578 19.8609C23.6531 19.0969 23.8594 18.225 23.9156 16.95C23.9719 15.6703 23.9859 15.2625 23.9859 12.0047C23.9859 8.74688 23.9719 8.33906 23.9156 7.05938C23.8594 5.78438 23.6531 4.90781 23.3578 4.14844C23.0625 3.35156 22.6547 2.68125 21.9844 2.01562C21.3188 1.35 20.6484 0.9375 19.8609 0.632812C19.0969 0.3375 18.225 0.13125 16.95 0.075C15.6656 0.0140625 15.2578 0 12 0Z\" />\n        <path d=\"M12 5.83594C8.59688 5.83594 5.83594 8.59688 5.83594 12C5.83594 15.4031 8.59688 18.1641 12 18.1641C15.4031 18.1641 18.1641 15.4031 18.1641 12C18.1641 8.59688 15.4031 5.83594 12 5.83594ZM12 15.9984C9.79219 15.9984 8.00156 14.2078 8.00156 12C8.00156 9.79219 9.79219 8.00156 12 8.00156C14.2078 8.00156 15.9984 9.79219 15.9984 12C15.9984 14.2078 14.2078 15.9984 12 15.9984Z\" />\n        <path d=\"M19.8469 5.59238C19.8469 6.38926 19.2 7.03145 18.4078 7.03145C17.6109 7.03145 16.9688 6.38457 16.9688 5.59238C16.9688 4.79551 17.6156 4.15332 18.4078 4.15332C19.2 4.15332 19.8469 4.8002 19.8469 5.59238Z\" />\n      </g>\n      <defs>\n        <clipPath id=\"clip0_1793_28338\">\n          <rect fill=\"white\" height=\"24\" width=\"24\" />\n        </clipPath>\n      </defs>\n    </svg>\n  );\n};\n\nexport const X = function X() {\n  return (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M18.3263 1.9043H21.6998L14.3297 10.3278L23 21.7903H16.2112L10.894 14.8383L4.80995 21.7903H1.43443L9.31743 12.7804L1 1.9043H7.96111L12.7674 8.25863L18.3263 1.9043ZM17.1423 19.7711H19.0116L6.94539 3.81743H4.93946L17.1423 19.7711Z\" />\n    </svg>\n  );\n};\n\nexport const Youtube = function Youtube() {\n  return (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M23.7609 7.1998C23.7609 7.1998 23.5266 5.54512 22.8047 4.81855C21.8906 3.8623 20.8688 3.85762 20.4 3.80137C17.0438 3.55762 12.0047 3.55762 12.0047 3.55762H11.9953C11.9953 3.55762 6.95625 3.55762 3.6 3.80137C3.13125 3.85762 2.10938 3.8623 1.19531 4.81855C0.473438 5.54512 0.24375 7.1998 0.24375 7.1998C0.24375 7.1998 0 9.14512 0 11.0857V12.9045C0 14.8451 0.239062 16.7904 0.239062 16.7904C0.239062 16.7904 0.473437 18.4451 1.19062 19.1717C2.10469 20.1279 3.30469 20.0951 3.83906 20.1982C5.76094 20.3811 12 20.4373 12 20.4373C12 20.4373 17.0438 20.4279 20.4 20.1889C20.8688 20.1326 21.8906 20.1279 22.8047 19.1717C23.5266 18.4451 23.7609 16.7904 23.7609 16.7904C23.7609 16.7904 24 14.8498 24 12.9045V11.0857C24 9.14512 23.7609 7.1998 23.7609 7.1998ZM9.52031 15.1123V8.36699L16.0031 11.7514L9.52031 15.1123Z\" />\n    </svg>\n  );\n};\n"
      },
      "componentType": "section"
    },
    {
      "name": "forgot-password-section",
      "dependencies": [
        "button",
        "input"
      ],
      "registryDependencies": [],
      "files": [
        "sections/forgot-password-section/index.tsx",
        "sections/forgot-password-section/forgot-password-form.tsx",
        "sections/forgot-password-section/schema.ts"
      ],
      "doc": "---\ntitle: Forgot Password Section\npreview: forgot-password-section-example\npreviewSize: lg\n---\n",
      "docFile": "/dev/vibes/soul/docs/forgot-password-section.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/forgot-password-section/index.tsx",
      "componentName": "ForgotPasswordSection",
      "source": {
        "sections/forgot-password-section/forgot-password-form.tsx": "'use client';\n\nimport { getFormProps, getInputProps, SubmissionResult, useForm } from '@conform-to/react';\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod';\nimport { useActionState } from 'react';\nimport { useFormStatus } from 'react-dom';\n\nimport { FormStatus } from '@/vibes/soul/form/form-status';\nimport { Input } from '@/vibes/soul/form/input';\nimport { Button } from '@/vibes/soul/primitives/button';\n\nimport { schema } from './schema';\n\ntype Action<State, Payload> = (state: Awaited<State>, payload: Payload) => State | Promise<State>;\n\nexport type ForgotPasswordAction = Action<\n  { lastResult: SubmissionResult | null; successMessage?: string },\n  FormData\n>;\n\ninterface Props {\n  action: ForgotPasswordAction;\n  emailLabel?: string;\n  submitLabel?: string;\n}\n\nexport function ForgotPasswordForm({\n  action,\n  emailLabel = 'Email',\n  submitLabel = 'Reset password',\n}: Props) {\n  const [{ lastResult, successMessage }, formAction] = useActionState(action, { lastResult: null });\n  const [form, fields] = useForm({\n    lastResult,\n    constraint: getZodConstraint(schema),\n    shouldValidate: 'onBlur',\n    shouldRevalidate: 'onInput',\n    onValidate({ formData }) {\n      return parseWithZod(formData, { schema });\n    },\n  });\n\n  return (\n    <form {...getFormProps(form)} action={formAction} className=\"flex flex-grow flex-col gap-5\">\n      <Input\n        {...getInputProps(fields.email, { type: 'text' })}\n        errors={fields.email.errors}\n        key={fields.email.id}\n        label={emailLabel}\n      />\n      <SubmitButton>{submitLabel}</SubmitButton>\n      {form.errors?.map((error, index) => (\n        <FormStatus key={index} type=\"error\">\n          {error}\n        </FormStatus>\n      ))}\n      {form.status === 'success' && successMessage != null && (\n        <FormStatus>{successMessage}</FormStatus>\n      )}\n    </form>\n  );\n}\n\nfunction SubmitButton({ children }: { children: React.ReactNode }) {\n  const { pending } = useFormStatus();\n\n  return (\n    <Button className=\"mt-auto w-full\" loading={pending} type=\"submit\" variant=\"secondary\">\n      {children}\n    </Button>\n  );\n}\n",
        "sections/forgot-password-section/index.tsx": "import { ForgotPasswordAction, ForgotPasswordForm } from './forgot-password-form';\n\ninterface Props {\n  title?: string;\n  subtitle?: string;\n  action: ForgotPasswordAction;\n  emailLabel?: string;\n  submitLabel?: string;\n}\n\nexport function ForgotPasswordSection({\n  title = 'Forgot your password?',\n  subtitle = 'Enter the email associated with your account below. We’ll send you instructions to reset your password.',\n  emailLabel,\n  submitLabel,\n  action,\n}: Props) {\n  return (\n    <div className=\"@container\">\n      <div className=\"flex flex-col justify-center gap-y-24 px-3 py-10 @xl:flex-row @xl:px-6 @4xl:py-20 @5xl:px-20\">\n        <div className=\"flex w-full flex-col @xl:max-w-md @xl:pr-10 @4xl:pr-20\">\n          <h1 className=\"mb-5 text-4xl font-medium leading-none @xl:text-5xl\">{title}</h1>\n          <p className=\"mb-10 text-base font-light leading-none @xl:text-lg\">{subtitle}</p>\n          <ForgotPasswordForm action={action} emailLabel={emailLabel} submitLabel={submitLabel} />\n        </div>\n      </div>\n    </div>\n  );\n}\n",
        "sections/forgot-password-section/schema.ts": "import { z } from 'zod';\n\nexport const schema = z.object({\n  email: z.string().email({ message: 'Please enter a valid email.' }).trim(),\n});\n"
      },
      "componentType": "section"
    },
    {
      "name": "header-section",
      "dependencies": [
        "banner",
        "navigation"
      ],
      "registryDependencies": [
        "clsx",
        "react-headroom"
      ],
      "files": [
        "sections/header-section/index.tsx"
      ],
      "doc": "---\ntitle: Header Section\npreview:\n  Electric: header-section-electric-example\n  Warm: header-section-warm-example\n  Luxury: header-section-luxury-example\npreviewSize: lg\n---\n",
      "docFile": "/dev/vibes/soul/docs/header-section.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/header-section/index.tsx",
      "componentName": "HeaderSection",
      "source": {
        "sections/header-section/index.tsx": "'use client';\n\nimport { forwardRef, useEffect, useState } from 'react';\nimport Headroom from 'react-headroom';\n\nimport { Banner } from '@/vibes/soul/primitives/banner';\nimport { Navigation } from '@/vibes/soul/primitives/navigation';\n\ninterface Props {\n  navigation: React.ComponentPropsWithoutRef<typeof Navigation>;\n  banner?: React.ComponentPropsWithoutRef<typeof Banner>;\n}\n\nexport const HeaderSection = forwardRef<React.ComponentRef<'div'>, Props>(\n  ({ navigation, banner }, ref) => {\n    const [bannerElement, setBannerElement] = useState<HTMLElement | null>(null);\n    const [bannerHeight, setBannerHeight] = useState(0);\n    const [isFloating, setIsFloating] = useState(false);\n\n    useEffect(() => {\n      if (!bannerElement) return;\n\n      const resizeObserver = new ResizeObserver((entries: ResizeObserverEntry[]) => {\n        for (const entry of entries) {\n          setBannerHeight(entry.contentRect.height);\n        }\n      });\n\n      resizeObserver.observe(bannerElement);\n\n      return () => {\n        resizeObserver.disconnect();\n      };\n    }, [bannerElement]);\n\n    return (\n      <div ref={ref}>\n        {banner && <Banner ref={setBannerElement} {...banner} />}\n        <Headroom\n          onUnfix={() => setIsFloating(false)}\n          onUnpin={() => setIsFloating(true)}\n          pinStart={bannerHeight}\n        >\n          <div className=\"p-2\">\n            <Navigation {...navigation} isFloating={isFloating} />\n          </div>\n        </Headroom>\n      </div>\n    );\n  },\n);\n\nHeaderSection.displayName = 'HeaderSection';\n"
      },
      "componentType": "section"
    },
    {
      "name": "icon-block",
      "dependencies": [],
      "registryDependencies": [
        "clsx",
        "lucide-react"
      ],
      "files": [
        "sections/icon-block/index.tsx",
        "primitives/icon/index.tsx"
      ],
      "doc": "---\ntitle: Icon Block\npreview: icon-block-example\npreviewSize: lg\n---\n",
      "docFile": "/dev/vibes/soul/docs/icon-block.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/icon-block/index.tsx",
      "componentName": "IconBlock",
      "source": {
        "sections/icon-block/index.tsx": "import { clsx } from 'clsx';\n\nimport { Icon, IconName } from '@/vibes/soul/primitives/icon';\n\nexport interface IconBlockProps {\n  list: Array<{\n    icon: IconName;\n    title: string;\n    description: string;\n  }>;\n}\n\nexport const IconBlock = function IconBlock({ list }: IconBlockProps) {\n  return (\n    <section className=\"bg-background text-foreground @container\">\n      <ul className=\"mx-auto flex w-full max-w-screen-2xl flex-wrap justify-center divide-y divide-contrast-100 px-3 @2xl:px-20\">\n        {list.map(({ title, description, icon }, idx) => {\n          return (\n            <li\n              className={clsx(\n                'flex flex-col items-center gap-2 px-1 py-10',\n                list.length !== 4 ? 'w-full @md:w-1/2 @xl:w-1/3' : 'w-1/4',\n                { 'border-t border-contrast-100': idx === 0 },\n              )}\n              key={idx}\n            >\n              <Icon name={icon} />\n\n              <div className=\"flex flex-col items-center text-center\">\n                <span>{title}</span>\n                <span className=\"opacity-40\">{description}</span>\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n    </section>\n  );\n};\n",
        "primitives/icon/index.tsx": "import { clsx } from 'clsx';\nimport dynamicIconImports from 'lucide-react/dynamicIconImports';\nimport { lazy, Suspense, useMemo } from 'react';\n\nexport type IconName = keyof typeof dynamicIconImports;\n\n// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\nexport const IconNames = Object.keys(dynamicIconImports) as IconName[];\n\nexport function Icon({\n  className,\n  name,\n  size = 24,\n}: {\n  className?: string;\n  size?: number;\n  name: IconName;\n}) {\n  const LucideIcon = useMemo(() => lazy(dynamicIconImports[name]), [name]);\n\n  return (\n    <Suspense\n      fallback={\n        <div\n          className={clsx('animate-pulse rounded-full bg-contrast-100', className)}\n          style={{ width: size, height: size }}\n        />\n      }\n    >\n      <LucideIcon className={className} size={size} />\n    </Suspense>\n  );\n}\n"
      },
      "componentType": "section"
    },
    {
      "name": "order-history-section",
      "dependencies": [],
      "registryDependencies": [
        "clsx"
      ],
      "files": [
        "sections/order-history-section/index.tsx"
      ],
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/order-history-section/index.tsx",
      "componentName": "OrderHistorySection",
      "source": {},
      "componentType": "section"
    },
    {
      "name": "product-detail",
      "dependencies": [
        "button",
        "favorite",
        "product-card",
        "rating"
      ],
      "registryDependencies": [
        "clsx",
        "embla-carousel-react"
      ],
      "files": [
        "sections/product-detail/index.tsx",
        "sections/product-detail/product-gallery.tsx"
      ],
      "doc": "---\ntitle: Product Detail\npreview:\n  Electric: product-detail-electric-example\n  Warm: product-detail-warm-example\n  Luxury: product-detail-luxury-example\npreviewSize: lg\n---\n",
      "docFile": "/dev/vibes/soul/docs/product-detail.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/product-detail/index.tsx",
      "componentName": "ProductDetail",
      "source": {
        "sections/product-detail/index.tsx": "import { Stream, Streamable } from '@/vibes/soul/lib/streamable';\nimport { Accordion, Accordions } from '@/vibes/soul/primitives/accordions';\nimport { Breadcrumb, Breadcrumbs } from '@/vibes/soul/primitives/breadcrumbs';\nimport { Price, PriceLabel } from '@/vibes/soul/primitives/price-label';\nimport { Rating } from '@/vibes/soul/primitives/rating';\nimport { ProductGallery } from '@/vibes/soul/sections/product-detail/product-gallery';\n\nimport { ProductDetailForm, ProductDetailFormAction } from './product-detail-form';\nimport { Field } from './schema';\n\ninterface ProductDetailProduct {\n  id: string;\n  title: string;\n  href: string;\n  images: Streamable<Array<{ src: string; alt: string }>>;\n  price?: Streamable<Price | null>;\n  subtitle?: string;\n  badge?: string;\n  rating?: Streamable<number | null>;\n  summary?: Streamable<string>;\n  description?: Streamable<string | React.ReactNode | null>;\n  accordions?: Streamable<\n    Array<{\n      title: string;\n      content: React.ReactNode;\n    }>\n  >;\n}\n\ninterface Props<F extends Field> {\n  breadcrumbs?: Streamable<Breadcrumb[]>;\n  product: Streamable<ProductDetailProduct | null>;\n  action: ProductDetailFormAction<F>;\n  fields: Streamable<F[]>;\n  quantityLabel?: string;\n  incrementLabel?: string;\n  decrementLabel?: string;\n  ctaLabel?: Streamable<string | null>;\n  ctaDisabled?: Streamable<boolean | null>;\n  prefetch?: boolean;\n  thumbnailLabel?: string;\n}\n\nexport function ProductDetail<F extends Field>({\n  product: streamableProduct,\n  action,\n  fields: streamableFields,\n  breadcrumbs,\n  quantityLabel,\n  incrementLabel,\n  decrementLabel,\n  ctaLabel: streamableCtaLabel,\n  ctaDisabled: streamableCtaDisabled,\n  prefetch,\n  thumbnailLabel,\n}: Props<F>) {\n  return (\n    <section className=\"@container\">\n      <div className=\"mx-auto w-full px-4 py-10 @xl:px-6 @xl:py-14 @4xl:px-8 @4xl:py-20\">\n        {breadcrumbs && <Breadcrumbs breadcrumbs={breadcrumbs} className=\"mb-6\" />}\n\n        <Stream fallback={<ProductDetailSkeleton />} value={streamableProduct}>\n          {(product) =>\n            product && (\n              <div className=\"grid grid-cols-1 items-stretch gap-x-6 gap-y-8 @2xl:grid-cols-2 @5xl:gap-x-12\">\n                <div className=\"hidden @2xl:block\">\n                  <Stream fallback={<ProductGallerySkeleton />} value={product.images}>\n                    {(images) => <ProductGallery images={images} />}\n                  </Stream>\n                </div>\n\n                {/* Product Details */}\n                <div className=\"text-foreground\">\n                  {product.subtitle != null && product.subtitle !== '' && (\n                    <p className=\"font-mono text-sm uppercase\">{product.subtitle}</p>\n                  )}\n\n                  <h1 className=\"mb-3 mt-2 font-heading text-2xl font-medium leading-none @xl:mb-4 @xl:text-3xl @4xl:text-4xl\">\n                    {product.title}\n                  </h1>\n\n                  <Stream fallback={<RatingSkeleton />} value={product.rating}>\n                    {(rating) => <Rating rating={rating ?? 0} />}\n                  </Stream>\n\n                  <Stream fallback={<PriceLabelSkeleton />} value={product.price}>\n                    {(price) => (\n                      <PriceLabel className=\"my-3 text-xl @xl:text-2xl\" price={price ?? ''} />\n                    )}\n                  </Stream>\n\n                  <div className=\"mb-8 @2xl:hidden\">\n                    <Stream fallback={<ProductGallerySkeleton />} value={product.images}>\n                      {(images) => (\n                        <ProductGallery images={images} thumbnailLabel={thumbnailLabel} />\n                      )}\n                    </Stream>\n                  </div>\n\n                  <Stream fallback={<ProductSummarySkeleton />} value={product.summary}>\n                    {(summary) =>\n                      summary !== undefined &&\n                      summary !== '' && <p className=\"text-contrast-500\">{summary}</p>\n                    }\n                  </Stream>\n\n                  <Stream\n                    fallback={<ProductDetailFormSkeleton />}\n                    value={Promise.all([\n                      streamableFields,\n                      streamableCtaLabel,\n                      streamableCtaDisabled,\n                    ])}\n                  >\n                    {([fields, ctaLabel, ctaDisabled]) => (\n                      <ProductDetailForm\n                        action={action}\n                        ctaDisabled={ctaDisabled ?? undefined}\n                        ctaLabel={ctaLabel ?? undefined}\n                        decrementLabel={decrementLabel}\n                        fields={fields}\n                        incrementLabel={incrementLabel}\n                        prefetch={prefetch}\n                        productId={product.id}\n                        quantityLabel={quantityLabel}\n                      />\n                    )}\n                  </Stream>\n\n                  <Stream fallback={<ProductDescriptionSkeleton />} value={product.description}>\n                    {(description) => {\n                      if (description === null || description === undefined) {\n                        return null;\n                      }\n\n                      if (typeof description === 'string') {\n                        return (\n                          <p className=\"border-y border-contrast-100 py-8 text-contrast-500\">\n                            {description}\n                          </p>\n                        );\n                      }\n\n                      return (\n                        <div\n                          className=\"border-top border-contrast-100 py-8 text-contrast-500\"\n                          dangerouslySetInnerHTML={{ __html: description }}\n                        />\n                      );\n                    }}\n                  </Stream>\n\n                  <Stream fallback={<ProductAccordionsSkeleton />} value={product.accordions}>\n                    {(accordions) =>\n                      accordions && (\n                        <Accordions className=\"border-top border-contrast-100 pt-4\" type=\"multiple\">\n                          {accordions.map((accordion, index) => (\n                            <Accordion key={index} title={accordion.title} value={index.toString()}>\n                              {accordion.content}\n                            </Accordion>\n                          ))}\n                        </Accordions>\n                      )\n                    }\n                  </Stream>\n                </div>\n              </div>\n            )\n          }\n        </Stream>\n      </div>\n    </section>\n  );\n}\n\nfunction ImageSkeleton() {\n  return (\n    <div className=\"aspect-[4/5] h-full w-full shrink-0 grow-0 basis-full animate-pulse bg-contrast-100\" />\n  );\n}\n\nfunction ThumbnailsSkeleton() {\n  return (\n    <>\n      <div className=\"h-12 w-12 shrink-0 animate-pulse rounded-lg bg-contrast-100 @md:h-16 @md:w-16\" />\n      <div className=\"h-12 w-12 shrink-0 animate-pulse rounded-lg bg-contrast-100 @md:h-16 @md:w-16\" />\n      <div className=\"h-12 w-12 shrink-0 animate-pulse rounded-lg bg-contrast-100 @md:h-16 @md:w-16\" />\n      <div className=\"h-12 w-12 shrink-0 animate-pulse rounded-lg bg-contrast-100 @md:h-16 @md:w-16\" />\n    </>\n  );\n}\n\nfunction ProductGallerySkeleton() {\n  return (\n    <div className={'@container'}>\n      <div className=\"w-full overflow-hidden rounded-xl @xl:rounded-2xl\">\n        <div className=\"flex\">\n          <ImageSkeleton />\n        </div>\n      </div>\n\n      <div className=\"mt-2 flex max-w-full gap-2 overflow-x-auto\">\n        <ThumbnailsSkeleton />\n      </div>\n    </div>\n  );\n}\n\nfunction PriceLabelSkeleton() {\n  return <div className=\"my-4 h-4 w-20 animate-pulse rounded-md bg-contrast-100\" />;\n}\n\nfunction RatingSkeleton() {\n  return (\n    <div className=\"flex w-[136px] animate-pulse items-center gap-1\">\n      <div className=\"h-4 w-[100px] rounded-md bg-contrast-100\" />\n      <div className=\"h-6 w-8 rounded-xl bg-contrast-100\" />\n    </div>\n  );\n}\n\nfunction ProductSummarySkeleton() {\n  return (\n    <div className=\"flex w-full animate-pulse flex-col gap-3.5 pb-6\">\n      <div className=\"h-2.5 w-full bg-contrast-100\" />\n      <div className=\"h-2.5 w-full bg-contrast-100\" />\n      <div className=\"h-2.5 w-3/4 bg-contrast-100\" />\n    </div>\n  );\n}\n\nfunction ProductDescriptionSkeleton() {\n  return (\n    <div className=\"flex w-full animate-pulse flex-col gap-3.5 pb-6\">\n      <div className=\"h-2.5 w-full bg-contrast-100\" />\n      <div className=\"h-2.5 w-full bg-contrast-100\" />\n      <div className=\"h-2.5 w-3/4 bg-contrast-100\" />\n    </div>\n  );\n}\n\nfunction ProductDetailFormSkeleton() {\n  return (\n    <div className=\"flex animate-pulse flex-col gap-8 py-8\">\n      <div className=\"flex flex-col gap-5\">\n        <div className=\"h-2 w-10 rounded-md bg-contrast-100\" />\n        <div className=\"flex gap-2\">\n          <div className=\"h-11 w-[72px] rounded-full bg-contrast-100\" />\n          <div className=\"h-11 w-[72px] rounded-full bg-contrast-100\" />\n          <div className=\"h-11 w-[72px] rounded-full bg-contrast-100\" />\n        </div>\n      </div>\n      <div className=\"flex flex-col gap-5\">\n        <div className=\"h-2 w-16 rounded-md bg-contrast-100\" />\n        <div className=\"flex gap-4\">\n          <div className=\"h-10 w-10 rounded-full bg-contrast-100\" />\n          <div className=\"h-10 w-10 rounded-full bg-contrast-100\" />\n          <div className=\"h-10 w-10 rounded-full bg-contrast-100\" />\n          <div className=\"h-10 w-10 rounded-full bg-contrast-100\" />\n          <div className=\"h-10 w-10 rounded-full bg-contrast-100\" />\n        </div>\n      </div>\n      <div className=\"flex gap-2\">\n        <div className=\"h-12 w-[120px] rounded-lg bg-contrast-100\" />\n        <div className=\"h-12 w-[216px] rounded-full bg-contrast-100\" />\n      </div>\n    </div>\n  );\n}\n\nfunction ProductAccordionsSkeleton() {\n  return (\n    <div className=\"flex h-[600px] w-full animate-pulse flex-col gap-8 pt-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"h-2 w-20 rounded-sm bg-contrast-100\" />\n        <div className=\"h-3 w-3 rounded-full bg-contrast-100\" />\n      </div>\n      <div className=\"mb-1 flex flex-col gap-4\">\n        <div className=\"h-3 w-full rounded-sm bg-contrast-100\" />\n        <div className=\"h-3 w-full rounded-sm bg-contrast-100\" />\n        <div className=\"h-3 w-3/5 rounded-sm bg-contrast-100\" />\n      </div>\n      <div className=\"flex items-center justify-between\">\n        <div className=\"h-2 w-24 rounded-sm bg-contrast-100\" />\n        <div className=\"h-3 w-3 rounded-full bg-contrast-100\" />\n      </div>\n      <div className=\"flex items-center justify-between\">\n        <div className=\"h-2 w-20 rounded-sm bg-contrast-100\" />\n        <div className=\"h-3 w-3 rounded-full bg-contrast-100\" />\n      </div>\n      <div className=\"flex items-center justify-between\">\n        <div className=\"h-2 w-32 rounded-sm bg-contrast-100\" />\n        <div className=\"h-3 w-3 rounded-full bg-contrast-100\" />\n      </div>\n    </div>\n  );\n}\n\nfunction ProductDetailSkeleton() {\n  return (\n    <div className=\"grid animate-pulse grid-cols-1 items-stretch gap-x-6 gap-y-8 @2xl:grid-cols-2 @5xl:gap-x-12\">\n      <div className=\"hidden @2xl:block\">\n        <ProductGallerySkeleton />\n      </div>\n\n      <div>\n        <div className=\"mb-6 h-4 w-20 rounded-lg bg-contrast-100\" />\n\n        <div className=\"mb-6 h-6 w-72 rounded-lg bg-contrast-100\" />\n\n        <RatingSkeleton />\n\n        <PriceLabelSkeleton />\n\n        <ProductSummarySkeleton />\n\n        <div className=\"mb-8 @2xl:hidden\">\n          <ProductGallerySkeleton />\n        </div>\n\n        <ProductDetailFormSkeleton />\n      </div>\n    </div>\n  );\n}\n",
        "sections/product-detail/product-detail-form.tsx": "'use client';\n\nimport {\n  FieldMetadata,\n  FormProvider,\n  FormStateInput,\n  getFormProps,\n  SubmissionResult,\n  useForm,\n  useInputControl,\n} from '@conform-to/react';\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod';\nimport { usePathname, useRouter } from 'next/navigation';\nimport { createSerializer, parseAsString, useQueryStates } from 'nuqs';\nimport { ReactNode, useActionState, useCallback, useEffect } from 'react';\nimport { useFormStatus } from 'react-dom';\nimport { z } from 'zod';\n\nimport { ButtonRadioGroup } from '@/vibes/soul/form/button-radio-group';\nimport { CardRadioGroup } from '@/vibes/soul/form/card-radio-group';\nimport { Checkbox } from '@/vibes/soul/form/checkbox';\nimport { FormStatus } from '@/vibes/soul/form/form-status';\nimport { Input } from '@/vibes/soul/form/input';\nimport { NumberInput } from '@/vibes/soul/form/number-input';\nimport { RadioGroup } from '@/vibes/soul/form/radio-group';\nimport { Select } from '@/vibes/soul/form/select';\nimport { SwatchRadioGroup } from '@/vibes/soul/form/swatch-radio-group';\nimport { Button } from '@/vibes/soul/primitives/button';\nimport { toast } from '@/vibes/soul/primitives/toaster';\n\nimport { Field, schema, SchemaRawShape } from './schema';\n\ntype Action<S, P> = (state: Awaited<S>, payload: P) => S | Promise<S>;\n\ninterface State<F extends Field> {\n  fields: F[];\n  lastResult: SubmissionResult | null;\n  successMessage?: ReactNode;\n}\n\nexport type ProductDetailFormAction<F extends Field> = Action<State<F>, FormData>;\n\ninterface Props<F extends Field> {\n  fields: F[];\n  action: ProductDetailFormAction<F>;\n  productId: string;\n  ctaLabel?: string;\n  quantityLabel?: string;\n  incrementLabel?: string;\n  decrementLabel?: string;\n  ctaDisabled?: boolean;\n  prefetch?: boolean;\n}\n\nexport function ProductDetailForm<F extends Field>({\n  action,\n  fields,\n  productId,\n  ctaLabel = 'Add to cart',\n  quantityLabel = 'Quantity',\n  incrementLabel = 'Increase quantity',\n  decrementLabel = 'Decrease quantity',\n  ctaDisabled = false,\n  prefetch = false,\n}: Props<F>) {\n  const router = useRouter();\n  const pathname = usePathname();\n\n  const searchParams = fields.reduce<Record<string, typeof parseAsString>>((acc, field) => {\n    return field.persist === true ? { ...acc, [field.name]: parseAsString } : acc;\n  }, {});\n\n  const [params] = useQueryStates(searchParams, { shallow: false });\n\n  const onPrefetch = (fieldName: string, value: string) => {\n    if (prefetch) {\n      const serialize = createSerializer(searchParams);\n\n      const newUrl = serialize(pathname, { ...params, [fieldName]: value });\n\n      router.prefetch(newUrl);\n    }\n  };\n\n  const defaultValue = fields.reduce<{\n    [Key in keyof SchemaRawShape]?: z.infer<SchemaRawShape[Key]>;\n  }>(\n    (acc, field) => ({\n      ...acc,\n      [field.name]: params[field.name] ?? field.defaultValue ?? '',\n    }),\n    { quantity: 1 },\n  );\n\n  const [{ lastResult, successMessage }, formAction] = useActionState(action, {\n    fields,\n    lastResult: null,\n  });\n\n  useEffect(() => {\n    if (lastResult?.status === 'success') {\n      toast.success(successMessage);\n    }\n  }, [lastResult, successMessage]);\n\n  const [form, formFields] = useForm({\n    lastResult,\n    constraint: getZodConstraint(schema(fields)),\n    onValidate({ formData }) {\n      return parseWithZod(formData, { schema: schema(fields) });\n    },\n    // @ts-expect-error: `defaultValue` types are conflicting with `onValidate`.\n    defaultValue,\n    shouldValidate: 'onSubmit',\n    shouldRevalidate: 'onInput',\n  });\n\n  const quantityControl = useInputControl(formFields.quantity);\n\n  return (\n    <FormProvider context={form.context}>\n      <FormStateInput />\n      <form {...getFormProps(form)} action={formAction} className=\"py-8\">\n        <input name=\"id\" type=\"hidden\" value={productId} />\n        <div className=\"space-y-6\">\n          {fields.map((field) => {\n            return (\n              <FormField\n                field={field}\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                formField={formFields[field.name]!}\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                key={formFields[field.name]!.id}\n                onPrefetch={onPrefetch}\n              />\n            );\n          })}\n          {form.errors?.map((error, index) => (\n            <FormStatus className=\"pt-3\" key={index} type=\"error\">\n              {error}\n            </FormStatus>\n          ))}\n          <div className=\"flex gap-x-3 pt-3\">\n            <NumberInput\n              aria-label={quantityLabel}\n              decrementLabel={decrementLabel}\n              incrementLabel={incrementLabel}\n              min={1}\n              name={formFields.quantity.name}\n              onBlur={quantityControl.blur}\n              onChange={(e) => quantityControl.change(e.currentTarget.value)}\n              onFocus={quantityControl.focus}\n              required\n              value={quantityControl.value}\n            />\n            <SubmitButton disabled={ctaDisabled}>{ctaLabel}</SubmitButton>\n          </div>\n        </div>\n      </form>\n    </FormProvider>\n  );\n}\n\nfunction SubmitButton({ children, disabled }: { children: React.ReactNode; disabled?: boolean }) {\n  const { pending } = useFormStatus();\n\n  return (\n    <Button\n      className=\"w-auto @xl:w-56\"\n      disabled={disabled}\n      loading={pending}\n      size=\"medium\"\n      type=\"submit\"\n    >\n      {children}\n    </Button>\n  );\n}\n\nfunction FormField({\n  field,\n  formField,\n  onPrefetch,\n}: {\n  field: Field;\n  formField: FieldMetadata<string | number | boolean | Date | undefined>;\n  onPrefetch: (fieldName: string, value: string) => void;\n}) {\n  const controls = useInputControl(formField);\n\n  const [, setParams] = useQueryStates(\n    field.persist === true ? { [field.name]: parseAsString.withOptions({ shallow: false }) } : {},\n  );\n\n  const handleChange = useCallback(\n    (value: string) => {\n      void setParams({ [field.name]: value });\n      controls.change(value);\n    },\n    [setParams, field, controls],\n  );\n\n  const handleOnOptionMouseEnter = (value: string) => {\n    if (field.persist === true) {\n      onPrefetch(field.name, value);\n    }\n  };\n\n  switch (field.type) {\n    case 'number':\n      return (\n        <NumberInput\n          decrementLabel={field.decrementLabel}\n          errors={formField.errors}\n          incrementLabel={field.incrementLabel}\n          key={formField.id}\n          label={field.label}\n          name={formField.name}\n          onBlur={controls.blur}\n          onChange={(e) => handleChange(e.currentTarget.value)}\n          onFocus={controls.focus}\n          required={formField.required}\n          value={controls.value}\n        />\n      );\n\n    case 'text':\n      return (\n        <Input\n          errors={formField.errors}\n          key={formField.id}\n          label={field.label}\n          name={formField.name}\n          onBlur={controls.blur}\n          onChange={(e) => handleChange(e.currentTarget.value)}\n          onFocus={controls.focus}\n          required={formField.required}\n          value={controls.value}\n        />\n      );\n\n    case 'checkbox':\n      return (\n        <Checkbox\n          errors={formField.errors}\n          key={formField.id}\n          label={field.label}\n          name={formField.name}\n          onBlur={controls.blur}\n          onCheckedChange={(value) => handleChange(String(value))}\n          onFocus={controls.focus}\n          required={formField.required}\n          value={controls.value}\n        />\n      );\n\n    case 'select':\n      return (\n        <Select\n          errors={formField.errors}\n          key={formField.id}\n          label={field.label}\n          name={formField.name}\n          onBlur={controls.blur}\n          onFocus={controls.focus}\n          onOptionMouseEnter={handleOnOptionMouseEnter}\n          onValueChange={handleChange}\n          options={field.options}\n          required={formField.required}\n          value={controls.value}\n        />\n      );\n\n    case 'radio-group':\n      return (\n        <RadioGroup\n          errors={formField.errors}\n          key={formField.id}\n          label={field.label}\n          name={formField.name}\n          onBlur={controls.blur}\n          onFocus={controls.focus}\n          onOptionMouseEnter={handleOnOptionMouseEnter}\n          onValueChange={handleChange}\n          options={field.options}\n          required={formField.required}\n          value={controls.value}\n        />\n      );\n\n    case 'swatch-radio-group':\n      return (\n        <SwatchRadioGroup\n          errors={formField.errors}\n          key={formField.id}\n          label={field.label}\n          name={formField.name}\n          onBlur={controls.blur}\n          onFocus={controls.focus}\n          onOptionMouseEnter={handleOnOptionMouseEnter}\n          onValueChange={handleChange}\n          options={field.options}\n          required={formField.required}\n          value={controls.value}\n        />\n      );\n\n    case 'card-radio-group':\n      return (\n        <CardRadioGroup\n          errors={formField.errors}\n          key={formField.id}\n          label={field.label}\n          name={formField.name}\n          onBlur={controls.blur}\n          onFocus={controls.focus}\n          onOptionMouseEnter={handleOnOptionMouseEnter}\n          onValueChange={handleChange}\n          options={field.options}\n          required={formField.required}\n          value={controls.value}\n        />\n      );\n\n    case 'button-radio-group':\n      return (\n        <ButtonRadioGroup\n          errors={formField.errors}\n          key={formField.id}\n          label={field.label}\n          name={formField.name}\n          onBlur={controls.blur}\n          onFocus={controls.focus}\n          onOptionMouseEnter={handleOnOptionMouseEnter}\n          onValueChange={handleChange}\n          options={field.options}\n          required={formField.required}\n          value={controls.value}\n        />\n      );\n  }\n}\n",
        "sections/product-detail/product-gallery.tsx": "'use client';\n\nimport { clsx } from 'clsx';\nimport useEmblaCarousel from 'embla-carousel-react';\nimport Image from 'next/image';\nimport { useEffect, useState } from 'react';\n\ninterface Props {\n  images: Array<{ alt: string; src: string }>;\n  className?: string;\n  thumbnailLabel?: string;\n}\n\nexport function ProductGallery({ images, className, thumbnailLabel = 'View image number' }: Props) {\n  const [previewImage, setPreviewImage] = useState(0);\n  const [emblaRef, emblaApi] = useEmblaCarousel();\n\n  useEffect(() => {\n    if (!emblaApi) return;\n\n    const onSelect = () => setPreviewImage(emblaApi.selectedScrollSnap());\n\n    emblaApi.on('select', onSelect);\n\n    return () => {\n      emblaApi.off('select', onSelect);\n    };\n  }, [emblaApi]);\n\n  const selectImage = (index: number) => {\n    setPreviewImage(index);\n    if (emblaApi) emblaApi.scrollTo(index);\n  };\n\n  return (\n    <div className={clsx('sticky top-4 flex flex-col gap-2 @2xl:flex-row', className)}>\n      <div\n        className=\"w-full overflow-hidden rounded-xl @xl:rounded-2xl @2xl:order-2\"\n        ref={emblaRef}\n      >\n        <div className=\"flex\">\n          {images.map((image, idx) => (\n            <div className=\"relative aspect-[4/5] w-full shrink-0 grow-0 basis-full \" key={idx}>\n              <Image\n                alt={image.alt}\n                className=\"object-cover\"\n                fill\n                priority\n                sizes=\"(max-width: 768px) 100vw, 50vw\"\n                src={image.src}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n      <div className=\"flex max-w-full shrink-0 flex-row gap-2 overflow-x-auto @2xl:order-1 @2xl:flex-col\">\n        {images.map((image, index) => (\n          <button\n            aria-label={`${thumbnailLabel} ${index + 1}`}\n            className={clsx(\n              'relative h-12 w-12 shrink-0 overflow-hidden rounded-lg border transition-all duration-300 hover:opacity-100 @md:h-16 @md:w-16',\n              index === previewImage\n                ? 'border-foreground opacity-100'\n                : 'border-transparent opacity-50',\n            )}\n            key={index}\n            onClick={() => selectImage(index)}\n          >\n            <Image alt={image.alt} className=\"bg-contrast-100 object-cover\" fill src={image.src} />\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n}\n",
        "sections/product-detail/schema.ts": "import { z } from 'zod';\n\ninterface FormField {\n  name: string;\n  label?: string;\n  errors?: string[];\n  required?: boolean;\n  persist?: boolean;\n}\n\ntype RadioField = {\n  type: 'radio-group';\n  options: Array<{ label: string; value: string }>;\n  defaultValue?: string;\n} & FormField;\n\ntype SelectField = {\n  type: 'select';\n  options: Array<{ label: string; value: string }>;\n  defaultValue?: string;\n} & FormField;\n\ntype CheckboxField = {\n  type: 'checkbox';\n  defaultValue?: string;\n} & FormField;\n\ntype NumberInputField = {\n  type: 'number';\n  defaultValue?: string;\n  min?: number;\n  max?: number;\n  incrementLabel?: string;\n  decrementLabel?: string;\n} & FormField;\n\ntype TextInputField = {\n  type: 'text';\n  defaultValue?: string;\n  pattern?: string;\n} & FormField;\n\ntype TextAreaField = {\n  type: 'textarea';\n  defaultValue?: string;\n  pattern?: string;\n} & FormField;\n\ntype DateField = {\n  type: 'date';\n  defaultValue?: string;\n  pattern?: string;\n} & FormField;\n\ntype SwatchRadioFieldOption =\n  | {\n      type: 'color';\n      value: string;\n      label: string;\n      color: string;\n      disabled?: boolean;\n    }\n  | {\n      type: 'image';\n      value: string;\n      label: string;\n      image: { src: string; alt: string };\n      disabled?: boolean;\n    };\n\ntype SwatchRadioField = {\n  type: 'swatch-radio-group';\n  defaultValue?: string;\n  options: SwatchRadioFieldOption[];\n} & FormField;\n\ntype CardRadioField = {\n  type: 'card-radio-group';\n  defaultValue?: string;\n  options: Array<{\n    value: string;\n    label: string;\n    image: { src: string; alt: string };\n    disabled?: boolean;\n  }>;\n} & FormField;\n\ntype ButtonRadioField = {\n  type: 'button-radio-group';\n  defaultValue?: string;\n  pattern?: string;\n  options: Array<{\n    value: string;\n    label: string;\n    disabled?: boolean;\n  }>;\n} & FormField;\n\nexport type Field =\n  | RadioField\n  | CheckboxField\n  | NumberInputField\n  | TextInputField\n  | TextAreaField\n  | DateField\n  | SwatchRadioField\n  | CardRadioField\n  | ButtonRadioField\n  | SelectField;\n\nexport interface SchemaRawShape {\n  [key: string]:\n    | z.ZodString\n    | z.ZodOptional<z.ZodString>\n    | z.ZodNumber\n    | z.ZodOptional<z.ZodNumber>;\n  id: z.ZodString;\n  quantity: z.ZodNumber;\n}\n\nexport function schema(fields: Field[]): z.ZodObject<SchemaRawShape> {\n  const shape: SchemaRawShape = {\n    id: z.string(),\n    quantity: z.number().min(1),\n  };\n\n  fields.forEach((field) => {\n    let fieldSchema: z.ZodString | z.ZodNumber;\n    switch (field.type) {\n      case 'number':\n        fieldSchema = z.number();\n\n        if (field.min != null) fieldSchema = fieldSchema.min(field.min);\n        if (field.max != null) fieldSchema = fieldSchema.max(field.max);\n\n        shape[field.name] = fieldSchema;\n        break;\n      default:\n        fieldSchema = z.string();\n\n        shape[field.name] = fieldSchema;\n        break;\n    }\n\n    if (field.required !== true) shape[field.name] = fieldSchema.optional();\n  });\n\n  return z.object(shape);\n}\n"
      },
      "componentType": "section"
    },
    {
      "name": "products-list-section",
      "dependencies": [
        "products-list",
        "button",
        "toggle-group",
        "cursor-pagination"
      ],
      "registryDependencies": [
        "nuqs"
      ],
      "files": [
        "sections/products-list-section/index.tsx",
        "sections/products-list-section/filters-panel.tsx",
        "sections/products-list-section/sorting.tsx"
      ],
      "doc": "---\ntitle: Product List Section\npreview:\n  Electric: products-list-section-electric-example\n  Warm: products-list-section-warm-example\n  Luxury: products-list-section-luxury-example\npreviewSize: lg\n---\n\n## Usage\n\nImport the component.\n\n<CodeBlock lang=\"bash\">{`import { ProductsListSection } from '@/vibes/soul/sections/products-list-section'`}</CodeBlock>\n\nQuery the appropriate data.\n\n<CodeBlock lang=\"bash\">{`const products = await getProducts()\nconst filters = await getFilters()\nconst sortOptions = await getSortOptions()\nconst breadcrumbs = await getBreadcrumbs()\nconst pagination = await getPagination()\n`}</CodeBlock>\n\nDisplay the component.\n\n<CodeBlock lang=\"bash\">\n  {`<ProductsListSection\n    title=\"Plants\"\n    breadcrumbs={breadcrumbs}\n    products={products}\n    totalCount={products.length}\n    filters={filters}\n    sortOptions={sortOptions}\n    pagination={pagination}\n/>`}\n</CodeBlock>\n\nFor full details, refer to the [API reference](#api-reference).\n\n### Streaming\n\nThe `products` property accepts either `Product[]` or `Promise<Product[]>`. By passing a `Promise<Product[]>`, you enable streaming which will show a loading state until the data is finished loading and streamed to the browser.\n\n<Preview\n  vibeSlug=\"soul\"\n  componentName={{\n    Electric: 'products-list-section-loading-electric-example',\n    Warm: 'products-list-section-loading-warm-example',\n    Luxury: 'products-list-section-loading-luxury-example',\n  }}\n/>\n\n## API Reference\n\n### `ProductsListSection`\n\n| Prop               | Type                                                                                                                        | Default |\n| ------------------ | --------------------------------------------------------------------------------------------------------------------------- | ------- |\n| `breadcrumbs?`     | [`Breadcrumb`](#breadcrumb)`[]`                                                                                             |         |\n| `title?`           | `string` &nbsp;\\|&nbsp; `Promise<string>`                                                                                   |         |\n| `totalCount`       | `number` &nbsp;\\|&nbsp; `Promise<number>`                                                                                   |         |\n| `products`         | [`Product`](/docs/soul/product-card#product)`[]` &nbsp;\\|&nbsp; `Promise<`[`Product`](/docs/soul/product-card#product)`[]>` |         |\n| `filters`          | [`Filter`](#filter)`[]` &nbsp;\\|&nbsp; `Promise<`[`Filter`](#filter)`[]>`                                                   |         |\n| `sortOptions`      | [`Option`](#option)`[]` &nbsp;\\|&nbsp; `Promise<`[`Option`](#option)`[]>`                                                   |         |\n| `compareProducts?` | [`Product`](/docs/soul/product-card#product)`[]` &nbsp;\\|&nbsp; `Promise<`[`Product`](/docs/soul/product-card#product)`[]>` |         |\n| `pagination?`      | [`Pages`](#pages)`[]` &nbsp;\\|&nbsp; `Promise<`[`Pages`](#pages)`[]>`                                                       |         |\n| `compareLabel?`    | `string`                                                                                                                    |         |\n| `filterLabel?`     | `string`                                                                                                                    |         |\n| `sortLabel?`       | `string`                                                                                                                    |         |\n| `sortParam?`       | `string`                                                                                                                    |         |\n\n### `Breadcrumb`\n\n<CodeBlock lang=\"ts\">\n  {`interface Breadcrumb {\n  label: string\n  href: string\n}\n`}\n</CodeBlock>\n\n### `Option`\n\n<CodeBlock lang=\"ts\">\n  {`interface Option {\n  label: string\n  value: string\n}\n`}\n</CodeBlock>\n\n### `Pages`\n\n<CodeBlock lang=\"ts\">\n  {`Pages {\n  name: string\n  previousPage?: string\n  nextPage?: string\n}\n`}\n</CodeBlock>\n\n### `Filter`\n\n<CodeBlock lang=\"ts\">\n  {`\ntype Filter = ToggleGroupFilter | RangeFilter | RatingFilter\n`}\n</CodeBlock>\n\n### `ToggleGroupFilter`\n\n<CodeBlock lang=\"ts\">\n  {`interface ToggleGroupFilter {\n  type: 'toggle-group'\n  paramName: string\n  label: string\n  options: { label: string; value: string }[]\n}`}\n</CodeBlock>\n\n### `RatingFilter`\n\n<CodeBlock lang=\"ts\">\n  {`interface RatingFilter {\n  type: 'rating'\n  paramName: string\n  label: string\n}\n`}\n</CodeBlock>\n\n### `RangeFilter`\n\n<CodeBlock lang=\"ts\">\n  {`interface RangeFilter {\n  type: 'range'\n  label: string\n  minParamName: string\n  maxParamName: string\n  min?: number\n  max?: number\n  minLabel?: string\n  maxLabel?: string\n  minPrepend?: React.ReactNode\n  maxPrepend?: React.ReactNode\n  minPlaceholder?: string\n  maxPlaceholder?: string\n}\n`}\n</CodeBlock>\n\n## Figma\n\n<Figma url=\"https://www.figma.com/design/kgCf8OkDCe90wBSKNNqueL/Soul-Vibe?node-id=1720-21795&t=RzBeIql49iCnmSMw-4\" />\n",
      "docFile": "/dev/vibes/soul/docs/products-list-section.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/products-list-section/index.tsx",
      "componentName": "ProductsListSection",
      "source": {
        "sections/products-list-section/context.tsx": "'use client';\n\nimport { createContext, startTransition, useTransition } from 'react';\n\nexport const ProductListTransitionContext = createContext<ReturnType<typeof useTransition>>([\n  false,\n  startTransition,\n]);\n\nexport function ProductListTransitionProvider({ children }: { children: React.ReactNode }) {\n  return (\n    <ProductListTransitionContext.Provider value={useTransition()}>\n      {children}\n    </ProductListTransitionContext.Provider>\n  );\n}\n",
        "sections/products-list-section/filter-parsers.ts": "import { parseAsArrayOf, parseAsInteger, parseAsString, ParserBuilder } from 'nuqs/server';\n\nimport { Filter } from './filters-panel';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getFilterParsers(filters: Filter[]): Record<string, ParserBuilder<any>> {\n  return filters.reduce((acc, filter) => {\n    switch (filter.type) {\n      case 'range':\n        return {\n          ...acc,\n          [filter.minParamName]: parseAsInteger,\n          [filter.maxParamName]: parseAsInteger,\n        };\n\n      default:\n        return {\n          ...acc,\n          [filter.paramName]: parseAsArrayOf(parseAsString),\n        };\n    }\n  }, {});\n}\n",
        "sections/products-list-section/filters-panel.tsx": "/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-argument */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n'use client';\n\nimport { clsx } from 'clsx';\nimport { ArrowRight } from 'lucide-react';\nimport { parseAsString, useQueryStates } from 'nuqs';\nimport { Suspense, use, useOptimistic } from 'react';\n\nimport { Checkbox } from '@/vibes/soul/form/checkbox';\nimport { RangeInput } from '@/vibes/soul/form/range-input';\nimport { ToggleGroup } from '@/vibes/soul/form/toggle-group';\nimport { Streamable, useStreamable } from '@/vibes/soul/lib/streamable';\nimport { Accordion, Accordions } from '@/vibes/soul/primitives/accordions';\nimport { Button } from '@/vibes/soul/primitives/button';\nimport { CursorPaginationInfo } from '@/vibes/soul/primitives/cursor-pagination';\nimport { Rating } from '@/vibes/soul/primitives/rating';\n\nimport { ProductListTransitionContext } from './context';\nimport { getFilterParsers } from './filter-parsers';\n\nexport interface ToggleGroupFilter {\n  type: 'toggle-group';\n  paramName: string;\n  label: string;\n  options: Array<{ label: string; value: string; disabled?: boolean }>;\n}\n\nexport interface RatingFilter {\n  type: 'rating';\n  paramName: string;\n  label: string;\n  disabled?: boolean;\n}\n\nexport interface RangeFilter {\n  type: 'range';\n  label: string;\n  minParamName: string;\n  maxParamName: string;\n  min?: number;\n  max?: number;\n  minLabel?: string;\n  maxLabel?: string;\n  minPrepend?: React.ReactNode;\n  maxPrepend?: React.ReactNode;\n  minPlaceholder?: string;\n  maxPlaceholder?: string;\n  disabled?: boolean;\n}\n\nexport type Filter = ToggleGroupFilter | RangeFilter | RatingFilter;\n\ninterface Props {\n  className?: string;\n  filters: Filter[] | Promise<Filter[]>;\n  resetFiltersLabel?: string;\n  paginationInfo?: Streamable<CursorPaginationInfo>;\n}\n\nfunction getParamCountLabel(params: Record<string, string | null | string[]>, key: string) {\n  if (Array.isArray(params[key]) && params[key].length > 0) return `(${params[key].length})`;\n\n  return '';\n}\n\nexport function FiltersPanel({ className, filters, resetFiltersLabel }: Props) {\n  return (\n    <Suspense fallback={<FiltersSkeleton />}>\n      <FiltersPanelInner\n        className={className}\n        filters={filters}\n        resetFiltersLabel={resetFiltersLabel}\n      />\n    </Suspense>\n  );\n}\n\nexport function FiltersPanelInner({\n  className,\n  filters: streamableFilters,\n  resetFiltersLabel = 'Reset filters',\n  paginationInfo: streamablePaginationInfo,\n}: Props) {\n  const filters = useStreamable(streamableFilters);\n  const paginationInfo = useStreamable(streamablePaginationInfo);\n  const startCursorParamName = paginationInfo?.startCursorParamName ?? 'before';\n  const endCursorParamName = paginationInfo?.endCursorParamName ?? 'after';\n  const [params, setParams] = useQueryStates(\n    {\n      ...getFilterParsers(filters),\n      [startCursorParamName]: parseAsString,\n      [endCursorParamName]: parseAsString,\n    },\n    {\n      shallow: false,\n      history: 'push',\n    },\n  );\n  const [, startTransition] = use(ProductListTransitionContext);\n  const [optimisticParams, setOptimisticParams] = useOptimistic(params);\n\n  if (filters.length === 0) return null;\n\n  return (\n    <div className={clsx('space-y-5', className)}>\n      <Accordions defaultValue={filters.map((_, i) => i.toString())} type=\"multiple\">\n        {filters.map((filter, index) => {\n          switch (filter.type) {\n            case 'toggle-group':\n              return (\n                <Accordion\n                  key={index}\n                  title={`${filter.label}${getParamCountLabel(optimisticParams, filter.paramName)}`}\n                  value={index.toString()}\n                >\n                  <ToggleGroup\n                    onValueChange={(value) => {\n                      startTransition(async () => {\n                        const nextParams = {\n                          ...optimisticParams,\n                          [startCursorParamName]: null,\n                          [endCursorParamName]: null,\n                          [filter.paramName]: value.length === 0 ? null : value,\n                        };\n\n                        setOptimisticParams(nextParams);\n                        await setParams(nextParams);\n                      });\n                    }}\n                    options={filter.options}\n                    type=\"multiple\"\n                    value={optimisticParams[filter.paramName] ?? []}\n                  />\n                </Accordion>\n              );\n\n            case 'range':\n              return (\n                <Accordion key={index} title={filter.label} value={index.toString()}>\n                  <div className=\"flex items-center gap-2\">\n                    <RangeInput\n                      disabled={filter.disabled}\n                      max={filter.max}\n                      maxLabel={filter.maxLabel}\n                      maxName={filter.minParamName}\n                      maxPlaceholder={filter.maxPlaceholder}\n                      maxPrepend={filter.maxPrepend}\n                      maxValue={optimisticParams[filter.maxParamName] ?? null}\n                      min={filter.min}\n                      minLabel={filter.minLabel}\n                      minName={filter.minParamName}\n                      minPlaceholder={filter.minPlaceholder}\n                      minPrepend={filter.minPrepend}\n                      minValue={optimisticParams[filter.minParamName] ?? null}\n                      onMaxValueChange={(value) => {\n                        startTransition(async () => {\n                          const nextParams = {\n                            ...optimisticParams,\n                            [filter.maxParamName]: value,\n                            [startCursorParamName]: null,\n                            [endCursorParamName]: null,\n                          };\n\n                          setOptimisticParams(nextParams);\n                          await setParams(nextParams);\n                        });\n                      }}\n                      onMinValueChange={(value) => {\n                        startTransition(async () => {\n                          const nextParams = {\n                            ...optimisticParams,\n                            [filter.minParamName]: value,\n                            [startCursorParamName]: null,\n                            [endCursorParamName]: null,\n                          };\n\n                          setOptimisticParams(nextParams);\n                          await setParams(nextParams);\n                        });\n                      }}\n                    />\n                    <Button\n                      className=\"shrink-0\"\n                      disabled={\n                        filter.disabled === true ||\n                        !(\n                          optimisticParams[filter.minParamName] !==\n                          optimisticParams[filter.maxParamName]\n                        )\n                      }\n                      onClick={() => {\n                        startTransition(async () => {\n                          const nextParams = {\n                            ...optimisticParams,\n                            [filter.minParamName]: optimisticParams[filter.minParamName],\n                            [filter.maxParamName]: optimisticParams[filter.maxParamName],\n                            [startCursorParamName]: null,\n                            [endCursorParamName]: null,\n                          };\n\n                          setOptimisticParams(nextParams);\n                          await setParams(nextParams);\n                        });\n                      }}\n                      shape=\"circle\"\n                      size=\"small\"\n                      variant=\"secondary\"\n                    >\n                      <ArrowRight size={20} strokeWidth={1} />\n                    </Button>\n                  </div>\n                </Accordion>\n              );\n\n            case 'rating':\n              return (\n                <Accordion key={index} title={filter.label} value={index.toString()}>\n                  <div className=\"space-y-3\">\n                    {[5, 4, 3, 2, 1].map((rating) => (\n                      <Checkbox\n                        checked={\n                          optimisticParams[filter.paramName]?.includes(rating.toString()) ?? false\n                        }\n                        disabled={filter.disabled}\n                        key={rating}\n                        label={<Rating rating={rating} showRating={false} />}\n                        onCheckedChange={(value) =>\n                          startTransition(async () => {\n                            const ratings = new Set(optimisticParams[filter.paramName]);\n\n                            if (value === true) ratings.add(rating.toString());\n                            else ratings.delete(rating.toString());\n\n                            const nextParams = {\n                              ...optimisticParams,\n                              [filter.paramName]: Array.from(ratings),\n                              [startCursorParamName]: null,\n                              [endCursorParamName]: null,\n                            };\n\n                            setOptimisticParams(nextParams);\n                            await setParams(nextParams);\n                          })\n                        }\n                      />\n                    ))}\n                  </div>\n                </Accordion>\n              );\n\n            default:\n              return null;\n          }\n        })}\n      </Accordions>\n\n      <Button\n        onClick={() => {\n          startTransition(async () => {\n            const nextParams = {\n              ...Object.fromEntries(Object.entries(optimisticParams).map(([key]) => [key, null])),\n              [startCursorParamName]: optimisticParams[startCursorParamName],\n              [endCursorParamName]: optimisticParams[endCursorParamName],\n            };\n\n            setOptimisticParams(nextParams);\n            await setParams(nextParams);\n          });\n        }}\n        size=\"small\"\n        variant=\"secondary\"\n      >\n        {resetFiltersLabel}\n      </Button>\n    </div>\n  );\n}\n\nexport function FiltersSkeleton() {\n  return (\n    <div className=\"space-y-5\">\n      <AccordionSkeleton>\n        <ToggleGroupSkeleton options={4} seed={2} />\n      </AccordionSkeleton>\n      <AccordionSkeleton>\n        <ToggleGroupSkeleton options={3} seed={1} />\n      </AccordionSkeleton>\n      <AccordionSkeleton>\n        <RangeSkeleton />\n      </AccordionSkeleton>\n      {/* Reset Filters Button */}\n      <div className=\"h-10 w-[10ch] animate-pulse rounded-full bg-contrast-100\" />\n    </div>\n  );\n}\n\nfunction AccordionSkeleton({ children }: { children: React.ReactNode }) {\n  return (\n    <div>\n      <div className=\"items-start py-3 font-mono text-sm uppercase last:flex @md:py-4\">\n        <div className=\"inline-flex h-[1lh] items-center\">\n          <div className=\"h-2 w-[10ch] flex-1 animate-pulse rounded-sm bg-contrast-100\" />\n        </div>\n      </div>\n      <div className=\"pb-5\">{children}</div>\n    </div>\n  );\n}\n\nfunction ToggleGroupSkeleton({ options, seed = 0 }: { options: number; seed?: number }) {\n  return (\n    <div className=\"flex flex-wrap gap-2\">\n      {Array.from({ length: options }, (_, i) => {\n        const width = Math.floor(((i * 3 + 7 + seed) % 8) + 6);\n\n        return (\n          <div\n            className=\"h-12 w-[var(--width)] animate-pulse rounded-full bg-contrast-100 px-4\"\n            key={i}\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            style={{ '--width': `${width}ch` } as React.CSSProperties}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nfunction RangeSkeleton() {\n  return (\n    <div className=\"flex items-center gap-2\">\n      <div className=\"h-12 w-[10ch] animate-pulse rounded-lg bg-contrast-100\" />\n      <div className=\"h-12 w-[10ch] animate-pulse rounded-lg bg-contrast-100\" />\n      <div className=\"h-10 w-10 shrink-0 animate-pulse rounded-full bg-contrast-100\" />\n    </div>\n  );\n}\n",
        "sections/products-list-section/index.tsx": "import { Sliders } from 'lucide-react';\nimport { Suspense } from 'react';\n\nimport { Stream, Streamable } from '@/vibes/soul/lib/streamable';\nimport { Breadcrumb, Breadcrumbs, BreadcrumbsSkeleton } from '@/vibes/soul/primitives/breadcrumbs';\nimport { Button } from '@/vibes/soul/primitives/button';\nimport { CursorPagination, CursorPaginationInfo } from '@/vibes/soul/primitives/cursor-pagination';\nimport { ListProduct, ProductsList } from '@/vibes/soul/primitives/products-list';\nimport * as SidePanel from '@/vibes/soul/primitives/side-panel';\n\nimport { ProductListTransitionProvider } from './context';\nimport { Filter, FiltersPanel } from './filters-panel';\nimport { ProductListContainer } from './product-list-container';\nimport { Sorting, Option as SortOption } from './sorting';\n\ninterface Props {\n  breadcrumbs?: Streamable<Breadcrumb[]>;\n  title?: Streamable<string | null>;\n  totalCount: Streamable<number>;\n  products: Streamable<ListProduct[]>;\n  filters: Streamable<Filter[]>;\n  sortOptions: Streamable<SortOption[]>;\n  compareProducts?: Streamable<ListProduct[] | null>;\n  paginationInfo?: Streamable<CursorPaginationInfo>;\n  compareAction?: React.ComponentProps<'form'>['action'];\n  compareLabel?: string;\n  filterLabel?: string;\n  resetFiltersLabel?: string;\n  sortLabel?: Streamable<string | null>;\n  sortParamName?: string;\n  sortDefaultValue?: string;\n  compareParamName?: string;\n  emptyStateSubtitle?: Streamable<string | null>;\n  emptyStateTitle?: Streamable<string | null>;\n  placeholderCount?: number;\n}\n\nexport function ProductsListSection({\n  breadcrumbs: streamableBreadcrumbs,\n  title = 'Products',\n  totalCount,\n  products,\n  compareProducts,\n  sortOptions,\n  sortDefaultValue,\n  filters,\n  compareAction,\n  compareLabel,\n  paginationInfo,\n  filterLabel = 'Filters',\n  resetFiltersLabel,\n  sortLabel,\n  sortParamName,\n  compareParamName,\n  emptyStateSubtitle,\n  emptyStateTitle,\n  placeholderCount = 8,\n}: Props) {\n  return (\n    <ProductListTransitionProvider>\n      <div className=\"@container\">\n        <div className=\"mx-auto max-w-screen-2xl px-4 py-10 @xl:px-6 @xl:py-14 @4xl:px-8 @4xl:py-12\">\n          <div>\n            <Stream fallback={<BreadcrumbsSkeleton />} value={streamableBreadcrumbs}>\n              {(breadcrumbs) =>\n                breadcrumbs && breadcrumbs.length > 1 && <Breadcrumbs breadcrumbs={breadcrumbs} />\n              }\n            </Stream>\n            <div className=\"flex flex-wrap items-center justify-between gap-4 pb-8 pt-6 text-foreground\">\n              <h1 className=\"flex items-center gap-2 font-heading text-3xl font-medium leading-none @lg:text-4xl @2xl:text-5xl\">\n                <Suspense\n                  fallback={\n                    <span className=\"inline-flex h-[1lh] w-[6ch] animate-pulse rounded-lg bg-contrast-100\" />\n                  }\n                >\n                  {title}\n                </Suspense>\n                <Suspense\n                  fallback={\n                    <span className=\"inline-flex h-[1lh] w-[2ch] animate-pulse rounded-lg bg-contrast-100\" />\n                  }\n                >\n                  <span className=\"text-contrast-300\">{totalCount}</span>\n                </Suspense>\n              </h1>\n              <div className=\"flex gap-2\">\n                <Sorting\n                  defaultValue={sortDefaultValue}\n                  label={sortLabel}\n                  options={sortOptions}\n                  paramName={sortParamName}\n                />\n                <div className=\"block @3xl:hidden\">\n                  <SidePanel.Root>\n                    <SidePanel.Trigger asChild>\n                      <Button size=\"medium\" variant=\"secondary\">\n                        {filterLabel}\n                        <span className=\"hidden @xl:block\">\n                          <Sliders size={20} />\n                        </span>\n                      </Button>\n                    </SidePanel.Trigger>\n                    <SidePanel.Content title={filterLabel}>\n                      <Suspense>\n                        <FiltersPanel\n                          filters={filters}\n                          paginationInfo={paginationInfo}\n                          resetFiltersLabel={resetFiltersLabel}\n                        />\n                      </Suspense>\n                    </SidePanel.Content>\n                  </SidePanel.Root>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex items-stretch gap-8 @4xl:gap-10\">\n            <div className=\"hidden w-52 @3xl:block @4xl:w-60\">\n              <FiltersPanel\n                className=\"sticky top-4\"\n                filters={filters}\n                paginationInfo={paginationInfo}\n                resetFiltersLabel={resetFiltersLabel}\n              />\n            </div>\n\n            <ProductListContainer className=\"flex-1\">\n              <ProductsList\n                compareAction={compareAction}\n                compareLabel={compareLabel}\n                compareParamName={compareParamName}\n                compareProducts={compareProducts}\n                emptyStateSubtitle={emptyStateSubtitle}\n                emptyStateTitle={emptyStateTitle}\n                placeholderCount={placeholderCount}\n                products={products}\n                showCompare\n              />\n\n              {paginationInfo && <CursorPagination info={paginationInfo} />}\n            </ProductListContainer>\n          </div>\n        </div>\n      </div>\n    </ProductListTransitionProvider>\n  );\n}\n",
        "sections/products-list-section/product-list-container.tsx": "'use client';\n\nimport { clsx } from 'clsx';\nimport { use } from 'react';\n\nimport { ProductListTransitionContext } from './context';\n\nexport function ProductListContainer({\n  children,\n  className,\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) {\n  const [isPending] = use(ProductListTransitionContext);\n\n  return <div className={clsx(isPending && 'opacity-50', className)}>{children}</div>;\n}\n",
        "sections/products-list-section/sorting.tsx": "'use client';\n\nimport { parseAsString, useQueryState } from 'nuqs';\nimport { Suspense, use, useOptimistic } from 'react';\n\nimport { Select } from '@/vibes/soul/form/select';\nimport { Streamable, useStreamable } from '@/vibes/soul/lib/streamable';\n\nimport { ProductListTransitionContext } from './context';\n\nexport interface Option {\n  label: string;\n  value: string;\n}\n\nexport function Sorting({\n  label,\n  options,\n  paramName = 'sort',\n  defaultValue = '',\n}: {\n  label?: Streamable<string | null>;\n  options: Streamable<Option[]>;\n  paramName?: string;\n  defaultValue?: string;\n}) {\n  return (\n    <Suspense fallback={<SortingSkeleton />}>\n      <SortingInner\n        defaultValue={defaultValue}\n        label={label}\n        options={options}\n        paramName={paramName}\n      />\n    </Suspense>\n  );\n}\n\nfunction SortingInner({\n  paramName,\n  defaultValue,\n  options: streamableOptions,\n  label: streamableLabel,\n}: {\n  paramName: string;\n  defaultValue: string;\n  options: Streamable<Option[]>;\n  label?: Streamable<string | null>;\n}) {\n  const [param, setParam] = useQueryState(\n    paramName,\n    parseAsString.withDefault(defaultValue).withOptions({ shallow: false, history: 'push' }),\n  );\n  const [optimisticParam, setOptimisticParam] = useOptimistic(param);\n  const [, startTransition] = use(ProductListTransitionContext);\n  const options = useStreamable(streamableOptions);\n  const label = useStreamable(streamableLabel) ?? 'Sort';\n\n  return (\n    <Select\n      label={label}\n      name={paramName}\n      onValueChange={(value) => {\n        startTransition(async () => {\n          setOptimisticParam(value);\n          await setParam(value);\n        });\n      }}\n      options={options}\n      value={optimisticParam}\n      variant=\"round\"\n    />\n  );\n}\n\nfunction SortingSkeleton() {\n  return <div className=\"h-[50px] w-[12ch] animate-pulse rounded-full bg-contrast-100\" />;\n}\n"
      },
      "componentType": "section"
    },
    {
      "name": "reset-password-section",
      "dependencies": [
        "button",
        "input"
      ],
      "registryDependencies": [],
      "files": [
        "sections/reset-password-section/index.tsx",
        "sections/reset-password-section/reset-password-form.tsx",
        "sections/reset-password-section/schema.ts"
      ],
      "doc": "---\ntitle: Reset Password Section\npreview: reset-password-section-example\npreviewSize: lg\n---\n",
      "docFile": "/dev/vibes/soul/docs/reset-password-section.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/reset-password-section/index.tsx",
      "componentName": "ResetPasswordSection",
      "source": {
        "sections/reset-password-section/index.tsx": "import { ResetPasswordAction, ResetPasswordForm } from './reset-password-form';\n\ninterface Props {\n  title?: string;\n  subtitle?: string;\n  action: ResetPasswordAction;\n  submitLabel?: string;\n  newPasswordLabel?: string;\n  confirmPasswordLabel?: string;\n}\n\nexport function ResetPasswordSection({\n  title = 'Reset password',\n  subtitle = 'Enter a new password below to reset your account password.',\n  submitLabel,\n  newPasswordLabel,\n  confirmPasswordLabel,\n  action,\n}: Props) {\n  return (\n    <div className=\"@container\">\n      <div className=\"flex flex-col justify-center gap-y-24 px-3 py-10 @xl:flex-row @xl:px-6 @4xl:py-20 @5xl:px-20\">\n        <div className=\"flex w-full flex-col @xl:max-w-md @xl:pr-10 @4xl:pr-20\">\n          <h1 className=\"mb-5 text-4xl font-medium leading-none @xl:text-5xl\">{title}</h1>\n          <p className=\"mb-10 text-base font-light leading-none @xl:text-lg\">{subtitle}</p>\n          <ResetPasswordForm\n            action={action}\n            confirmPasswordLabel={confirmPasswordLabel}\n            newPasswordLabel={newPasswordLabel}\n            submitLabel={submitLabel}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n",
        "sections/reset-password-section/reset-password-form.tsx": "'use client';\n\nimport { getFormProps, getInputProps, SubmissionResult, useForm } from '@conform-to/react';\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod';\nimport { useActionState } from 'react';\n\nimport { FormStatus } from '@/vibes/soul/form/form-status';\nimport { Input } from '@/vibes/soul/form/input';\nimport { Button } from '@/vibes/soul/primitives/button';\n\nimport { schema } from './schema';\n\ntype Action<State, Payload> = (state: Awaited<State>, payload: Payload) => State | Promise<State>;\n\nexport type ResetPasswordAction = Action<\n  { lastResult: SubmissionResult | null; successMessage?: string },\n  FormData\n>;\n\ninterface Props {\n  action: ResetPasswordAction;\n  submitLabel?: string;\n  newPasswordLabel?: string;\n  confirmPasswordLabel?: string;\n}\n\nexport function ResetPasswordForm({\n  action,\n  newPasswordLabel = 'New password',\n  confirmPasswordLabel = 'Confirm Password',\n  submitLabel = 'Update',\n}: Props) {\n  const [{ lastResult, successMessage }, formAction, isPending] = useActionState(action, {\n    lastResult: null,\n  });\n  const [form, fields] = useForm({\n    lastResult,\n    constraint: getZodConstraint(schema),\n    shouldValidate: 'onBlur',\n    shouldRevalidate: 'onInput',\n    onValidate({ formData }) {\n      return parseWithZod(formData, { schema });\n    },\n  });\n\n  return (\n    <form {...getFormProps(form)} action={formAction} className=\"space-y-5\">\n      <Input\n        {...getInputProps(fields.password, { type: 'password' })}\n        errors={fields.password.errors}\n        key={fields.password.id}\n        label={newPasswordLabel}\n      />\n      <Input\n        {...getInputProps(fields.confirmPassword, { type: 'password' })}\n        className=\"mb-6\"\n        errors={fields.confirmPassword.errors}\n        key={fields.confirmPassword.id}\n        label={confirmPasswordLabel}\n      />\n      <Button loading={isPending} size=\"small\" type=\"submit\" variant=\"secondary\">\n        {submitLabel}\n      </Button>\n      {form.errors?.map((error, index) => (\n        <FormStatus key={index} type=\"error\">\n          {error}\n        </FormStatus>\n      ))}\n      {form.status === 'success' && successMessage != null && (\n        <FormStatus>{successMessage}</FormStatus>\n      )}\n    </form>\n  );\n}\n",
        "sections/reset-password-section/schema.ts": "import { z } from 'zod';\n\nexport const schema = z\n  .object({\n    password: z\n      .string()\n      .min(8, { message: 'Be at least 8 characters long' })\n      .regex(/[a-zA-Z]/, { message: 'Contain at least one letter.' })\n      .regex(/[0-9]/, { message: 'Contain at least one number.' })\n      .regex(/[^a-zA-Z0-9]/, {\n        message: 'Contain at least one special character.',\n      })\n      .trim(),\n    confirmPassword: z.string(),\n  })\n  .superRefine(({ confirmPassword, password }, ctx) => {\n    if (confirmPassword !== password) {\n      ctx.addIssue({\n        code: 'custom',\n        message: 'The passwords did not match',\n        path: ['confirmPassword'],\n      });\n    }\n  });\n"
      },
      "componentType": "section"
    },
    {
      "name": "reviews",
      "dependencies": [],
      "registryDependencies": [],
      "files": [
        "sections/reviews/index.tsx"
      ],
      "doc": "---\ntitle: Reviews\npreview: reviews-example\n---\n",
      "docFile": "/dev/vibes/soul/docs/reviews.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/reviews/index.tsx",
      "componentName": "Reviews",
      "source": {
        "sections/reviews/index.tsx": "import { Stream, Streamable } from '@/vibes/soul/lib/streamable';\nimport { CursorPagination, CursorPaginationInfo } from '@/vibes/soul/primitives/cursor-pagination';\nimport { Rating } from '@/vibes/soul/primitives/rating';\nimport { StickySidebarLayout } from '@/vibes/soul/sections/sticky-sidebar-layout';\n\ninterface Review {\n  id: string;\n  rating: number;\n  review: string;\n  name: string;\n  date: string;\n}\n\ninterface Props {\n  reviews: Streamable<Review[]>;\n  averageRating: Streamable<number>;\n  totalCount?: Streamable<number>;\n  paginationInfo?: Streamable<CursorPaginationInfo>;\n  emptyStateMessage?: string;\n  reviewsLabel?: string;\n}\n\nexport function Reviews({\n  reviews: streamableReviews,\n  averageRating: streamableAverageRating,\n  totalCount: streamableTotalCount,\n  paginationInfo: streamablePaginationInfo,\n  emptyStateMessage,\n  reviewsLabel = 'Reviews',\n}: Readonly<Props>) {\n  return (\n    <Stream fallback={<ReviewsSkeleton reviewsLabel={reviewsLabel} />} value={streamableReviews}>\n      {(reviews) => {\n        if (reviews.length === 0)\n          return <ReviewsEmptyState message={emptyStateMessage} reviewsLabel={reviewsLabel} />;\n\n        return (\n          <StickySidebarLayout\n            sidebar={\n              <>\n                <Stream\n                  fallback={\n                    <div className=\"animate-pulse\">\n                      <h2 className=\"mb-4 mt-0 text-xl font-medium @xl:my-5 @xl:text-2xl\">\n                        {reviewsLabel}\n                      </h2>\n                    </div>\n                  }\n                  value={streamableTotalCount}\n                >\n                  {(totalCount) => (\n                    <h2 className=\"mb-4 mt-0 text-xl font-medium @xl:my-5 @xl:text-2xl\">\n                      {reviewsLabel} <span className=\"text-contrast-300\">{totalCount}</span>\n                    </h2>\n                  )}\n                </Stream>\n                <Stream\n                  fallback={\n                    <div className=\"animate-pulse\">\n                      <div className=\"mb-2 h-[1lh] w-[3ch] rounded-md bg-contrast-100 font-heading text-5xl leading-none tracking-tighter @2xl:text-6xl\" />\n                      <div className=\"h-5 w-32 rounded-md bg-contrast-100\" />\n                    </div>\n                  }\n                  value={streamableAverageRating}\n                >\n                  {(averageRating) => (\n                    <>\n                      <div className=\"mb-2 font-heading text-5xl leading-none tracking-tighter @2xl:text-6xl\">\n                        {averageRating}\n                      </div>\n                      <Rating rating={averageRating} showRating={false} />\n                    </>\n                  )}\n                </Stream>\n              </>\n            }\n            sidebarSize=\"medium\"\n          >\n            <div className=\"flex-1 border-t border-contrast-100\">\n              {reviews.map(({ id, rating, review, name, date }) => {\n                return (\n                  <div className=\"border-b border-contrast-100 py-6\" key={id}>\n                    <Rating rating={rating} />\n                    <p className=\"mt-5 text-lg font-semibold text-foreground\">{name}</p>\n                    <p className=\"mb-8 mt-2 leading-normal text-contrast-500\">{review}</p>\n                    <p className=\"text-sm text-contrast-500\">{date}</p>\n                  </div>\n                );\n              })}\n\n              <Stream value={streamablePaginationInfo}>\n                {(paginationInfo) =>\n                  paginationInfo && <CursorPagination info={paginationInfo} scroll={false} />\n                }\n              </Stream>\n            </div>\n          </StickySidebarLayout>\n        );\n      }}\n    </Stream>\n  );\n}\n\nexport function ReviewsEmptyState({\n  message = 'No reviews have been added for this product',\n  reviewsLabel = 'Reviews',\n}: {\n  message?: string;\n  reviewsLabel?: string;\n}) {\n  return (\n    <StickySidebarLayout\n      sidebar={\n        <>\n          <h2 className=\"mb-4 mt-0 text-xl font-medium @xl:my-5 @xl:text-2xl\">\n            {reviewsLabel} <span className=\"text-contrast-300\">0</span>\n          </h2>\n          <div className=\"mb-2 font-heading text-5xl leading-none tracking-tighter @2xl:text-6xl\">\n            0\n          </div>\n          <Rating rating={0} />\n        </>\n      }\n      sidebarSize=\"medium\"\n    >\n      <div className=\"flex-1 border-t border-contrast-100 py-12\">\n        <p className=\"text-center\">{message}</p>\n      </div>\n    </StickySidebarLayout>\n  );\n}\n\nexport function ReviewsSkeleton({ reviewsLabel = 'Reviews' }: { reviewsLabel?: string }) {\n  return (\n    <StickySidebarLayout\n      sidebar={\n        <div className=\"animate-pulse\">\n          <h2 className=\"mb-4 mt-0 text-xl font-medium @xl:my-5 @xl:text-2xl\">{reviewsLabel}</h2>\n          <div className=\"mb-2 h-[1lh] w-[3ch] rounded-md bg-contrast-100 font-heading text-5xl leading-none tracking-tighter @2xl:text-6xl\" />\n          <div className=\"h-5 w-32 rounded-md bg-contrast-100\" />\n        </div>\n      }\n      sidebarSize=\"medium\"\n    >\n      <div className=\"flex-1 animate-pulse border-t border-contrast-100\">\n        {Array.from({ length: 3 }).map((_, index) => (\n          <div className=\"border-b border-contrast-100 py-6\" key={index}>\n            <div className=\"h-5 w-32 rounded-md bg-contrast-100\" />\n            <div className=\"mt-5 h-[1lh] rounded-md bg-contrast-100 text-lg font-semibold\" />\n            <div className=\"mb-8 mt-2 h-[1lh] w-1/2 rounded-md bg-contrast-100 leading-normal\" />\n            <div className=\"h-[1lh] w-24 rounded-md bg-contrast-100 text-sm\" />\n          </div>\n        ))}\n      </div>\n    </StickySidebarLayout>\n  );\n}\n"
      },
      "componentType": "section"
    },
    {
      "name": "sign-in-section",
      "dependencies": [
        "button",
        "input"
      ],
      "registryDependencies": [
        "clsx"
      ],
      "files": [
        "sections/sign-in-section/index.tsx",
        "sections/sign-in-section/sign-in-form.tsx",
        "sections/sign-in-section/schema.ts"
      ],
      "doc": "---\ntitle: Sign In Section\npreview: sign-in-section-example\npreviewSize: lg\n---\n",
      "docFile": "/dev/vibes/soul/docs/sign-in-section.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/sign-in-section/index.tsx",
      "componentName": "SignInSection",
      "source": {
        "sections/sign-in-section/index.tsx": "import Link from 'next/link';\n\nimport { SignInAction, SignInForm } from './sign-in-form';\n\ninterface Props {\n  children?: React.ReactNode;\n  title?: string;\n  action: SignInAction;\n  submitLabel?: string;\n  emailLabel?: string;\n  passwordLabel?: string;\n  forgotPasswordHref?: string;\n  forgotPasswordLabel?: string;\n}\n\nexport function SignInSection({\n  title = 'Sign In',\n  children,\n  action,\n  submitLabel,\n  emailLabel,\n  passwordLabel,\n  forgotPasswordHref = '/forgot-password',\n  forgotPasswordLabel = 'Forgot your password?',\n}: Props) {\n  return (\n    <div className=\"@container\">\n      <div className=\"flex flex-col justify-center gap-y-24 px-3 py-10 @xl:flex-row @xl:px-6 @4xl:py-20 @5xl:px-20\">\n        <div className=\"flex w-full flex-col @xl:max-w-md @xl:border-r @xl:pr-10 @4xl:pr-20\">\n          <h1 className=\"mb-10 text-4xl font-medium leading-none @xl:text-5xl\">{title}</h1>\n          <SignInForm\n            action={action}\n            emailLabel={emailLabel}\n            passwordLabel={passwordLabel}\n            submitLabel={submitLabel}\n          />\n          <Link className=\"-mb-10 mt-4 text-sm font-semibold\" href={forgotPasswordHref}>\n            {forgotPasswordLabel}\n          </Link>\n        </div>\n\n        <div className=\"flex w-full flex-col @xl:max-w-md @xl:pl-10 @4xl:pl-20\">{children}</div>\n      </div>\n    </div>\n  );\n}\n",
        "sections/sign-in-section/schema.ts": "import { z } from 'zod';\n\nexport const schema = z.object({\n  email: z.string().email(),\n  password: z.string(),\n});\n",
        "sections/sign-in-section/sign-in-form.tsx": "'use client';\n\nimport { getFormProps, getInputProps, SubmissionResult, useForm } from '@conform-to/react';\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod';\nimport { useActionState } from 'react';\nimport { useFormStatus } from 'react-dom';\n\nimport { FormStatus } from '@/vibes/soul/form/form-status';\nimport { Input } from '@/vibes/soul/form/input';\nimport { Button } from '@/vibes/soul/primitives/button';\n\nimport { schema } from './schema';\n\ntype Action<State, Payload> = (state: Awaited<State>, payload: Payload) => State | Promise<State>;\n\nexport type SignInAction = Action<SubmissionResult | null, FormData>;\n\ninterface Props {\n  action: SignInAction;\n  emailLabel?: string;\n  passwordLabel?: string;\n  submitLabel?: string;\n}\n\nexport function SignInForm({\n  action,\n  emailLabel = 'Email',\n  passwordLabel = 'Password',\n  submitLabel = 'Sign in',\n}: Props) {\n  const [lastResult, formAction] = useActionState(action, null);\n  const [form, fields] = useForm({\n    lastResult,\n    defaultValue: { email: '', password: '' },\n    constraint: getZodConstraint(schema),\n    shouldValidate: 'onBlur',\n    shouldRevalidate: 'onInput',\n    onValidate({ formData }) {\n      return parseWithZod(formData, { schema });\n    },\n  });\n\n  return (\n    <form {...getFormProps(form)} action={formAction} className=\"flex flex-grow flex-col gap-5\">\n      <Input\n        {...getInputProps(fields.email, { type: 'text' })}\n        errors={fields.email.errors}\n        key={fields.email.id}\n        label={emailLabel}\n      />\n      <Input\n        {...getInputProps(fields.password, { type: 'password' })}\n        className=\"mb-6\"\n        errors={fields.password.errors}\n        key={fields.password.id}\n        label={passwordLabel}\n      />\n      <SubmitButton>{submitLabel}</SubmitButton>\n      {form.errors?.map((error, index) => (\n        <FormStatus key={index} type=\"error\">\n          {error}\n        </FormStatus>\n      ))}\n    </form>\n  );\n}\n\nfunction SubmitButton({ children }: { children: React.ReactNode }) {\n  const { pending } = useFormStatus();\n\n  return (\n    <Button className=\"mt-auto w-full\" loading={pending} type=\"submit\" variant=\"secondary\">\n      {children}\n    </Button>\n  );\n}\n"
      },
      "componentType": "section"
    },
    {
      "name": "sign-up-section",
      "dependencies": [
        "button",
        "input"
      ],
      "registryDependencies": [
        "clsx"
      ],
      "files": [
        "sections/sign-up-section/index.tsx"
      ],
      "doc": "---\ntitle: Sign Up Section\npreview: sign-up-section-example\npreviewSize: lg\n---\n",
      "docFile": "/dev/vibes/soul/docs/sign-up-section.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/sign-up-section/index.tsx",
      "componentName": "SignUpSection",
      "source": {
        "sections/sign-up-section/index.tsx": "import { DynamicForm, DynamicFormAction } from '@/vibes/soul/primitives/dynamic-form';\nimport { Field, FieldGroup } from '@/vibes/soul/primitives/dynamic-form/schema';\n\ninterface Props<F extends Field> {\n  title?: string;\n  action: DynamicFormAction<F>;\n  fields: Array<F | FieldGroup<F>>;\n  submitLabel?: string;\n}\n\nexport function SignUpSection<F extends Field>({\n  title = 'Create Account',\n  fields,\n  submitLabel,\n  action,\n}: Props<F>) {\n  return (\n    <div className=\"@container\">\n      <div className=\"flex flex-col justify-center gap-y-24 px-3 py-10 @xl:flex-row @xl:px-6 @4xl:py-20 @5xl:px-20\">\n        <div className=\"flex w-full flex-col @xl:max-w-lg @xl:pr-10 @4xl:pr-20\">\n          <h1 className=\"mb-10 text-4xl font-medium leading-none @xl:text-5xl\">{title}</h1>\n          <DynamicForm action={action} fields={fields} submitLabel={submitLabel} />\n        </div>\n      </div>\n    </div>\n  );\n}\n"
      },
      "componentType": "section"
    },
    {
      "name": "slide-carousel",
      "dependencies": [],
      "registryDependencies": [
        "clsx",
        "embla-carousel-react",
        "lucide-react"
      ],
      "files": [
        "sections/slide-carousel/index.tsx"
      ],
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/slide-carousel/index.tsx",
      "componentName": "SlideCarousel",
      "source": {},
      "componentType": "section"
    },
    {
      "name": "slideshow",
      "dependencies": [],
      "registryDependencies": [
        "clsx"
      ],
      "files": [
        "sections/slideshow/index.tsx"
      ],
      "doc": "---\ntitle: Slideshow\npreview:\n  Electric: slideshow-electric-example\n  Warm: slideshow-warm-example\n  Luxury: slideshow-luxury-example\npreviewSize: lg\n---\n",
      "docFile": "/dev/vibes/soul/docs/slideshow.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/slideshow/index.tsx",
      "componentName": "Slideshow",
      "source": {
        "sections/slideshow/index.tsx": "'use client';\n\nimport { clsx } from 'clsx';\nimport { EmblaCarouselType } from 'embla-carousel';\nimport Autoplay from 'embla-carousel-autoplay';\nimport Fade from 'embla-carousel-fade';\nimport useEmblaCarousel from 'embla-carousel-react';\nimport { Pause, Play } from 'lucide-react';\nimport Image from 'next/image';\nimport { ComponentPropsWithoutRef, useCallback, useEffect, useState } from 'react';\n\nimport { ButtonLink } from '@/vibes/soul/primitives/button-link';\n\ntype ButtonLinkProps = ComponentPropsWithoutRef<typeof ButtonLink>;\n\ninterface Slide {\n  title: string;\n  description?: string;\n  showDescription?: boolean;\n  image?: { alt: string; blurDataUrl?: string; src: string };\n  cta?: {\n    label: string;\n    href: string;\n    variant?: ButtonLinkProps['variant'];\n    size?: ButtonLinkProps['size'];\n    shape?: ButtonLinkProps['shape'];\n  };\n  showCta?: boolean;\n}\n\ninterface Props {\n  slides: Slide[];\n  playOnInit?: boolean;\n  interval?: number;\n  className?: string;\n}\n\ninterface UseProgressButtonType {\n  selectedIndex: number;\n  scrollSnaps: number[];\n  onProgressButtonClick: (index: number) => void;\n}\n\nconst useProgressButton = (\n  emblaApi: EmblaCarouselType | undefined,\n  onButtonClick?: (emblaApi: EmblaCarouselType) => void,\n): UseProgressButtonType => {\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [scrollSnaps, setScrollSnaps] = useState<number[]>([]);\n\n  const onProgressButtonClick = useCallback(\n    (index: number) => {\n      if (!emblaApi) return;\n      emblaApi.scrollTo(index);\n      if (onButtonClick) onButtonClick(emblaApi);\n    },\n    [emblaApi, onButtonClick],\n  );\n\n  const onInit = useCallback((emblaAPI: EmblaCarouselType) => {\n    setScrollSnaps(emblaAPI.scrollSnapList());\n  }, []);\n\n  const onSelect = useCallback((emblaAPI: EmblaCarouselType) => {\n    setSelectedIndex(emblaAPI.selectedScrollSnap());\n  }, []);\n\n  useEffect(() => {\n    if (!emblaApi) return;\n\n    onInit(emblaApi);\n    onSelect(emblaApi);\n\n    emblaApi.on('reInit', onInit).on('reInit', onSelect).on('select', onSelect);\n  }, [emblaApi, onInit, onSelect]);\n\n  return {\n    selectedIndex,\n    scrollSnaps,\n    onProgressButtonClick,\n  };\n};\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n * :root {\n *   --slideshow-focus: hsl(var(--primary));\n *   --slideshow-mask: hsl(var(--foreground) / 80%);\n *   --slideshow-background: color-mix(in oklab, hsl(var(--primary)), black 75%);\n *   --slideshow-title: hsl(var(--background));\n *   --slideshow-title-font-family: var(--font-family-heading);\n *   --slideshow-description: hsl(var(--background) / 80%);\n *   --slideshow-description-font-family: var(--font-family-body);\n *   --slideshow-pagination: hsl(var(--background));\n *   --slideshow-play-border: hsl(var(--contrast-300) / 50%);\n *   --slideshow-play-border-hover: hsl(var(--contrast-300) / 80%);\n *   --slideshow-play-text: hsl(var(--background));\n *   --slideshow-number: hsl(var(--background));\n *   --slideshow-number-font-family: var(--font-family-mono);\n * }\n * ```\n */\nexport function Slideshow({ slides, playOnInit = true, interval = 5000, className }: Props) {\n  const [emblaRef, emblaApi] = useEmblaCarousel({ loop: true, duration: 20 }, [\n    Autoplay({ delay: interval, playOnInit }),\n    Fade(),\n  ]);\n  const { selectedIndex, scrollSnaps, onProgressButtonClick } = useProgressButton(emblaApi);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [playCount, setPlayCount] = useState(0);\n\n  const toggleAutoplay = useCallback(() => {\n    const autoplay = emblaApi?.plugins().autoplay;\n\n    if (!autoplay) return;\n\n    const playOrStop = autoplay.isPlaying() ? autoplay.stop : autoplay.play;\n    playOrStop();\n  }, [emblaApi]);\n\n  const resetAutoplay = useCallback(() => {\n    const autoplay = emblaApi?.plugins().autoplay;\n    if (!autoplay) return;\n\n    autoplay.reset();\n  }, [emblaApi]);\n\n  useEffect(() => {\n    const autoplay = emblaApi?.plugins().autoplay;\n    if (!autoplay) return;\n\n    setIsPlaying(autoplay.isPlaying());\n    emblaApi\n      .on('autoplay:play', () => {\n        setIsPlaying(true);\n        setPlayCount(playCount + 1);\n      })\n      .on('autoplay:stop', () => {\n        setIsPlaying(false);\n      })\n      .on('reInit', () => {\n        setIsPlaying(autoplay.isPlaying());\n      });\n  }, [emblaApi, playCount]);\n\n  return (\n    <section\n      className={clsx(\n        'relative h-[80vh] bg-[var(--slideshow-background,color-mix(in_oklab,hsl(var(--primary)),black_75%))] @container',\n        className,\n      )}\n    >\n      <div className=\"h-full overflow-hidden\" ref={emblaRef}>\n        <div className=\"flex h-full\">\n          {slides.map(\n            ({ title, description, showDescription = true, image, cta, showCta = true }, idx) => {\n              return (\n                <div\n                  className=\"relative h-full w-full min-w-0 shrink-0 grow-0 basis-full\"\n                  key={idx}\n                >\n                  <div className=\"absolute inset-x-0 bottom-0 z-10 bg-gradient-to-t from-[var(--slideshow-mask,hsl(var(--foreground)/80%))] to-transparent\">\n                    <div className=\"mx-auto w-full max-w-screen-2xl text-balance px-4 pb-16 pt-12 @xl:px-6 @xl:pb-20 @xl:pt-16 @4xl:px-8 @4xl:pt-20\">\n                      <h1 className=\"m-0 max-w-xl font-[family-name:var(--slideshow-title-font-family,var(--font-family-heading))] text-4xl font-medium leading-none text-[var(--slideshow-title,hsl(var(--background)))] @2xl:text-5xl @2xl:leading-[.9] @4xl:text-6xl \">\n                        {title}\n                      </h1>\n                      {showDescription && (\n                        <p className=\"max-w-x mt-2 font-[family-name:var(--slideshow-description-font-family,var(--font-family-body))] text-base leading-normal text-[var(--slideshow-description,hsl(var(--background)/80%))] @xl:mt-3 @xl:text-lg \">\n                          {description}\n                        </p>\n                      )}\n                      {showCta && (\n                        <ButtonLink\n                          className=\"mt-6 @xl:mt-8\"\n                          href={cta?.href ?? '#'}\n                          shape={cta?.shape ?? 'pill'}\n                          size={cta?.size ?? 'large'}\n                          variant={cta?.variant ?? 'tertiary'}\n                        >\n                          {cta?.label ?? 'Learn more'}\n                        </ButtonLink>\n                      )}\n                    </div>\n                  </div>\n\n                  {image?.src != null && image.src !== '' && (\n                    <Image\n                      alt={image.alt}\n                      blurDataURL={image.blurDataUrl}\n                      className=\"block h-20 w-full object-cover\"\n                      fill\n                      placeholder={\n                        image.blurDataUrl != null && image.blurDataUrl !== '' ? 'blur' : 'empty'\n                      }\n                      priority\n                      sizes=\"100vw\"\n                      src={image.src}\n                    />\n                  )}\n                </div>\n              );\n            },\n          )}\n        </div>\n      </div>\n\n      {/* Controls */}\n      <div className=\"absolute bottom-4 left-1/2 flex w-full max-w-screen-2xl -translate-x-1/2 flex-wrap items-center px-4 @xl:bottom-6 @xl:px-6 @4xl:px-8\">\n        {/* Progress Buttons */}\n        {scrollSnaps.map((_: number, index: number) => {\n          return (\n            <button\n              aria-label={`View image number ${index + 1}`}\n              className=\"rounded-lg px-1.5 py-2 focus-visible:outline-0 focus-visible:ring-2 focus-visible:ring-[var(--slideshow-focus,hsl(var(--primary)))]\"\n              key={index}\n              onClick={() => {\n                onProgressButtonClick(index);\n                resetAutoplay();\n              }}\n            >\n              <div className=\"relative overflow-hidden\">\n                {/* White Bar - Current Index Indicator / Progress Bar */}\n                <div\n                  className={clsx(\n                    'absolute h-0.5 bg-[var(--slideshow-pagination,hsl(var(--background)))]',\n                    'opacity-0 fill-mode-forwards',\n                    isPlaying ? 'running' : 'paused',\n                    index === selectedIndex\n                      ? 'opacity-100 ease-linear animate-in slide-in-from-left'\n                      : 'ease-out animate-out fade-out',\n                  )}\n                  key={`progress-${playCount}`} // Force the animation to restart when pressing \"Play\", to match animation with embla's autoplay timer\n                  style={{\n                    animationDuration: index === selectedIndex ? `${interval}ms` : '200ms',\n                    width: `${150 / slides.length}px`,\n                  }}\n                />\n                {/* Grey Bar BG */}\n                <div\n                  className=\"h-0.5 bg-[var(--slideshow-pagination,hsl(var(--background)))] opacity-30\"\n                  style={{ width: `${150 / slides.length}px` }}\n                />\n              </div>\n            </button>\n          );\n        })}\n\n        {/* Carousel Count - \"01/03\" */}\n        <span className=\"ml-auto mr-3 mt-px font-[family-name:var(--slideshow-number-font-family,var(--font-family-mono))] text-sm text-[var(--slideshow-number,hsl(var(--background)))]\">\n          {selectedIndex + 1 < 10 ? `0${selectedIndex + 1}` : selectedIndex + 1}/\n          {slides.length < 10 ? `0${slides.length}` : slides.length}\n        </span>\n\n        {/* Stop / Start Button */}\n        <button\n          aria-label={isPlaying ? 'Pause' : 'Play'}\n          className=\"flex h-7 w-7 items-center justify-center rounded-lg border border-[var(--slideshow-play-border,hsl(var(--contrast-300)/50%))] text-[var(--slideshow-play-text,hsl(var(--background)))] ring-[var(--slideshow-focus)] transition-opacity duration-300 hover:border-[var(--slideshow-play-border-hover,hsl(var(--contrast-300)/80%))] focus-visible:outline-0 focus-visible:ring-2\"\n          onClick={toggleAutoplay}\n          type=\"button\"\n        >\n          {isPlaying ? (\n            <Pause className=\"pointer-events-none\" size={16} strokeWidth={1.5} />\n          ) : (\n            <Play className=\"pointer-events-none\" size={16} strokeWidth={1.5} />\n          )}\n        </button>\n      </div>\n    </section>\n  );\n}\n"
      },
      "componentType": "section"
    },
    {
      "name": "subscribe",
      "dependencies": [
        "input"
      ],
      "registryDependencies": [
        "clsx"
      ],
      "files": [
        "sections/subscribe/index.tsx"
      ],
      "doc": "---\ntitle: Subscribe\npreview: subscribe-example\npreviewSize: lg\n---\n",
      "docFile": "/dev/vibes/soul/docs/subscribe.mdx",
      "example": "<missing>",
      "exampleFile": "/Users/drusellers/dev/mxl/vibes/apps/web/vibes/soul/examples/primitives/subscribe/index.tsx",
      "componentName": "Subscribe",
      "source": {
        "sections/subscribe/index.tsx": "import { SubmissionResult } from '@conform-to/react';\nimport { clsx } from 'clsx';\nimport Image from 'next/image';\n\nimport { InlineEmailForm } from '@/vibes/soul/primitives/inline-email-form';\n\ntype Action<State, Payload> = (state: Awaited<State>, payload: Payload) => State | Promise<State>;\n\nexport function Subscribe({\n  action,\n  image,\n  title,\n  description,\n  placeholder,\n}: {\n  action: Action<{ lastResult: SubmissionResult | null; successMessage?: string }, FormData>;\n  image?: { src: string; alt: string };\n  title: string;\n  description?: string;\n  placeholder?: string;\n}) {\n  return (\n    <section className=\"bg-primary-shadow @container\">\n      <div className=\"flex flex-col items-start @4xl:flex-row @4xl:items-stretch\">\n        {image && (\n          <div className=\"relative min-h-96 w-full bg-primary/10 @4xl:flex-1\">\n            <Image\n              alt={image.alt}\n              className=\"object-cover\"\n              fill\n              sizes=\"(max-width: 680px) 100vw, 50vw\"\n              src={image.src}\n            />\n          </div>\n        )}\n\n        <div className=\"w-full flex-1\">\n          <div\n            className={clsx(\n              'flex w-full flex-col gap-10 px-4 py-10 @xl:px-6 @xl:py-14 @4xl:gap-16 @4xl:px-8 @4xl:py-20',\n              image != null ? '@4xl:max-w-4xl' : 'mx-auto max-w-screen-2xl @4xl:flex-row',\n            )}\n          >\n            <div className=\"flex-1\">\n              <h2 className=\"mb-4 font-heading text-2xl font-medium leading-none text-primary-highlight @xl:text-3xl @4xl:text-4xl\">\n                {title}\n              </h2>\n              <p className=\"text-primary-highlight opacity-75\">{description}</p>\n            </div>\n            <InlineEmailForm action={action} className=\"flex-1\" placeholder={placeholder} />\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n"
      },
      "componentType": "section"
    }
  ]
}
