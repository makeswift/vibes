{
  "name": "card-radio-group",
  "type": "registry:ui",
  "dependencies": [
    "clsx",
    "@radix-ui/react-radio-group"
  ],
  "registryDependencies": [
    "field-error",
    "label"
  ],
  "files": [
    {
      "path": "vibes/soul/form/card-radio-group/index.tsx",
      "content": "import * as RadioGroupPrimitive from '@radix-ui/react-radio-group';\nimport { clsx } from 'clsx';\nimport Image from 'next/image';\nimport * as React from 'react';\n\nimport { FieldError } from '@/vibes/soul/form/field-error';\nimport { Label } from '@/vibes/soul/form/label';\n\ninterface Option {\n  value: string;\n  label: string;\n  image?: { src: string; alt: string };\n  disabled?: boolean;\n}\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n *  :root {\n *   --card-radio-group-focus: var(--primary);\n *   --card-radio-group-light-unchecked-border: var(--contrast-100);\n *   --card-radio-group-light-unchecked-border-hover: var(--contrast-200);\n *   --card-radio-group-light-unchecked-background: var(--background);\n *   --card-radio-group-light-unchecked-text: var(--foreground);\n *   --card-radio-group-light-unchecked-background-hover: var(--contrast-100);\n *   --card-radio-group-light-checked-background: var(--foreground);\n *   --card-radio-group-light-checked-text: var(--background);\n *   --card-radio-group-light-border-error: var(--error);\n *   --card-radio-group-dark-unchecked-border: var(--contrast-500);\n *   --card-radio-group-dark-unchecked-border-hover: var(--contrast-400);\n *   --card-radio-group-dark-unchecked-background: var(--foreground);\n *   --card-radio-group-dark-unchecked-background-hover: var(--contrast-500);\n *   --card-radio-group-dark-unchecked-text: var(--background);\n *   --card-radio-group-dark-checked-background: var(--background);\n *   --card-radio-group-dark-checked-text: var(--foreground);\n *   --card-radio-group-dark-border-error: var(--error);\n *  }\n * ```\n */\nexport const CardRadioGroup = React.forwardRef<\n  React.ComponentRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root> & {\n    label?: string;\n    options: Option[];\n    errors?: string[];\n    onOptionMouseEnter?: (value: string) => void;\n    colorScheme?: 'light' | 'dark';\n  }\n>(\n  (\n    { label, options, errors, className, onOptionMouseEnter, colorScheme = 'light', ...rest },\n    ref,\n  ) => {\n    const id = React.useId();\n\n    return (\n      <div className={clsx('space-y-2', className)}>\n        {label !== undefined && label !== '' && (\n          <Label colorScheme={colorScheme} id={id}>\n            {label}\n          </Label>\n        )}\n        <RadioGroupPrimitive.Root {...rest} aria-labelledby={id} className=\"space-y-2\" ref={ref}>\n          {options.map((option) => (\n            <RadioGroupPrimitive.Item\n              aria-label={option.label}\n              className={clsx(\n                'font-body relative flex h-12 w-full items-center overflow-hidden rounded-lg border text-sm leading-normal font-normal transition-colors focus-visible:ring-2 focus-visible:ring-(--card-radio-group-focus,var(--primary)) focus-visible:outline-0 data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n                {\n                  light:\n                    'border-(--card-radio-group-light-unchecked-border,var(--contrast-100)) text-(--card-radio-group-light-unchecked-text,var(--foreground)) data-[state=checked]:bg-(--card-radio-group-light-checked-background,var(--foreground)) data-[state=checked]:text-(--card-radio-group-light-checked-text,var(--background)) data-[state=unchecked]:bg-(--card-radio-group-light-unchecked-background,var(--background)) data-[state=unchecked]:hover:border-(--card-radio-group-light-unchecked-border-hover,var(--contrast-200)) data-[state=unchecked]:hover:bg-(--card-radio-group-light-unchecked-background-hover,var(--contrast-100))',\n                  dark: 'border-(--card-radio-group-dark-unchecked-border,var(--contrast-500)) text-(--card-radio-group-dark-unchecked-text,var(--background)) data-[state=checked]:bg-(--card-radio-group-dark-checked-background,var(--background)) data-[state=checked]:text-(--card-radio-group-dark-checked-text,var(--foreground)) data-[state=unchecked]:bg-(--card-radio-group-dark-unchecked-background,var(--foreground)) data-[state=unchecked]:hover:border-(--card-radio-group-dark-unchecked-border-hover,var(--contrast-400)) data-[state=unchecked]:hover:bg-(--card-radio-group-dark-unchecked-background-hover,var(--contrast-500))',\n                }[colorScheme],\n                {\n                  light:\n                    errors && errors.length > 0\n                      ? 'data-[state=unchecked]:border-(--card-radio-group-light-border-error,var(--error))'\n                      : 'data-[state=checked]:border-(--card-radio-group-light-checked-background,var(--foreground))',\n                  dark:\n                    errors && errors.length > 0\n                      ? 'data-[state=unchecked]:border-(--card-radio-group-dark-border-error,var(--error))'\n                      : 'data-[state=checked]:border-(--card-radio-group-dark-checked-background,var(--foreground))',\n                }[colorScheme],\n              )}\n              disabled={option.disabled}\n              id={option.value}\n              key={option.value}\n              onMouseEnter={() => {\n                onOptionMouseEnter?.(option.value);\n              }}\n              value={option.value}\n            >\n              {option.image && (\n                <div className=\"relative aspect-square h-full\">\n                  <Image\n                    alt={option.image.alt}\n                    className=\"bg-background object-fill\"\n                    fill\n                    src={option.image.src}\n                  />\n                </div>\n              )}\n\n              <span className=\"flex-1 truncate px-4 text-left text-ellipsis\">{option.label}</span>\n            </RadioGroupPrimitive.Item>\n          ))}\n        </RadioGroupPrimitive.Root>\n        {errors?.map((error) => <FieldError key={error}>{error}</FieldError>)}\n      </div>\n    );\n  },\n);\n\nCardRadioGroup.displayName = 'CardRadioGroup';\n",
      "type": "registry:ui",
      "target": "vibes/soul/form/card-radio-group/index.tsx"
    }
  ]
}