{
  "name": "forgot-password",
  "type": "registry:ui",
  "dependencies": [
    "@conform-to/zod",
    "@conform-to/react",
    "zod"
  ],
  "registryDependencies": [
    "button",
    "input",
    "form-status"
  ],
  "files": [
    {
      "path": "vibes/soul/sections/forgot-password/index.tsx",
      "content": "import { ForgotPasswordAction, ForgotPasswordForm } from './forgot-password-form';\n\nexport interface ForgotPasswordProps {\n  title?: string;\n  subtitle?: string;\n  action: ForgotPasswordAction;\n  emailLabel?: string;\n  submitLabel?: string;\n  placeholder?: string;\n}\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n * :root {\n *   --forgot-password-font-family: var(--font-family-body);\n *   --forgot-password-title-font-family: var(--font-family-heading);\n *   --forgot-password-title: var(--foreground);\n *   --forgot-password-subtitle: var(--contrast-500)\n * }\n * ```\n */\nexport function ForgotPassword({\n  title = 'Forgot your password?',\n  subtitle = 'Enter the email associated with your account below. Weâ€™ll send you instructions to reset your password.',\n  emailLabel,\n  submitLabel,\n  placeholder = 'Enter your email',\n  action,\n}: ForgotPasswordProps) {\n  return (\n    <div className=\"@container\">\n      <div className=\"flex flex-col justify-center gap-y-24 px-3 py-10 @xl:flex-row @xl:px-6 @4xl:py-20 @5xl:px-20\">\n        <div className=\"flex w-full flex-col @xl:max-w-md @xl:pr-10 @4xl:pr-20\">\n          <header className=\"font-(family-name:--forgot-password-font-family,var(--font-family-body))\">\n            <h1 className=\"mb-5 font-(family-name:--forgot-password-title-font-family,var(--font-family-heading)) text-4xl leading-none font-medium text-(--forgot-password-title,var(--foreground)) @xl:text-5xl\">\n              {title}\n            </h1>\n            <p className=\"mb-10 text-base leading-none font-light text-(--forgot-password-subtitle,var(--contrast-500)) @xl:text-lg\">\n              {subtitle}\n            </p>\n          </header>\n          <ForgotPasswordForm\n            action={action}\n            emailLabel={emailLabel}\n            placeholder={placeholder}\n            submitLabel={submitLabel}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/sections/forgot-password/index.tsx"
    },
    {
      "path": "vibes/soul/sections/forgot-password/forgot-password-form.tsx",
      "content": "'use client';\n\nimport { getFormProps, getInputProps, SubmissionResult, useForm } from '@conform-to/react';\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod';\nimport { useActionState } from 'react';\nimport { ReactNode } from 'react';\nimport { useFormStatus } from 'react-dom';\n\nimport { FormStatus } from '@/vibes/soul/form/form-status';\nimport { Input } from '@/vibes/soul/form/input';\nimport { Button } from '@/vibes/soul/primitives/button';\n\nimport { schema } from './schema';\n\ntype Action<State, Payload> = (state: Awaited<State>, payload: Payload) => State | Promise<State>;\n\nexport type ForgotPasswordAction = Action<\n  { lastResult: SubmissionResult | null; successMessage?: string },\n  FormData\n>;\n\nexport interface ForgotPasswordFormProps {\n  action: ForgotPasswordAction;\n  emailLabel?: string;\n  submitLabel?: string;\n  placeholder?: string;\n}\n\nexport function ForgotPasswordForm({\n  action,\n  emailLabel = 'Email',\n  submitLabel = 'Reset password',\n  placeholder,\n}: ForgotPasswordFormProps) {\n  const [{ lastResult, successMessage }, formAction] = useActionState(action, { lastResult: null });\n  const [form, fields] = useForm({\n    defaultValue: {\n      email: '',\n    },\n    lastResult,\n    constraint: getZodConstraint(schema),\n    shouldValidate: 'onBlur',\n    shouldRevalidate: 'onInput',\n    onValidate({ formData }) {\n      return parseWithZod(formData, { schema });\n    },\n  });\n\n  return (\n    <form {...getFormProps(form)} action={formAction} className=\"flex grow flex-col gap-5\">\n      <Input\n        {...getInputProps(fields.email, { type: 'text' })}\n        errors={fields.email.errors}\n        key={fields.email.id}\n        label={emailLabel}\n        placeholder={placeholder}\n      />\n      <SubmitButton>{submitLabel}</SubmitButton>\n      {form.errors?.map((error, index) => (\n        <FormStatus key={index} type=\"error\">\n          {error}\n        </FormStatus>\n      ))}\n      {form.status === 'success' && successMessage != null && (\n        <FormStatus>{successMessage}</FormStatus>\n      )}\n    </form>\n  );\n}\n\nfunction SubmitButton({ children }: { children: ReactNode }) {\n  const { pending } = useFormStatus();\n\n  return (\n    <Button className=\"mt-auto w-full\" loading={pending} type=\"submit\" variant=\"secondary\">\n      {children}\n    </Button>\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/sections/forgot-password/forgot-password-form.tsx"
    },
    {
      "path": "vibes/soul/sections/forgot-password/schema.ts",
      "content": "import { z } from 'zod';\n\nexport const schema = z.object({\n  email: z.string().email({ message: 'Please enter a valid email.' }).trim(),\n});\n",
      "type": "registry:ui",
      "target": "vibes/soul/sections/forgot-password/schema.ts"
    }
  ]
}