{
  "name": "range-input",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "input",
    "button"
  ],
  "files": [
    {
      "path": "vibes/soul/form/range-input/index.tsx",
      "content": "'use client';\n\nimport { ArrowRight } from 'lucide-react';\nimport { ReactNode, useEffect, useState } from 'react';\n\nimport { Input } from '@/vibes/soul/form/input';\nimport { Button } from '@/vibes/soul/primitives/button';\n\nexport interface RangeInputProps {\n  applyLabel?: string;\n  colorScheme?: 'light' | 'dark';\n  disabled?: boolean;\n  max?: number;\n  maxLabel?: string;\n  maxName?: string;\n  maxPlaceholder?: string;\n  maxPrepend?: ReactNode;\n  maxStep?: number;\n  min?: number;\n  minLabel?: string;\n  minName?: string;\n  minPlaceholder?: string;\n  minPrepend?: ReactNode;\n  minStep?: number;\n  onChange?: (value: { min: number | null; max: number | null }) => void;\n  value?: { min: number | null; max: number | null };\n}\n\nconst clamp = (value: number, min: number | null, max?: number | null) =>\n  Math.min(Math.max(value, min ?? -Infinity), max ?? Infinity);\n\nexport function RangeInput({\n  applyLabel = 'Apply',\n  colorScheme = 'light',\n  disabled = false,\n  max = 100,\n  maxLabel = 'Max',\n  maxName = 'max',\n  maxPlaceholder = 'Max',\n  maxPrepend = null,\n  maxStep = 1,\n  min = 0,\n  minLabel = 'Min',\n  minName = 'min',\n  minPlaceholder = 'Min',\n  minPrepend = null,\n  minStep = 1,\n  onChange,\n  value,\n}: RangeInputProps) {\n  const [state, setState] = useState({\n    min: value?.min?.toString() ?? '',\n    max: value?.max?.toString() ?? '',\n  });\n\n  useEffect(() => {\n    setState({ min: value?.min?.toString() ?? '', max: value?.max?.toString() ?? '' });\n  }, [value]);\n\n  const parsedMinState = parseInt(state.min, 10);\n  const parsedMaxState = parseInt(state.max, 10);\n  const minStateAsNumber = Number.isNaN(parsedMinState) ? null : parsedMinState;\n  const maxStateAsNumber = Number.isNaN(parsedMaxState) ? null : parsedMaxState;\n\n  return (\n    <div className=\"flex w-full items-center gap-2\">\n      <Input\n        className=\"flex-1\"\n        colorScheme={colorScheme}\n        disabled={disabled}\n        label={minLabel}\n        max={maxStateAsNumber ?? max}\n        min={min}\n        name={minName}\n        onBlur={(e) => {\n          const clamped = clamp(\n            e.currentTarget.valueAsNumber,\n            min,\n            e.currentTarget.max === '' ? null : parseInt(e.currentTarget.max, 10),\n          );\n          const nextValue = Number.isNaN(clamped) ? null : clamped;\n\n          setState((prev) => ({ ...prev, min: nextValue?.toString() ?? '' }));\n        }}\n        onChange={(e) => {\n          const nextValue = e.currentTarget.value;\n\n          setState((prev) => ({ ...prev, min: nextValue }));\n        }}\n        placeholder={minPlaceholder}\n        prepend={minPrepend}\n        step={minStep}\n        type=\"number\"\n        value={state.min}\n      />\n      <Input\n        className=\"flex-1\"\n        colorScheme={colorScheme}\n        disabled={disabled}\n        label={maxLabel}\n        max={max}\n        min={minStateAsNumber ?? min}\n        name={maxName}\n        onBlur={(e) => {\n          const clamped = clamp(\n            e.currentTarget.valueAsNumber,\n            e.currentTarget.min === '' ? null : parseInt(e.currentTarget.min, 10),\n            max,\n          );\n          const nextValue = Number.isNaN(clamped) ? null : clamped;\n\n          setState((prev) => ({ ...prev, max: nextValue?.toString() ?? '' }));\n        }}\n        onChange={(e) => {\n          const nextValue = e.currentTarget.value;\n\n          setState((prev) => ({ ...prev, max: nextValue }));\n        }}\n        placeholder={maxPlaceholder}\n        prepend={maxPrepend}\n        step={maxStep}\n        type=\"number\"\n        value={state.max}\n      />\n      <Button\n        className=\"shrink-0\"\n        disabled={disabled || (state.min === state.max && state.min !== '' && state.max !== '')}\n        onClick={() =>\n          onChange?.({\n            min: state.min === '' ? null : Number(state.min),\n            max: state.max === '' ? null : Number(state.max),\n          })\n        }\n        shape=\"circle\"\n        size=\"small\"\n        variant=\"secondary\"\n      >\n        <span className=\"sr-only\">{applyLabel}</span>\n        <ArrowRight size={20} strokeWidth={1} />\n      </Button>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/form/range-input/index.tsx"
    }
  ]
}