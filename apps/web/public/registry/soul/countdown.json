{
  "name": "countdown",
  "type": "registry:ui",
  "dependencies": [
    "clsx",
    "lucide-react"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "vibes/soul/sections/countdown/index.tsx",
      "content": "'use client';\n\nimport { clsx } from 'clsx';\nimport { X } from 'lucide-react';\nimport Image from 'next/image';\nimport { Fragment, useCallback, useEffect, useState } from 'react';\n\ninterface Default {\n  type: 'default';\n  images?: string[];\n}\n\ninterface Full {\n  type: 'full';\n  backgroundImage: string;\n}\n\ninterface Split {\n  type: 'split';\n  image: string;\n}\n\ninterface Banner {\n  type: 'banner';\n}\n\nexport interface CountdownProps {\n  title: string;\n  targetDate: Date;\n  variant: Default | Full | Split | Banner;\n}\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n * :root {\n *   --countdown-default-split-background: var(--primary-shadow);\n *   --countdown-number-default-background: var(--primary);\n *   --countdown-number-default-text: var(--primary-shadow);\n *   --countdown-number-full-background: var(--primary-shadow);\n *   --countdown-number-full-text: var(--primary);\n *   --countdown-image-background: var(--primary-shadow);\n *   --countdown-text: var(--background);\n *   --countdown-icon: var(--background);\n *   --countdown-font-family: var(--font-family-body);\n * }\n * ```\n */\nexport function Countdown({ title, targetDate, variant = { type: 'default' } }: CountdownProps) {\n  const calculateTimeLeft = useCallback(() => {\n    const difference = +targetDate - +new Date();\n    let timeRemaining = { days: 0, hours: 0, mins: 0, secs: 0 };\n\n    if (difference > 0) {\n      timeRemaining = {\n        days: Math.floor(difference / (1000 * 60 * 60 * 24)),\n        hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\n        mins: Math.floor((difference / 1000 / 60) % 60),\n        secs: Math.floor((difference / 1000) % 60),\n      };\n    }\n\n    return timeRemaining;\n  }, [targetDate]);\n  const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());\n  const [banner, setBanner] = useState({ dismissed: false, initialized: false });\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setTimeLeft(calculateTimeLeft());\n    }, 1000);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, [targetDate, calculateTimeLeft]);\n\n  useEffect(() => {\n    const hidden = localStorage.getItem('hidden-countdown') === 'true';\n    setBanner({ dismissed: hidden, initialized: true });\n  }, []);\n\n  const hideBanner = useCallback(() => {\n    setBanner((prev) => ({ ...prev, dismissed: true }));\n    localStorage.setItem('hidden-countdown', 'true');\n  }, []);\n\n  if (!banner.initialized) return null;\n\n  const AnimatedNumber = ({ value }: { value: number }) => {\n    const [displayValue, setDisplayValue] = useState(value);\n\n    useEffect(() => {\n      const timeout = setTimeout(() => setDisplayValue(value));\n      return () => clearTimeout(timeout);\n    }, [value]);\n\n    return (\n      <div className=\"relative h-14 overflow-hidden [&>*]:h-14\">\n        {Array.from({ length: 10 }, (_, i) => (\n          <div\n            className=\"flex shrink-0 flex-col items-center justify-center\"\n            key={i}\n            style={{ transform: `translateY(-${displayValue * 100}%)` }}\n          >\n            {i}\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const TwoDigitAnimatedNumber = ({ value }: { value: number }) => (\n    <div\n      className={clsx(\n        'flex items-center justify-center rounded-lg',\n        variant.type === 'full'\n          ? 'bg-(--countdown-number-full-background,var(--primary-shadow)) text-(--countdown-number-full-text,var(--primary))'\n          : 'bg-(--countdown-number-default-background,var(--primary)) text-(--countdown-number-default-text,var(--primary-shadow))',\n        {\n          default: 'h-14 w-14 @2xl:h-28 @2xl:w-28',\n          full: 'h-14 w-14 @2xl:h-28 @2xl:w-28',\n          split: 'h-14 w-14 @2xl:h-16 @2xl:w-16',\n          banner: 'h-9 w-9',\n        }[variant.type],\n      )}\n    >\n      <AnimatedNumber value={Math.floor(value / 10)} />\n      <AnimatedNumber value={value % 10} />\n    </div>\n  );\n\n  return (\n    <section\n      className={clsx(\n        '@container relative grid origin-top font-(family-name:--button-font-family,var(--font-family-body)) transition-all duration-300 ease-out',\n        {\n          'pointer-events-none grid-rows-[0fr]': variant.type === 'banner' && banner.dismissed,\n          'grid-rows-[1fr]': variant.type === 'banner' && !banner.dismissed,\n          'fixed top-0': variant.type === 'banner',\n          'bg-(--countdown-default-split-background,var(--primary-shadow))':\n            variant.type === 'default' || variant.type === 'split',\n        },\n      )}\n    >\n      <div className=\"overflow-hidden\">\n        <div\n          className={clsx(\n            'relative flex flex-col items-center justify-center overflow-hidden bg-(--countdown-image-background,var(--primary-shadow)) bg-cover bg-center bg-no-repeat font-medium',\n            {\n              default: 'py-32 @5xl:container @5xl:mx-auto',\n              full: 'py-40',\n              split: '@3xl:mx-auto @3xl:grid @3xl:grid-cols-2 @5xl:container',\n              banner: '',\n            }[variant.type],\n          )}\n        >\n          {variant.type === 'full' || variant.type === 'split' ? (\n            <Image\n              alt={title}\n              className={clsx('h-full w-full object-cover', {\n                'absolute inset-0': variant.type === 'full',\n              })}\n              height={1000}\n              src={variant.type === 'full' ? variant.backgroundImage : variant.image}\n              width={1000}\n            />\n          ) : null}\n\n          {variant.type === 'default' && variant.images\n            ? variant.images.map((image, index) => (\n                <Image\n                  alt={title}\n                  className={clsx(\n                    'absolute object-contain',\n                    index === 0\n                      ? 'top-0 -left-20 -translate-y-2/3 @5xl:-translate-y-1/3'\n                      : '-right-20 bottom-0 translate-y-2/3 @5xl:translate-y-1/3',\n                  )}\n                  height={500}\n                  key={`image-${index + 1}`}\n                  src={image}\n                  width={500}\n                />\n              ))\n            : null}\n\n          <div\n            className={clsx(\n              'relative z-10 px-4 text-center text-(--countdown-text,var(--background)) @xl:px-6 @4xl:px-8',\n              {\n                default:\n                  'text-3xl @2xl:text-6xl [&>div>div>span]:text-lg [&>h2]:text-3xl @2xl:[&>h2]:text-[40px]',\n                full: 'text-3xl @2xl:text-6xl [&>div>div>span]:text-lg',\n                split: 'py-9 text-3xl @2xl:text-[40px] [&>div>div>span]:text-xs [&>h2]:text-2xl',\n                banner:\n                  'flex flex-col items-center gap-4 py-2.5 text-lg @xl:flex-row @xl:gap-6 @2xl:text-xl [&>div>div>span]:text-xs [&>div>span]:mt-0.5',\n              }[variant.type],\n            )}\n          >\n            <h2\n              className={clsx('leading-[1.1] [text-wrap:pretty]', {\n                'mb-6 max-w-2xl': variant.type !== 'banner',\n              })}\n            >\n              {title}\n            </h2>\n            <div className=\"flex justify-center space-x-2\">\n              {Object.entries(timeLeft).map(([unit, value], index, array) => (\n                <Fragment key={unit}>\n                  <div className=\"flex flex-col items-center\" key={unit}>\n                    <TwoDigitAnimatedNumber value={value} />\n                    <span className=\"mt-1 capitalize\">{unit}</span>\n                  </div>\n                  {index < array.length - 1 && <span>:</span>}\n                </Fragment>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Close button (banner variation) */}\n        {variant.type === 'banner' ? (\n          <button\n            aria-label=\"Dismiss banner\"\n            className=\"absolute top-1/2 right-5 z-10 -translate-y-1/2 text-(--countdown-icon,var(--background)) transition-transform hover:scale-110\"\n            onClick={(e) => {\n              e.preventDefault();\n              hideBanner();\n            }}\n            type=\"button\"\n          >\n            <X className=\"h-5 w-5\" />\n          </button>\n        ) : null}\n      </div>\n    </section>\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/sections/countdown/index.tsx"
    }
  ]
}