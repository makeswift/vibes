{
  "name": "category-card-carousel",
  "type": "registry:ui",
  "dependencies": [
    "clsx",
    "lucide-react"
  ],
  "registryDependencies": [
    "carousel",
    "skeleton",
    "card",
    "streamable"
  ],
  "files": [
    {
      "path": "vibes/soul/sections/category-card-carousel/index.tsx",
      "content": "import { clsx } from 'clsx';\nimport { ArrowLeft, ArrowRight } from 'lucide-react';\n\nimport { Stream, Streamable } from '@/vibes/soul/lib/streamable';\nimport {\n  Carousel,\n  CarouselButtons,\n  CarouselContent,\n  CarouselItem,\n  CarouselScrollbar,\n} from '@/vibes/soul/primitives/carousel';\nimport {\n  CategoryCard,\n  type CategoryCardContent,\n  CategoryCardSkeleton,\n} from '@/vibes/soul/primitives/category-card';\nimport * as Skeleton from '@/vibes/soul/primitives/skeleton';\n\nexport interface CategoryCardCarouselProps {\n  cards: Streamable<CategoryCardContent[]>;\n  aspectRatio?: '5:6' | '3:4' | '1:1';\n  textColorScheme?: 'light' | 'dark';\n  iconColorScheme?: 'light' | 'dark';\n  carouselColorScheme?: 'light' | 'dark';\n  className?: string;\n  emptyStateTitle?: Streamable<string>;\n  emptyStateSubtitle?: Streamable<string>;\n  scrollbarLabel?: string;\n  previousLabel?: string;\n  nextLabel?: string;\n  showButtons?: boolean;\n  showScrollbar?: boolean;\n  hideOverflow?: boolean;\n  placeholderCount?: number;\n}\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n * :root {\n *   --category-card-carousel-light-empty-title: var(--foreground);\n *   --category-card-carousel-light-empty-subtitle: var(--contrast-500);\n *   --category-card-carousel-dark-empty-title: var(--background);\n *   --category-card-carousel-dark-empty-subtitle: var(--contrast-100);\n * }\n * ```\n */\nexport function CategoryCardCarousel({\n  cards: streamableCards,\n  aspectRatio = '5:6',\n  textColorScheme,\n  iconColorScheme,\n  carouselColorScheme = 'light',\n  className,\n  emptyStateTitle,\n  emptyStateSubtitle,\n  scrollbarLabel,\n  previousLabel,\n  nextLabel,\n  showButtons = true,\n  showScrollbar = true,\n  hideOverflow,\n}: CategoryCardCarouselProps) {\n  return (\n    <Stream\n      fallback={<CategoryCardCarouselSkeleton className={className} hideOverflow={hideOverflow} />}\n      value={streamableCards}\n    >\n      {(cards) => {\n        if (cards.length === 0) {\n          return (\n            <CategoryCardCarouselEmptyState\n              carouselColorScheme={carouselColorScheme}\n              className={className}\n              emptyStateSubtitle={emptyStateSubtitle}\n              emptyStateTitle={emptyStateTitle}\n              hideOverflow={hideOverflow}\n            />\n          );\n        }\n\n        return (\n          <Carousel className={className} hideOverflow={hideOverflow}>\n            <CarouselContent>\n              {cards.map(({ ...card }) => (\n                <CarouselItem\n                  className=\"basis-full @sm:basis-1/2 @md:basis-1/3 @4xl:basis-1/4\"\n                  key={card.href}\n                >\n                  <CategoryCard\n                    {...card}\n                    aspectRatio={aspectRatio}\n                    iconColorScheme={iconColorScheme}\n                    textColorScheme={textColorScheme}\n                  />\n                </CarouselItem>\n              ))}\n            </CarouselContent>\n            {(showButtons || showScrollbar) && (\n              <div className=\"mt-10 flex w-full items-center justify-between gap-8\">\n                <CarouselScrollbar\n                  className={clsx(!showScrollbar && 'pointer-events-none invisible')}\n                  colorScheme={carouselColorScheme}\n                  label={scrollbarLabel}\n                />\n                <CarouselButtons\n                  className={clsx(!showButtons && 'pointer-events-none invisible')}\n                  colorScheme={carouselColorScheme}\n                  nextLabel={nextLabel}\n                  previousLabel={previousLabel}\n                />\n              </div>\n            )}\n          </Carousel>\n        );\n      }}\n    </Stream>\n  );\n}\n\nexport function CategoryCardCarouselSkeleton({\n  className,\n  placeholderCount = 4,\n  hideOverflow = true,\n}: Pick<\n  CategoryCardCarouselProps,\n  'className' | 'emptyStateTitle' | 'emptyStateSubtitle' | 'hideOverflow' | 'placeholderCount'\n>) {\n  return (\n    <Skeleton.Root\n      className={clsx('group-has-[[data-pending]]/card-carousel:animate-pulse', className)}\n      hideOverflow={hideOverflow}\n      pending\n    >\n      <div className=\"w-full\">\n        <div className=\"-ml-4 flex @2xl:-ml-5\">\n          {Array.from({ length: placeholderCount }).map((_, index) => (\n            <div\n              className=\"min-w-0 shrink-0 grow-0 basis-full @sm:basis-1/2 @md:basis-1/3 @2xl:pl-5 @4xl:basis-1/4\"\n              key={index}\n            >\n              <CategoryCardSkeleton />\n            </div>\n          ))}\n        </div>\n      </div>\n      <div className=\"mt-10 flex w-full items-center justify-between gap-8\">\n        <Skeleton.Box className=\"h-1 w-full max-w-56 rounded\" />\n        <div className=\"flex gap-2\">\n          <Skeleton.Icon icon={<ArrowLeft aria-hidden className=\"h-6 w-6\" strokeWidth={1.5} />} />\n          <Skeleton.Icon icon={<ArrowRight aria-hidden className=\"h-6 w-6\" strokeWidth={1.5} />} />\n        </div>\n      </div>\n    </Skeleton.Root>\n  );\n}\n\nexport function CategoryCardCarouselEmptyState({\n  className,\n  placeholderCount = 4,\n  emptyStateTitle,\n  emptyStateSubtitle,\n  hideOverflow = true,\n  carouselColorScheme = 'light',\n}: Pick<\n  CategoryCardCarouselProps,\n  | 'className'\n  | 'emptyStateTitle'\n  | 'emptyStateSubtitle'\n  | 'hideOverflow'\n  | 'placeholderCount'\n  | 'carouselColorScheme'\n>) {\n  return (\n    <Skeleton.Root className={clsx('relative', className)} hideOverflow={hideOverflow}>\n      <div className=\"w-full\">\n        <div className=\"-ml-4 flex [mask-image:linear-gradient(to_bottom,_black_0%,_transparent_90%)] @2xl:-ml-5\">\n          {Array.from({ length: placeholderCount }).map((_, index) => (\n            <div\n              className=\"min-w-0 shrink-0 grow-0 basis-full @sm:basis-1/2 @md:basis-1/3 @2xl:pl-5 @4xl:basis-1/4\"\n              key={index}\n            >\n              <CategoryCardSkeleton />\n            </div>\n          ))}\n        </div>\n      </div>\n      <div className=\"absolute inset-0 mx-auto px-3 py-16 pb-3 @4xl:px-10 @4xl:pt-28 @4xl:pb-10\">\n        <div className=\"mx-auto max-w-xl space-y-2 text-center @4xl:space-y-3\">\n          <h3\n            className={clsx(\n              'font-heading text-2xl leading-tight @4xl:text-4xl',\n              {\n                light: 'text-(--category-card-carousel-light-empty-title,var(--foreground))',\n                dark: 'text-(--category-card-carousel-dark-empty-title,var(--background))',\n              }[carouselColorScheme],\n            )}\n          >\n            {emptyStateTitle}\n          </h3>\n          <p\n            className={clsx(\n              'text-sm @4xl:text-lg',\n              {\n                light: 'text-(--category-card-carousel-light-empty-subtitle,var(--contrast-500))',\n                dark: 'text-(--category-card-carousel-dark-empty-subtitle,var(--contrast-200))',\n              }[carouselColorScheme],\n            )}\n          >\n            {emptyStateSubtitle}\n          </p>\n        </div>\n      </div>\n    </Skeleton.Root>\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/sections/category-card-carousel/index.tsx"
    }
  ]
}