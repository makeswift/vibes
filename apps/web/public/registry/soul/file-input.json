{
  "name": "file-input",
  "type": "registry:ui",
  "dependencies": [
    "clsx",
    "lucide-react"
  ],
  "registryDependencies": [
    "label",
    "button",
    "toaster"
  ],
  "files": [
    {
      "path": "vibes/soul/form/file-input/index.tsx",
      "content": "'use client';\n\nimport clsx from 'clsx';\nimport { UploadIcon } from 'lucide-react';\nimport type { ChangeEvent, ComponentPropsWithRef, DragEvent } from 'react';\nimport { useCallback, useId, useRef, useState } from 'react';\n\nimport { FileDropzone } from '@/vibes/soul/form/file-input/file-dropzone';\nimport { FileItem } from '@/vibes/soul/form/file-input/file-item';\nimport { Label } from '@/vibes/soul/form/label';\nimport { Button } from '@/vibes/soul/primitives/button';\nimport { toast } from '@/vibes/soul/primitives/toaster';\n\nexport interface UploadOptions {\n  onProgress: (file: File, progress: number) => void;\n  onSuccess: (file: File) => void;\n  onError: (file: File, error: Error) => void;\n}\n\nexport interface FileState {\n  progress: number;\n  status: 'idle' | 'uploading' | 'success' | 'error';\n  error?: string;\n}\n\nexport interface FileInputProps extends ComponentPropsWithRef<'input'> {\n  id?: string;\n  className?: string;\n  initialFiles?: Map<File, FileState>;\n  onFilesChange?: (files: Map<File, FileState>) => void;\n  onUpload?: (files: File[], options: UploadOptions) => Promise<void> | void;\n  onFileAccept?: (file: File) => void;\n  onFileReject?: (file: File, message: string) => void;\n  onFileValidate?: (file: File) => string | null | undefined;\n  hideLabel?: boolean;\n  message?: string;\n  cta?: string;\n  hint?: string;\n  invalid?: boolean;\n  label?: string;\n  maxFiles?: number;\n  maxSize?: number;\n  uploadingLabel?: string;\n  successLabel?: string;\n  errorLabel?: string;\n}\n\nexport function FileInput({\n  id,\n  initialFiles,\n  hideLabel = false,\n  message,\n  invalid,\n  cta = 'Upload file',\n  label = 'File upload',\n  hint = 'or drag and drop files here',\n  maxFiles,\n  maxSize,\n  onFilesChange,\n  onFileAccept,\n  onFileReject,\n  onFileValidate,\n  onUpload,\n  className,\n  disabled,\n  accept,\n  multiple,\n  uploadingLabel = 'Uploading',\n  successLabel = 'Upload complete',\n  errorLabel = 'Error',\n  ...props\n}: FileInputProps) {\n  const inputRef = useRef<HTMLInputElement | null>(null);\n\n  const generatedId = useId();\n\n  const [files, setFiles] = useState(initialFiles ?? new Map<File, FileState>());\n\n  const updateInputFiles = useCallback(\n    (newFiles: File[]) => {\n      const inputElement = inputRef.current;\n\n      if (!inputElement) return;\n\n      const dataTransfer = new DataTransfer();\n\n      const existingFiles = Array.from(files.keys());\n\n      const allFiles = [...existingFiles, ...newFiles];\n      const limitedFiles = maxFiles !== undefined ? allFiles.slice(0, maxFiles) : allFiles;\n\n      limitedFiles.forEach((file) => dataTransfer.items.add(file));\n\n      inputElement.files = dataTransfer.files;\n\n      setFiles((prev) => {\n        const newMap = new Map<File, FileState>();\n\n        limitedFiles.forEach((file) => {\n          const existingState = prev.get(file);\n          newMap.set(file, existingState ?? { progress: 0, status: 'idle' });\n        });\n\n        onFilesChange?.(newMap);\n        return newMap;\n      });\n    },\n    [maxFiles, onFilesChange, files],\n  );\n\n  const handleFiles = useCallback(\n    (newFiles: File[]) => {\n      const filesToUpload: File[] = [];\n\n      const acceptedFiles = new Map<File, FileState>();\n\n      // Default file validation\n      newFiles.forEach((file) => {\n        let rejected = false;\n        let rejectionReason = '';\n\n        if (onFileValidate) {\n          const validationMessage = onFileValidate(file);\n          if (validationMessage !== undefined && validationMessage !== null) {\n            rejectionReason = validationMessage;\n            rejected = true;\n          }\n        }\n\n        if (!rejected && accept !== undefined) {\n          const acceptTypes = accept.split(',').map((t) => t.trim().toLowerCase());\n\n          const fileType = file.type.toLowerCase();\n          const fileExtension = `.${file.name.split('.').pop()?.toLowerCase()}`;\n\n          const isAccepted = acceptTypes.some(\n            (type) =>\n              type === fileType ||\n              type === fileExtension ||\n              (type.endsWith('/*') && fileType.startsWith(type.slice(0, -1))),\n          );\n\n          if (!isAccepted) {\n            rejectionReason = 'File type not accepted';\n            rejected = true;\n          }\n        }\n\n        if (!rejected && maxSize !== undefined && file.size > maxSize) {\n          rejectionReason = `File size exceeds limit`;\n          rejected = true;\n        }\n\n        if (rejected) {\n          if (onFileReject) {\n            onFileReject(file, rejectionReason);\n          } else {\n            toast.error(`\"${file.name}\" was rejected`, {\n              description: rejectionReason,\n            });\n          }\n        } else {\n          onFileAccept?.(file);\n          filesToUpload.push(file);\n          acceptedFiles.set(file, { progress: 0, status: 'idle' });\n        }\n      });\n\n      // Update inputRef with accepted files\n      updateInputFiles(Array.from(acceptedFiles.keys()));\n\n      // Handle onUpload\n      if (filesToUpload.length > 0 && onUpload) {\n        const updateFileState = (file: File, newState: Partial<FileState>) => {\n          setFiles((currentMap) => {\n            const newUploadMap = new Map(currentMap);\n            const currentState = newUploadMap.get(file);\n            if (currentState) {\n              newUploadMap.set(file, { ...currentState, ...newState });\n            }\n            onFilesChange?.(newUploadMap);\n            return newUploadMap;\n          });\n        };\n\n        void onUpload(filesToUpload, {\n          onProgress: (file, progress) => updateFileState(file, { progress, status: 'uploading' }),\n          onSuccess: (file) => updateFileState(file, { progress: 100, status: 'success' }),\n          onError: (file, error) =>\n            updateFileState(file, { status: 'error', error: error.message }),\n        });\n      }\n    },\n    [\n      accept,\n      maxSize,\n      onFileAccept,\n      onFileReject,\n      onFileValidate,\n      updateInputFiles,\n      onFilesChange,\n      onUpload,\n    ],\n  );\n\n  const handleOnChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      const newFiles = Array.from(event.target.files ?? []);\n\n      handleFiles(newFiles);\n    },\n    [handleFiles],\n  );\n\n  const handleOnDrop = useCallback(\n    (event: DragEvent<HTMLDivElement>) => {\n      event.preventDefault();\n      const newFiles = Array.from(event.dataTransfer.files);\n\n      handleFiles(newFiles);\n    },\n    [handleFiles],\n  );\n\n  const handleRemoveFile = useCallback(\n    (fileToRemove: File) => {\n      const input = inputRef.current;\n\n      if (!input?.files) return;\n\n      const dataTransfer = new DataTransfer();\n      const currentFiles = Array.from(input.files);\n\n      currentFiles\n        .filter((file) => file !== fileToRemove)\n        .forEach((file) => dataTransfer.items.add(file));\n\n      input.files = dataTransfer.files;\n\n      setFiles((prev) => {\n        const newMap = new Map(prev);\n        newMap.delete(fileToRemove);\n        onFilesChange?.(newMap);\n        return newMap;\n      });\n    },\n    [setFiles, onFilesChange],\n  );\n\n  return (\n    <div className={clsx(className, '@container')}>\n      <Label\n        className={clsx(hideLabel ? 'sr-only' : 'mb-2')}\n        htmlFor={`${id ?? generatedId}-input`}\n      >\n        {label}\n      </Label>\n      <input\n        accept={accept}\n        aria-describedby={`${id ?? generatedId}-hint${message !== undefined ? ` ${id ?? generatedId}-message` : ''}`}\n        className=\"sr-only\"\n        id={`${id ?? generatedId}-input`}\n        multiple={multiple}\n        onChange={handleOnChange}\n        ref={inputRef}\n        tabIndex={-1}\n        type=\"file\"\n        {...props}\n      />\n      <FileDropzone\n        disabled={disabled}\n        id={id ?? generatedId}\n        inputRef={inputRef}\n        invalid={invalid}\n        onDrop={handleOnDrop}\n      >\n        <Button\n          aria-controls={`${id ?? generatedId}-input`}\n          className=\"pointer-events-none\"\n          disabled={disabled}\n          size=\"small\"\n          tabIndex={-1}\n          type=\"button\"\n          variant=\"tertiary\"\n        >\n          <UploadIcon className=\"size-5 text-(--file-input-trigger-icon,var(--foreground))\" />\n          {cta}\n        </Button>\n        <p\n          className={clsx(\n            'font-(family-name:--file-input-dropzone-message-font-family,var(--font-family-body)) text-sm font-normal text-(--file-input-dropzone-message,var(--contrast-500))',\n            // Disabled styles\n            'data-[disabled]:text-(--file-input-dropzone-message-disabled,color-mix(in_oklab,var(--contrast-500)_70%,transparent))',\n          )}\n          data-disabled={disabled === true ? '' : undefined}\n          id={`${id ?? generatedId}-hint`}\n        >\n          {hint}\n        </p>\n      </FileDropzone>\n      {message != null && (\n        <p\n          className=\"mt-2 font-(family-name:--file-input-message-font-family,var(--font-family-body)) text-sm font-normal text-(--file-input-message,var(--contrast-500))\"\n          id={`${id ?? generatedId}-message`}\n        >\n          {message}\n        </p>\n      )}\n      {files.size > 0 && (\n        <div\n          className=\"fade-in-0 slide-in-from-top-2 animate-in mt-3 grid gap-3\"\n          id={`${id ?? generatedId}-list`}\n          role=\"list\"\n        >\n          {Array.from(files.entries()).map(([file, fileState]) => (\n            <FileItem\n              errorLabel={errorLabel}\n              file={file}\n              fileState={fileState}\n              id={id ?? generatedId}\n              key={URL.createObjectURL(file)}\n              onRemoveFile={handleRemoveFile}\n              successLabel={successLabel}\n              uploadingLabel={uploadingLabel}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/form/file-input/index.tsx"
    },
    {
      "path": "vibes/soul/form/file-input/file-dropzone.tsx",
      "content": "'use client';\n\nimport { clsx } from 'clsx';\nimport { useCallback, useState } from 'react';\nimport type {\n  ClipboardEvent,\n  ComponentPropsWithoutRef,\n  DragEvent,\n  KeyboardEvent,\n  ReactNode,\n  RefObject,\n} from 'react';\n\nexport interface FileDropzoneProps extends ComponentPropsWithoutRef<'div'> {\n  children?: ReactNode;\n  inputRef: RefObject<HTMLInputElement | null>;\n  disabled?: boolean;\n  invalid?: boolean;\n}\n\nexport function FileDropzone({\n  id,\n  children,\n  inputRef,\n  disabled,\n  invalid,\n  onDrop,\n}: FileDropzoneProps) {\n  const [isDragging, setIsDragging] = useState(false);\n\n  const handleOnDrop = useCallback(\n    (event: DragEvent<HTMLDivElement>) => {\n      setIsDragging(false);\n      onDrop?.(event);\n    },\n    [onDrop],\n  );\n\n  const handleOnDragOver = useCallback((event: DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    setIsDragging(true);\n  }, []);\n\n  const handleOnDragEnter = useCallback((event: DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    setIsDragging(true);\n  }, []);\n\n  const handleOnDragLeave = useCallback((event: DragEvent<HTMLDivElement>) => {\n    const relatedTarget = event.relatedTarget;\n\n    if (\n      relatedTarget &&\n      relatedTarget instanceof Node &&\n      event.currentTarget.contains(relatedTarget)\n    ) {\n      return;\n    }\n\n    event.preventDefault();\n    setIsDragging(false);\n  }, []);\n\n  const handleOnKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (event.key === 'Enter' || event.key === ' ') {\n        event.preventDefault();\n        inputRef.current?.click();\n      }\n    },\n    [inputRef],\n  );\n\n  const handleOnPaste = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>) => {\n      event.preventDefault();\n      setIsDragging(false);\n\n      const items = event.clipboardData.items;\n      if (items.length === 0) return;\n\n      const pastedFiles: File[] = [];\n\n      for (const item of items) {\n        if (item.kind === 'file') {\n          const file = item.getAsFile();\n          if (file) {\n            pastedFiles.push(file);\n          }\n        }\n      }\n\n      if (pastedFiles.length === 0) return;\n\n      const inputElement = inputRef.current;\n\n      if (!inputElement) return;\n\n      const dataTransfer = new DataTransfer();\n\n      for (const file of pastedFiles) {\n        dataTransfer.items.add(file);\n      }\n\n      inputElement.files = dataTransfer.files;\n      inputElement.dispatchEvent(new Event('change', { bubbles: true }));\n    },\n    [inputRef],\n  );\n\n  const handleOnClick = useCallback(() => {\n    inputRef.current?.click();\n  }, [inputRef]);\n\n  return (\n    <div\n      aria-controls={`${id}-input ${id}-list`}\n      aria-disabled={disabled}\n      className={clsx(\n        'flex min-h-19 cursor-pointer flex-col items-center justify-center gap-1.5 rounded-lg border-[1.5px] border-dashed border-(--file-input-dropzone-border,var(--contrast-200)) bg-(--file-input-dropzone-background,var(--background)) p-4 transition-colors duration-300 ease-in-out select-none @sm:flex-row',\n        // Hover styles\n        'hover:border-(--file-input-dropzone-border-hover,var(--foreground)) hover:bg-(--file-input-dropzone-background-hover,var(--contrast-100))',\n        // Focus styles\n        'focus-visible:ring-2 focus-visible:ring-(--file-input-focus,var(--primary)) focus-visible:ring-offset-2 focus-visible:outline-hidden',\n        // Disabled styles\n        'data-[disabled]:cursor-not-allowed data-[disabled]:border-(--file-input-dropzone-border-disabled,color-mix(in_oklab,var(--contrast-200)_70%,transparent)) data-[disabled]:bg-(--file-input-dropzone-background-disabled,var(--background)) data-[disabled]:focus-visible:ring-0 data-[disabled]:focus-visible:ring-offset-0 data-[disabled]:focus-visible:outline-none',\n        // Invalid styles\n        'data-[invalid]:border-(--file-input-dropzone-border-error,var(--error))',\n        // Dragging styles\n        'data-[dragging]:border-(--file-input-dropzone-border-dragging,var(--foreground)) data-[dragging]:bg-(--file-input-dropzone-background-dragging,var(--success-highlight))',\n      )}\n      data-disabled={disabled === true ? '' : undefined}\n      data-dragging={isDragging ? '' : undefined}\n      data-invalid={invalid === true ? '' : undefined}\n      id={`${id}-dropzone`}\n      onClick={handleOnClick}\n      onDragEnter={handleOnDragEnter}\n      onDragLeave={handleOnDragLeave}\n      onDragOver={handleOnDragOver}\n      onDrop={handleOnDrop}\n      onKeyDown={handleOnKeyDown}\n      onPaste={handleOnPaste}\n      role=\"button\"\n      tabIndex={0}\n    >\n      {children}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/form/file-input/file-dropzone.tsx"
    },
    {
      "path": "vibes/soul/form/file-input/file-item.tsx",
      "content": "'use client';\n\nimport { clsx } from 'clsx';\nimport {\n  FileArchive,\n  FileAudio,\n  FileCode,\n  FileCog,\n  FileIcon,\n  FileImage,\n  FileText,\n  FileVideo,\n  XIcon,\n} from 'lucide-react';\nimport { ComponentPropsWithoutRef } from 'react';\n\nimport { FileInputProps, FileState } from '@/vibes/soul/form/file-input';\nimport { Button } from '@/vibes/soul/primitives/button';\n\nexport interface FileItemProps\n  extends ComponentPropsWithoutRef<'div'>,\n    Pick<FileInputProps, 'uploadingLabel' | 'successLabel' | 'errorLabel'> {\n  file: File;\n  fileState: FileState;\n  onRemoveFile: (file: File) => void;\n}\n\nexport function FileItem({\n  id,\n  file,\n  fileState,\n  onRemoveFile,\n  uploadingLabel,\n  successLabel,\n  errorLabel,\n}: FileItemProps) {\n  const { progress, status, error } = fileState;\n  const { name, size } = file;\n\n  return (\n    <div\n      aria-describedby={`${id}-status${error != null ? ` ${id}-error` : ''}`.trim()}\n      aria-labelledby={`${id}-name`}\n      className={clsx(\n        'relative flex items-center justify-between gap-2 overflow-hidden rounded-lg border-[1.5px] border-(--file-input-item-border,var(--contrast-200)) p-4',\n        // Invalid styles\n        'data-[invalid]:border-(--file-input-item-border-error,var(--error))',\n      )}\n      data-invalid={fileState.status === 'error' ? '' : undefined}\n      id={id}\n      role=\"listitem\"\n    >\n      {/* File metadata */}\n      <div className=\"flex min-w-0 flex-1 flex-col\">\n        <div className=\"flex-1\">\n          <div className=\"flex items-center gap-1 font-(family-name:--file-input-item-name-font-family,var(--font-family-body))\">\n            {getFileIcon(file)}\n            <p\n              className=\"font-sm truncate font-semibold text-(--file-input-item-name,var(--foreground))\"\n              id={`${id}-name`}\n            >\n              {name}\n            </p>\n          </div>\n          {status === 'idle' && (\n            <p\n              className=\"text-xs font-normal text-(--file-input-item-status,var(--contrast-500))\"\n              id={`${id}-status`}\n            >\n              {formatBytes(size)}\n            </p>\n          )}\n          {status === 'uploading' && (\n            <p\n              className=\"text-xs font-normal text-(--file-input-item-status,var(--contrast-500))\"\n              id={`${id}-status`}\n            >\n              {uploadingLabel}\n            </p>\n          )}\n          {status === 'success' && (\n            <p\n              className=\"text-xs font-normal text-(--file-input-item-status,var(--contrast-500))\"\n              id={`${id}-status`}\n            >\n              {successLabel}\n            </p>\n          )}\n          {status === 'error' && (\n            <p\n              className=\"text-xs font-normal text-(--file-input-item-status-error,var(--error))\"\n              id={`${id}-error`}\n            >\n              {error ?? errorLabel}\n            </p>\n          )}\n        </div>\n      </div>\n      {/* Remove file button */}\n      <Button\n        aria-controls={id}\n        aria-describedby={`${id}-name`}\n        onClick={() => onRemoveFile(file)}\n        shape=\"circle\"\n        size=\"x-small\"\n        type=\"button\"\n        variant=\"ghost\"\n      >\n        <XIcon className=\"size-5 text-(--file-input-item-delete-icon,var(--foreground))\" />\n      </Button>\n      {/* Progress bar */}\n      {status === 'uploading' && (\n        <div\n          aria-labelledby={`${id}-name`}\n          aria-valuemax={100}\n          aria-valuemin={0}\n          aria-valuenow={progress}\n          aria-valuetext={`${progress}%`}\n          className=\"absolute bottom-0 left-0 h-1 w-full bg-(--file-input-item-progress,var(--primary)) transition-all\"\n          role=\"progressbar\"\n          style={{ transform: `translateX(-${100 - progress}%)` }}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction formatBytes(bytes: number) {\n  if (bytes === 0) return '0 B';\n  const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(1024));\n  return `${(bytes / 1024 ** i).toFixed(i ? 1 : 0)} ${sizes[i]}`;\n}\n\nfunction getFileIcon(file: File) {\n  const type = file.type;\n\n  const extension = file.name.split('.').pop()?.toLowerCase() ?? '';\n\n  if (type.startsWith('image/')) {\n    return <FileImage className=\"size-4 text-(--file-input-mime-icon,var(--contrast-400))\" />;\n  }\n\n  if (type.startsWith('video/')) {\n    return <FileVideo className=\"size-4 text-(--file-input-mime-icon,var(--contrast-400))\" />;\n  }\n\n  if (type.startsWith('audio/')) {\n    return <FileAudio className=\"size-4 text-(--file-input-mime-icon,var(--contrast-400))\" />;\n  }\n\n  if (type.startsWith('text/') || ['txt', 'md', 'rtf', 'pdf'].includes(extension)) {\n    return <FileText className=\"size-4 text-(--file-input-mime-icon,var(--contrast-400))\" />;\n  }\n\n  if (\n    [\n      'html',\n      'css',\n      'js',\n      'jsx',\n      'ts',\n      'tsx',\n      'json',\n      'xml',\n      'php',\n      'py',\n      'rb',\n      'java',\n      'c',\n      'cpp',\n      'cs',\n    ].includes(extension)\n  ) {\n    return <FileCode className=\"size-4 text-(--file-input-mime-icon,var(--contrast-400))\" />;\n  }\n\n  if (['zip', 'rar', '7z', 'tar', 'gz', 'bz2'].includes(extension)) {\n    return <FileArchive className=\"size-4 text-(--file-input-mime-icon,var(--contrast-400))\" />;\n  }\n\n  if (\n    ['exe', 'msi', 'app', 'apk', 'deb', 'rpm'].includes(extension) ||\n    type.startsWith('application/')\n  ) {\n    return <FileCog className=\"size-4 text-(--file-input-mime-icon,var(--contrast-400))\" />;\n  }\n\n  return <FileIcon className=\"size-4 text-(--file-input-mime-icon,var(--contrast-400))\" />;\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/form/file-input/file-item.tsx"
    }
  ]
}