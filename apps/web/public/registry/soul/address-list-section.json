{
  "name": "address-list-section",
  "type": "registry:ui",
  "dependencies": [
    "@conform-to/react",
    "@conform-to/zod",
    "zod"
  ],
  "registryDependencies": [
    "badge",
    "button",
    "dynamic-form",
    "spinner",
    "toaster"
  ],
  "files": [
    {
      "path": "vibes/soul/sections/address-list-section/index.tsx",
      "content": "'use client';\n\nimport { getFormProps, getInputProps, SubmissionResult, useForm } from '@conform-to/react';\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod';\nimport {\n  ComponentProps,\n  ReactNode,\n  startTransition,\n  useActionState,\n  useEffect,\n  useOptimistic,\n  useState,\n} from 'react';\nimport { useFormStatus } from 'react-dom';\nimport { z } from 'zod';\n\nimport { DynamicForm } from '@/vibes/soul/form/dynamic-form';\nimport { Field, FieldGroup } from '@/vibes/soul/form/dynamic-form/schema';\nimport { Badge } from '@/vibes/soul/primitives/badge';\nimport { Button } from '@/vibes/soul/primitives/button';\nimport { Spinner } from '@/vibes/soul/primitives/spinner';\nimport { toast } from '@/vibes/soul/primitives/toaster';\n\nimport { schema } from './schema';\n\nexport type Address = z.infer<typeof schema>;\n\nexport interface DefaultAddressConfiguration {\n  id: string | null;\n}\n\ntype Action<S, P> = (state: Awaited<S>, payload: P) => S | Promise<S>;\n\ninterface State<A extends Address, F extends Field> {\n  addresses: A[];\n  defaultAddress?: DefaultAddressConfiguration;\n  lastResult: SubmissionResult | null;\n  fields: Array<F | FieldGroup<F>>;\n}\n\nexport interface AddressListSectionProps<A extends Address, F extends Field> {\n  title?: string;\n  addresses: A[];\n  fields: Array<F | FieldGroup<F>>;\n  minimumAddressCount?: number;\n  defaultAddress?: DefaultAddressConfiguration;\n  addressAction: Action<State<A, F>, FormData>;\n  editLabel?: string;\n  deleteLabel?: string;\n  updateLabel?: string;\n  createLabel?: string;\n  showAddFormLabel?: string;\n  setDefaultLabel?: string;\n  cancelLabel?: string;\n}\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n * :root {\n *   --address-list-section-border: var(--contrast-200);\n *   --address-list-section-title-font-family: var(--font-family-heading);\n *   --address-list-section-content-font-family: var(--font-family-body);\n *   --address-list-section-title: var(--foreground);\n *   --address-list-section-name: var(--foreground);\n *   --address-list-section-info: var(--contrast-500);\n * }\n * ```\n */\nexport function AddressListSection<A extends Address, F extends Field>({\n  title = 'Addresses',\n  addresses,\n  fields,\n  minimumAddressCount = 1,\n  defaultAddress,\n  addressAction,\n  editLabel = 'Edit',\n  deleteLabel = 'Delete',\n  updateLabel = 'Update',\n  createLabel = 'Create',\n  cancelLabel = 'Cancel',\n  showAddFormLabel = 'Add address',\n  setDefaultLabel = 'Set as default',\n}: AddressListSectionProps<A, F>) {\n  const [state, formAction] = useActionState(addressAction, {\n    addresses,\n    defaultAddress,\n    lastResult: null,\n    fields,\n  });\n\n  const [optimisticState, setOptimisticState] = useOptimistic<State<Address, F>, FormData>(\n    state,\n    (prevState, formData) => {\n      const intent = formData.get('intent');\n      const submission = parseWithZod(formData, { schema });\n\n      if (submission.status !== 'success') return prevState;\n\n      switch (intent) {\n        case 'create': {\n          const nextAddress = submission.value;\n\n          return {\n            ...prevState,\n            addresses: [...prevState.addresses, nextAddress],\n          };\n        }\n\n        case 'update': {\n          return {\n            ...prevState,\n            addresses: prevState.addresses.map((a) =>\n              a.id === submission.value.id ? submission.value : a,\n            ),\n          };\n        }\n\n        case 'delete': {\n          return {\n            ...prevState,\n            addresses: prevState.addresses.filter((a) => a.id !== submission.value.id),\n          };\n        }\n\n        case 'setDefault': {\n          return { ...prevState, defaultAddress: { id: submission.value.id } };\n        }\n\n        default:\n          return prevState;\n      }\n    },\n  );\n  const [activeAddressIds, setActiveAddressIds] = useState<string[]>([]);\n  const [showNewAddressForm, setShowNewAddressForm] = useState(false);\n  const [form] = useForm({\n    lastResult: state.lastResult,\n  });\n\n  useEffect(() => {\n    if (form.errors) {\n      form.errors.forEach((error) => {\n        toast.error(error);\n      });\n    }\n  }, [form.errors]);\n\n  return (\n    <div>\n      <div className=\"flex items-center justify-between\">\n        <Title>{title}</Title>\n        {!showNewAddressForm && (\n          <Button onClick={() => setShowNewAddressForm(true)} size=\"small\">\n            {showAddFormLabel}\n          </Button>\n        )}\n      </div>\n      <div>\n        {showNewAddressForm && (\n          <div className=\"border-b border-(--address-list-section-border,var(--contrast-200)) pt-5 pb-6\">\n            <div className=\"w-[480px] space-y-4\">\n              <DynamicForm\n                action={(_prevState, formData) => {\n                  setShowNewAddressForm(false);\n\n                  startTransition(() => {\n                    formAction(formData);\n                    setOptimisticState(formData);\n                  });\n\n                  return {\n                    fields: optimisticState.fields,\n                    lastResult: optimisticState.lastResult,\n                  };\n                }}\n                buttonSize=\"small\"\n                cancelLabel={cancelLabel}\n                fields={optimisticState.fields.map((field) => {\n                  if ('name' in field && field.name === 'id') {\n                    return {\n                      ...field,\n                      name: 'id',\n                      defaultValue: 'new',\n                    };\n                  }\n\n                  return field;\n                })}\n                onCancel={() => setShowNewAddressForm(false)}\n                submitLabel={createLabel}\n                submitName=\"intent\"\n                submitValue=\"create\"\n              />\n            </div>\n          </div>\n        )}\n        {optimisticState.addresses.map((address) => {\n          const addressFields = optimisticState.fields.map<F | FieldGroup<F>>((field) => {\n            if (Array.isArray(field)) {\n              return field.map((f) => {\n                return {\n                  ...f,\n                  defaultValue: address[f.name] ?? '',\n                };\n              });\n            }\n\n            return {\n              ...field,\n              defaultValue: address[field.name] ?? '',\n            };\n          });\n\n          return (\n            <div\n              className=\"border-b border-(--address-list-section-border,var(--contrast-200)) pt-5 pb-6\"\n              key={address.id}\n            >\n              {activeAddressIds.includes(address.id) ? (\n                <div className=\"w-[480px] space-y-4\">\n                  <DynamicForm\n                    action={(_prevState, formData) => {\n                      setActiveAddressIds((prev) => prev.filter((id) => id !== address.id));\n\n                      startTransition(() => {\n                        formAction(formData);\n                        setOptimisticState(formData);\n                      });\n\n                      return {\n                        fields: optimisticState.fields,\n                        lastResult: optimisticState.lastResult,\n                      };\n                    }}\n                    buttonSize=\"small\"\n                    cancelLabel={cancelLabel}\n                    fields={addressFields}\n                    onCancel={() =>\n                      setActiveAddressIds((prev) => prev.filter((id) => id !== address.id))\n                    }\n                    submitLabel={updateLabel}\n                    submitName=\"intent\"\n                    submitValue=\"update\"\n                  />\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  <AddressPreview\n                    address={address}\n                    isDefault={\n                      optimisticState.defaultAddress\n                        ? optimisticState.defaultAddress.id === address.id\n                        : undefined\n                    }\n                  />\n                  <div className=\"flex gap-1\">\n                    <Button\n                      aria-label={`${editLabel}: ${address.firstName} ${address.lastName}`}\n                      onClick={() => setActiveAddressIds((prev) => [...prev, address.id])}\n                      size=\"small\"\n                      variant=\"tertiary\"\n                    >\n                      {editLabel}\n                    </Button>\n                    {optimisticState.addresses.length > minimumAddressCount && (\n                      <AddressActionButton\n                        action={formAction}\n                        address={address}\n                        aria-label={`${deleteLabel}: ${address.firstName} ${address.lastName}`}\n                        intent=\"delete\"\n                        onSubmit={(formData) => {\n                          startTransition(() => {\n                            formAction(formData);\n                            setOptimisticState(formData);\n                          });\n                        }}\n                      >\n                        {deleteLabel}\n                      </AddressActionButton>\n                    )}\n\n                    {optimisticState.defaultAddress &&\n                      optimisticState.defaultAddress.id !== address.id && (\n                        <AddressActionButton\n                          action={formAction}\n                          address={address}\n                          aria-label={`${setDefaultLabel}: ${address.firstName} ${address.lastName}`}\n                          intent=\"setDefault\"\n                          onSubmit={(formData) => {\n                            startTransition(() => {\n                              formAction(formData);\n                              setOptimisticState(formData);\n                            });\n                          }}\n                        >\n                          {setDefaultLabel}\n                        </AddressActionButton>\n                      )}\n                  </div>\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nfunction Title({ children }: { children: ReactNode }) {\n  const { pending } = useFormStatus();\n\n  return (\n    <h1 className=\"font-[family-name:var(--address-list-section-title-font-family,var(--font-family-heading))] text-4xl text-(--address-list-section-title,var(--foreground))\">\n      {children}\n      {pending && (\n        <span className=\"ml-2\">\n          <Spinner />\n        </span>\n      )}\n    </h1>\n  );\n}\n\nfunction AddressPreview({ address, isDefault = false }: { address: Address; isDefault?: boolean }) {\n  return (\n    <div className=\"flex gap-10 font-[family-name:var(--address-list-section-content-font-family,var(--font-family-body))]\">\n      <div className=\"text-sm text-(--address-list-section-info,var(--contrast-500))\">\n        <p className=\"font-bold text-(--address-list-section-name,var(--foreground))\">\n          {address.firstName} {address.lastName}\n        </p>\n        <p>{address.company}</p>\n        <p>{address.address1}</p>\n        <p>{address.address2}</p>\n        <p>\n          {address.city}, {address.stateOrProvince} {address.postalCode}\n        </p>\n        <p className=\"mb-3\">{address.countryCode}</p>\n        <p>{address.phone}</p>\n      </div>\n      <div>{isDefault && <Badge>Default</Badge>}</div>\n    </div>\n  );\n}\n\nfunction AddressActionButton({\n  address,\n  intent,\n  action,\n  onSubmit,\n  ...rest\n}: {\n  address: Address;\n  intent: string;\n  action: (formData: FormData) => void;\n  onSubmit: (formData: FormData) => void;\n} & Omit<ComponentProps<'button'>, 'onSubmit'>) {\n  const [form, fields] = useForm({\n    // @ts-expect-error The form requires index signature values to be of\n    // type 'string', 'null', or 'undefined' but the zod .passthrough() method\n    // returns the value 'unknown' for any index signature values.\n    defaultValue: address,\n    constraint: getZodConstraint(schema),\n    onValidate({ formData }) {\n      return parseWithZod(formData, { schema });\n    },\n    onSubmit(event, { submission, formData }) {\n      event.preventDefault();\n\n      if (submission?.status !== 'success') return;\n\n      onSubmit(formData);\n    },\n  });\n\n  return (\n    <form {...getFormProps(form)} action={action}>\n      <input {...getInputProps(fields.id, { type: 'hidden' })} key={fields.id.id} />\n      <input {...getInputProps(fields.firstName, { type: 'hidden' })} key={fields.firstName.id} />\n      <input {...getInputProps(fields.lastName, { type: 'hidden' })} key={fields.lastName.id} />\n      <input {...getInputProps(fields.company, { type: 'hidden' })} key={fields.company.id} />\n      <input {...getInputProps(fields.phone, { type: 'hidden' })} key={fields.phone.id} />\n      <input {...getInputProps(fields.address1, { type: 'hidden' })} key={fields.address1.id} />\n      <input {...getInputProps(fields.address2, { type: 'hidden' })} key={fields.address2.id} />\n      <input {...getInputProps(fields.city, { type: 'hidden' })} key={fields.city.id} />\n      <input\n        {...getInputProps(fields.stateOrProvince, { type: 'hidden' })}\n        key={fields.stateOrProvince.id}\n      />\n      <input {...getInputProps(fields.postalCode, { type: 'hidden' })} key={fields.postalCode.id} />\n      <input\n        {...getInputProps(fields.countryCode, { type: 'hidden' })}\n        key={fields.countryCode.id}\n      />\n      <Button\n        {...rest}\n        name=\"intent\"\n        size=\"small\"\n        type=\"submit\"\n        value={intent}\n        variant=\"tertiary\"\n      />\n    </form>\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/sections/address-list-section/index.tsx"
    },
    {
      "path": "vibes/soul/sections/address-list-section/schema.ts",
      "content": "import { z } from 'zod';\n\nexport const schema = z\n  .object({\n    id: z.string(),\n    firstName: z.string(),\n    lastName: z.string(),\n    company: z.string().optional(),\n    address1: z.string(),\n    address2: z.string().optional(),\n    city: z.string(),\n    stateOrProvince: z.string().optional(),\n    postalCode: z.string().optional(),\n    phone: z.string().optional(),\n    countryCode: z.string(),\n  })\n  .passthrough();\n",
      "type": "registry:ui",
      "target": "vibes/soul/sections/address-list-section/schema.ts"
    }
  ]
}