{
  "name": "accordion",
  "type": "registry:ui",
  "dependencies": [
    "clsx",
    "@radix-ui/react-accordion"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "vibes/soul/primitives/accordion/index.tsx",
      "content": "'use client';\n\nimport * as AccordionPrimitive from '@radix-ui/react-accordion';\nimport { clsx } from 'clsx';\nimport { ComponentPropsWithoutRef, useEffect, useState } from 'react';\n\nexport interface AccordionProps extends ComponentPropsWithoutRef<typeof AccordionPrimitive.Item> {\n  colorScheme?: 'light' | 'dark';\n}\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n * :root {\n *   --accordion-focus: var(--primary);\n *   --acordion-light-offset: var(--background);\n *   --accordion-light-title-text: var(--contrast-400);\n *   --accordion-light-title-text-hover: var(--foreground);\n *   --accordion-light-title-icon: var(--contrast-500);\n *   --accordion-light-title-icon-hover: var(--foreground);\n *   --accordion-light-content-text: var(--foreground);\n *   --acordion-dark-offset: var(--foreground);\n *   --accordion-dark-title-text: var(--contrast-200);\n *   --accordion-dark-title-text-hover: var(--background);\n *   --accordion-dark-title-icon: var(--contrast-200);\n *   --accordion-dark-title-icon-hover: var(--background);\n *   --accordion-dark-content-text: var(--background);\n *   --accordion-title-font-family: var(--font-family-mono);\n *   --accordion-content-font-family: var(--font-family-body);\n * }\n * ```\n */\nfunction AccordionItem({\n  title,\n  children,\n  colorScheme = 'light',\n  className,\n  ...props\n}: AccordionProps) {\n  const [isMounted, setIsMounted] = useState(false);\n\n  useEffect(() => {\n    setIsMounted(true);\n  }, []);\n\n  return (\n    <AccordionPrimitive.Item\n      {...props}\n      className={clsx(\n        'focus:outline-2 has-[:focus-visible]:ring-2 has-[:focus-visible]:ring-(--accordion-focus,var(--primary)) has-[:focus-visible]:ring-offset-4',\n        {\n          light: 'ring-offset-(--acordion-light-offset,var(--background))',\n          dark: 'ring-offset-(--acordion-dark-offset,var(--foreground))',\n        }[colorScheme],\n        className,\n      )}\n    >\n      <AccordionPrimitive.Header>\n        <AccordionPrimitive.Trigger className=\"group flex w-full cursor-pointer items-start gap-8 border-none py-3 text-start focus:outline-hidden @md:py-4\">\n          <div\n            className={clsx(\n              'flex-1 font-(family-name:--accordion-title-font-family,var(--font-family-mono)) text-sm font-normal uppercase transition-colors duration-300 ease-out select-none',\n              {\n                light:\n                  'text-(--accordion-light-title-text,var(--contrast-400)) group-hover:text-(--accordion-light-title-text-hover,var(--foreground))',\n                dark: 'text-(--accordion-dark-title-text,var(--contrast-200)) group-hover:text-(--accordion-dark-title-text-hover,var(--background))',\n              }[colorScheme],\n            )}\n          >\n            {title}\n          </div>\n          <AnimatedChevron\n            className={clsx(\n              {\n                light:\n                  'stroke-(--accordion-light-title-icon,var(--contrast-500)) group-hover:stroke-(--accordion-light-title-icon-hover,var(--foreground))',\n                dark: 'stroke-(--accordion-dark-title-icon,var(--contrast-200)) group-hover:stroke-(--accordion-dark-title-icon-hover,var(--background))',\n              }[colorScheme],\n            )}\n          />\n        </AccordionPrimitive.Trigger>\n      </AccordionPrimitive.Header>\n      <AccordionPrimitive.Content\n        className={clsx(\n          'overflow-hidden',\n          // We need to delay the animation until the component is mounted to avoid the animation\n          // from being triggered when the component is first rendered.\n          isMounted && 'data-[state=closed]:animate-collapse data-[state=open]:animate-expand',\n        )}\n      >\n        <div\n          className={clsx(\n            'py-3 font-(family-name:--accordion-content-font-family,var(--font-family-body)) text-base leading-normal font-light',\n            {\n              light: 'text-(--accordion-light-content-text,var(--foreground))',\n              dark: 'text-(--accordion-dark-content-text,var(--background))',\n            }[colorScheme],\n          )}\n        >\n          {children}\n        </div>\n      </AccordionPrimitive.Content>\n    </AccordionPrimitive.Item>\n  );\n}\n\nfunction AnimatedChevron({\n  className,\n  ...props\n}: React.JSX.IntrinsicAttributes & React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      {...props}\n      className={clsx(\n        'mt-1 shrink-0 [&>line]:origin-center [&>line]:transition [&>line]:duration-300 [&>line]:ease-out',\n        className,\n      )}\n      viewBox=\"0 0 10 10\"\n      width={16}\n    >\n      {/* Left Line of Chevron */}\n      <line\n        className=\"group-data-[state=open]:-translate-y-[3px] group-data-[state=open]:-rotate-90\"\n        strokeLinecap=\"round\"\n        x1={2}\n        x2={5}\n        y1={2}\n        y2={5}\n      />\n      {/* Right Line of Chevron */}\n      <line\n        className=\"group-data-[state=open]:-translate-y-[3px] group-data-[state=open]:rotate-90\"\n        strokeLinecap=\"round\"\n        x1={8}\n        x2={5}\n        y1={2}\n        y2={5}\n      />\n    </svg>\n  );\n}\n\nconst Accordion = AccordionPrimitive.Root;\n\nexport { Accordion, AccordionItem };\n",
      "type": "registry:ui",
      "target": "vibes/soul/primitives/accordion/index.tsx"
    }
  ]
}