{
  "name": "select",
  "type": "registry:ui",
  "dependencies": [
    "clsx",
    "lucide-react",
    "@radix-ui/react-select"
  ],
  "registryDependencies": [
    "field-error",
    "label"
  ],
  "files": [
    {
      "path": "vibes/soul/form/select/index.tsx",
      "content": "'use client';\n\nimport * as SelectPrimitive from '@radix-ui/react-select';\nimport { clsx } from 'clsx';\nimport { ChevronDown, ChevronUp } from 'lucide-react';\nimport * as React from 'react';\n\nimport { FieldError } from '@/vibes/soul/form/field-error';\nimport { Label } from '@/vibes/soul/form/label';\n\ntype Props = {\n  colorScheme?: 'light' | 'dark';\n  id?: string;\n  name: string;\n  pending?: boolean;\n  placeholder?: string;\n  label?: string;\n  hideLabel?: boolean;\n  variant?: 'round' | 'rectangle';\n  options: Array<{ label: string; value: string }>;\n  className?: string;\n  errors?: string[];\n  onFocus?: (e: React.FocusEvent<HTMLButtonElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLButtonElement>) => void;\n  onOptionMouseEnter?: (value: string) => void;\n} & React.ComponentPropsWithoutRef<typeof SelectPrimitive.Root>;\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n *  :root {\n *    --select-light-trigger-background: var(--background);\n *    --select-light-trigger-border: var(--contrast-100);\n *    --select-light-trigger-border-hover: var(--contrast-300);\n *    --select-light-trigger-border-error: var(--error);\n *    --select-light-trigger-text: var(--foreground);\n *    --select-light-trigger-focus: var(--primary);\n *    --select-light-icon: var(--foreground);\n *    --select-light-content-background: var(--background);\n *    --select-light-content-border: color-mix(in oklab, var(--foreground) 10%, transparent);\n *    --select-light-item-background-hover: var(--contrast-100);\n *    --select-light-item-background-focus: var(--contrast-100);\n *    --select-light-item-text: var(--contrast-400);\n *    --select-light-item-text-hover: var(--foreground);\n *    --select-light-item-text-focus: var(--foreground);\n *    --select-light-item-checked-text-focus: var(--foreground);\n *    --select-dark-trigger-background: var(--foreground);\n *    --select-dark-trigger-border: var(--contrast-500);\n *    --select-dark-trigger-border-hover: var(--contrast-300);\n *    --select-dark-trigger-border-error: var(--error);\n *    --select-dark-trigger-text: var(--background);\n *    --select-dark-trigger-focus: var(--primary);\n *    --select-dark-icon: var(--background);\n *    --select-dark-content-background: var(--foreground);\n *    --select-dark-content-border: color-mix(in oklab, var(--background) 10%, transparent);\n *    --select-dark-item-background-hover: var(--contrast-500);\n *    --select-dark-item-background-focus: var(--contrast-500);\n *    --select-dark-item-text: var(--contrast-200);\n *    --select-dark-item-text-hover: var(--background);\n *    --select-dark-item-text-focus: var(--background);\n *    --select-dark-item-checked-text-focus: var(--background);\n *  }\n * ```\n */\nexport function Select({\n  colorScheme = 'light',\n  label,\n  hideLabel = false,\n  name,\n  pending = false,\n  placeholder = 'Select an item',\n  variant = 'rectangle',\n  options,\n  className,\n  errors,\n  onFocus,\n  onBlur,\n  onOptionMouseEnter,\n  value,\n  ...rest\n}: Props) {\n  const id = React.useId();\n\n  return (\n    <div className={clsx('w-full', className)}>\n      {label !== undefined && label !== '' && (\n        <Label\n          className={clsx(hideLabel && 'sr-only', 'mb-2')}\n          colorScheme={colorScheme}\n          htmlFor={id}\n        >\n          {label}\n        </Label>\n      )}\n      <SelectPrimitive.Root {...rest} name={name} value={value}>\n        <SelectPrimitive.Trigger\n          aria-label={label}\n          className={clsx(\n            'flex h-fit w-full items-center justify-between gap-3 border p-2 px-5 py-3 text-sm font-medium transition-colors select-none focus-visible:ring-2 focus-visible:outline-hidden',\n            variant === 'rectangle' ? 'rounded-lg' : 'rounded-full',\n            {\n              light:\n                'bg-(--select-light-trigger-background,var(--background)) text-(--select-light-trigger-text,var(--foreground)) hover:border-(--select-light-trigger-border-hover,var(--contrast-300)) hover:bg-(--select-light-trigger-background-hover,var(--contrast-100)) focus-visible:ring-(--select-light-trigger-focus,var(--primary))',\n              dark: 'bg-(--select-dark-trigger-background,var(--foreground)) text-(--select-dark-trigger-text,var(--background)) hover:border-(--select-dark-trigger-border-hover,var(--contrast-300)) hover:bg-(--select-dark-trigger-background-hover,var(--contrast-500)) focus-visible:ring-(--select-dark-trigger-focus,var(--primary))',\n            }[colorScheme],\n            {\n              light:\n                errors && errors.length > 0\n                  ? 'border-(--select-light-trigger-border-error,var(--error))'\n                  : 'border-(--select-light-trigger-border,var(--contrast-100))',\n              dark:\n                errors && errors.length > 0\n                  ? 'border-(--select-dark-trigger-border-error,var(--error))'\n                  : 'border-(--select-dark-trigger-border,var(--contrast-500))',\n            }[colorScheme],\n          )}\n          data-pending={pending ? true : null}\n          id={id}\n          onBlur={onBlur}\n          onFocus={onFocus}\n        >\n          <SelectPrimitive.Value placeholder={placeholder} />\n          <SelectPrimitive.Icon asChild>\n            <ChevronDown\n              className={clsx(\n                'w-5 transition-transform',\n                {\n                  light: 'text-(--select-light-icon,var(--foreground))',\n                  dark: 'text-(--select-dark-icon,var(--background))',\n                }[colorScheme],\n              )}\n              strokeWidth={1.5}\n            />\n          </SelectPrimitive.Icon>\n        </SelectPrimitive.Trigger>\n        <SelectPrimitive.Portal>\n          <SelectPrimitive.Content\n            className={clsx(\n              'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 z-50 max-h-80 w-full overflow-y-auto rounded-xl p-2 shadow-xl ring-1 @4xl:rounded-3xl @4xl:p-4',\n              {\n                light:\n                  'bg-(--select-light-content-background,var(--background)) ring-(--select-light-content-border,color-mix(in_oklab,var(--foreground)_10%,transparent))',\n                dark: 'bg-(--select-dark-content-background,var(--foreground)) ring-(--select-dark-content-border,color-mix(in_oklab,var(--background)_10%,transparent))',\n              }[colorScheme],\n            )}\n          >\n            <SelectPrimitive.ScrollUpButton className=\"flex w-full cursor-default items-center justify-center py-3\">\n              <ChevronUp\n                className={clsx(\n                  'w-5',\n                  {\n                    light: 'text-(--select-light-icon,var(--foreground))',\n                    dark: 'text-(--select-dark-icon,var(--background))',\n                  }[colorScheme],\n                )}\n                strokeWidth={1.5}\n              />\n            </SelectPrimitive.ScrollUpButton>\n            <SelectPrimitive.Viewport>\n              {options.map((option) => (\n                <SelectPrimitive.Item\n                  className={clsx(\n                    'w-full cursor-default rounded-lg px-3 py-2 text-sm font-medium outline-hidden transition-colors select-none @4xl:text-base',\n                    {\n                      light:\n                        'text-(--select-light-item-text,var(--contrast-400)) hover:bg-(--select-light-item-background-hover,var(--contrast-100)) hover:text-(--select-light-item-text-hover,var(--foreground)) focus-visible:bg-(--select-light-item-background-focus,var(--contrast-100)) focus-visible:text-(--select-light-item-text-focus,var(--foreground)) data-[state=checked]:text-(--select-light-item-checked-text-focus,var(--foreground))',\n                      dark: 'text-(--select-dark-item-text,var(--contrast-200)) hover:bg-(--select-dark-item-background-hover,var(--contrast-500)) hover:text-(--select-dark-item-text-hover,var(--background)) focus-visible:bg-(--select-dark-item-background-focus,var(--contrast-500)) focus-visible:text-(--select-dark-item-text-focus,var(--background)) data-[state=checked]:text-(--select-dark-item-checked-text-focus,var(--background))',\n                    }[colorScheme],\n                  )}\n                  key={option.value}\n                  onMouseEnter={() => {\n                    onOptionMouseEnter?.(option.value);\n                  }}\n                  value={option.value}\n                >\n                  <SelectPrimitive.ItemText>{option.label}</SelectPrimitive.ItemText>\n                </SelectPrimitive.Item>\n              ))}\n            </SelectPrimitive.Viewport>\n            <SelectPrimitive.ScrollDownButton className=\"flex w-full cursor-default items-center justify-center py-3\">\n              <ChevronDown\n                className={clsx(\n                  'w-5',\n                  {\n                    light: 'text-(--select-icon,var(--foreground))',\n                    dark: 'text-(--select-icon,var(--background))',\n                  }[colorScheme],\n                )}\n                strokeWidth={1.5}\n              />\n            </SelectPrimitive.ScrollDownButton>\n          </SelectPrimitive.Content>\n        </SelectPrimitive.Portal>\n      </SelectPrimitive.Root>\n      {errors?.map((error) => (\n        <FieldError className=\"mt-2\" key={error}>\n          {error}\n        </FieldError>\n      ))}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/form/select/index.tsx"
    }
  ]
}