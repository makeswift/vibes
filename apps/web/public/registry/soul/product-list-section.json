{
  "name": "product-list-section",
  "type": "registry:ui",
  "dependencies": [
    "clsx",
    "lucide-react",
    "nuqs"
  ],
  "registryDependencies": [
    "streamable",
    "button",
    "cursor-pagination",
    "product-card",
    "side-panel",
    "skeleton",
    "breadcrumbs",
    "product-list",
    "checkbox",
    "range-input",
    "toggle-group",
    "accordion",
    "rating",
    "select"
  ],
  "files": [
    {
      "path": "vibes/soul/sections/product-list-section/index.tsx",
      "content": "import { Sliders } from 'lucide-react';\n\nimport { Stream, Streamable } from '@/vibes/soul/lib/streamable';\nimport { Button } from '@/vibes/soul/primitives/button';\nimport { CursorPagination, CursorPaginationInfo } from '@/vibes/soul/primitives/cursor-pagination';\nimport { type Product } from '@/vibes/soul/primitives/product-card';\nimport * as SidePanel from '@/vibes/soul/primitives/side-panel';\nimport * as Skeleton from '@/vibes/soul/primitives/skeleton';\nimport {\n  type Breadcrumb,\n  Breadcrumbs,\n  BreadcrumbsSkeleton,\n} from '@/vibes/soul/sections/breadcrumbs';\nimport { ProductList } from '@/vibes/soul/sections/product-list';\n\nimport { Filter, FilterPanel } from './filter-panel';\nimport { Sorting, SortingSkeleton, Option as SortOption } from './sorting';\n\nexport interface ProductListSectionProps {\n  breadcrumbs?: Streamable<Breadcrumb[]>;\n  title?: Streamable<string>;\n  totalCount: Streamable<string>;\n  products: Streamable<Product[]>;\n  filters: Streamable<Filter[]>;\n  sortOptions: Streamable<SortOption[]>;\n  compareProducts?: Streamable<Product[]>;\n  paginationInfo?: Streamable<CursorPaginationInfo>;\n  compareHref?: string;\n  compareLabel?: Streamable<string>;\n  showCompare?: Streamable<boolean>;\n  filterLabel?: string;\n  filtersPanelTitle?: Streamable<string>;\n  resetFiltersLabel?: Streamable<string>;\n  rangeFilterApplyLabel?: Streamable<string>;\n  sortLabel?: Streamable<string>;\n  sortPlaceholder?: Streamable<string>;\n  sortParamName?: string;\n  sortDefaultValue?: string;\n  compareParamName?: string;\n  emptyStateSubtitle?: Streamable<string>;\n  emptyStateTitle?: Streamable<string>;\n  placeholderCount?: number;\n  removeLabel?: Streamable<string>;\n}\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n * :root {\n *   --product-list-section-title: var(--foreground);\n *   --product-list-section-title-font-family: var(--font-heading);\n *   --product-list-section-total-count: var(--contrast-300);\n *   --product-list-section-filter-label-font-family: var(--font-mono);\n *   --product-list-section-filter-label: var(--contrast-400);\n *   --product-list-section-filter-link: var(--contrast-500);\n *   --product-list-section-filter-link-hover: var(--foreground);\n *   --product-list-section-filter-link-font-family: var(--font-body);\n * }\n * ```\n */\nexport function ProductListSection({\n  breadcrumbs: streamableBreadcrumbs,\n  title: streamableTitle = 'Products',\n  totalCount: streamableTotalCount,\n  products,\n  compareProducts,\n  sortOptions: streamableSortOptions,\n  sortDefaultValue,\n  filters,\n  compareHref,\n  compareLabel,\n  showCompare,\n  paginationInfo,\n  filterLabel = 'Filters',\n  filtersPanelTitle: streamableFiltersPanelTitle = 'Filters',\n  resetFiltersLabel,\n  rangeFilterApplyLabel,\n  sortLabel: streamableSortLabel,\n  sortPlaceholder: streamableSortPlaceholder,\n  sortParamName,\n  compareParamName,\n  emptyStateSubtitle,\n  emptyStateTitle,\n  placeholderCount = 8,\n  removeLabel,\n}: ProductListSectionProps) {\n  return (\n    <div className=\"group/product-list-section @container\">\n      <div className=\"mx-auto max-w-screen-2xl px-4 py-10 @xl:px-6 @xl:py-14 @4xl:px-8 @4xl:py-12\">\n        <div>\n          <Stream fallback={<BreadcrumbsSkeleton />} value={streamableBreadcrumbs}>\n            {(breadcrumbs) =>\n              breadcrumbs && breadcrumbs.length > 1 && <Breadcrumbs breadcrumbs={breadcrumbs} />\n            }\n          </Stream>\n          <div className=\"flex flex-wrap items-center justify-between gap-4 pt-6 pb-8\">\n            <h1 className=\"flex items-center gap-2 font-(family-name:--product-list-section-title-font-family,var(--font-family-heading)) text-3xl leading-none font-medium text-(--product-list-section-title,var(--foreground)) @lg:text-4xl @2xl:text-5xl\">\n              <Stream fallback={<ProductListSectionTitleSkeleton />} value={streamableTitle}>\n                {(title) => <span>{title}</span>}\n              </Stream>\n              <Stream\n                fallback={<ProductListSectionTotalCountSkeleton />}\n                value={streamableTotalCount}\n              >\n                {(totalCount) => (\n                  <span className=\"text-(--product-list-section-total-count,var(--contrast-300))\">\n                    {totalCount}\n                  </span>\n                )}\n              </Stream>\n            </h1>\n            <div className=\"flex items-center gap-2\">\n              <Stream\n                fallback={<SortingSkeleton />}\n                value={Streamable.all([\n                  streamableSortLabel,\n                  streamableSortOptions,\n                  streamableSortPlaceholder,\n                ])}\n              >\n                {([label, options, placeholder]) => (\n                  <Sorting\n                    defaultValue={sortDefaultValue}\n                    label={label}\n                    options={options}\n                    paramName={sortParamName}\n                    placeholder={placeholder}\n                  />\n                )}\n              </Stream>\n              <div className=\"block @3xl:hidden\">\n                <SidePanel.Root>\n                  <SidePanel.Trigger asChild>\n                    <Button size=\"medium\" variant=\"secondary\">\n                      {filterLabel}\n                      <span className=\"hidden @xl:block\">\n                        <Sliders size={20} />\n                      </span>\n                    </Button>\n                  </SidePanel.Trigger>\n                  <Stream value={streamableFiltersPanelTitle}>\n                    {(filtersPanelTitle) => (\n                      <SidePanel.Content title={filtersPanelTitle}>\n                        <FilterPanel\n                          filters={filters}\n                          paginationInfo={paginationInfo}\n                          rangeFilterApplyLabel={rangeFilterApplyLabel}\n                          resetFiltersLabel={resetFiltersLabel}\n                        />\n                      </SidePanel.Content>\n                    )}\n                  </Stream>\n                </SidePanel.Root>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"flex items-stretch gap-8 @4xl:gap-10\">\n          <aside className=\"hidden w-52 @3xl:block @4xl:w-60\">\n            <Stream value={streamableFiltersPanelTitle}>\n              {(filtersPanelTitle) => <h2 className=\"sr-only\">{filtersPanelTitle}</h2>}\n            </Stream>\n            <FilterPanel\n              className=\"sticky top-4\"\n              filters={filters}\n              paginationInfo={paginationInfo}\n              rangeFilterApplyLabel={rangeFilterApplyLabel}\n              resetFiltersLabel={resetFiltersLabel}\n            />\n          </aside>\n\n          <div className=\"flex-1 group-has-[[data-pending]]/product-list-section:animate-pulse\">\n            <ProductList\n              compareHref={compareHref}\n              compareLabel={compareLabel}\n              compareParamName={compareParamName}\n              compareProducts={compareProducts}\n              emptyStateSubtitle={emptyStateSubtitle}\n              emptyStateTitle={emptyStateTitle}\n              placeholderCount={placeholderCount}\n              products={products}\n              removeLabel={removeLabel}\n              showCompare={showCompare}\n            />\n\n            {paginationInfo && <CursorPagination info={paginationInfo} />}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport function ProductListSectionTitleSkeleton() {\n  return (\n    <Skeleton.Root\n      className=\"group-has-[[data-pending]]/product-list-section:animate-pulse\"\n      pending\n    >\n      <Skeleton.Text characterCount={6} className=\"rounded-lg\" data-pending />\n    </Skeleton.Root>\n  );\n}\n\nexport function ProductListSectionTotalCountSkeleton() {\n  return (\n    <Skeleton.Root\n      className=\"group-has-[[data-pending]]/product-list-section:animate-pulse\"\n      pending\n    >\n      <Skeleton.Text characterCount={2} className=\"rounded-lg\" data-pending />\n    </Skeleton.Root>\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/sections/product-list-section/index.tsx"
    },
    {
      "path": "vibes/soul/sections/product-list-section/filter-panel.tsx",
      "content": "/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-argument */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n'use client';\n\nimport { clsx } from 'clsx';\nimport Link from 'next/link';\nimport { parseAsString, useQueryStates } from 'nuqs';\nimport { ReactNode, useOptimistic, useState, useTransition } from 'react';\n\nimport { Checkbox } from '@/vibes/soul/form/checkbox';\nimport { RangeInput } from '@/vibes/soul/form/range-input';\nimport { ToggleGroup } from '@/vibes/soul/form/toggle-group';\nimport { Stream, Streamable, useStreamable } from '@/vibes/soul/lib/streamable';\nimport { Accordion, AccordionItem } from '@/vibes/soul/primitives/accordion';\nimport { Button } from '@/vibes/soul/primitives/button';\nimport { CursorPaginationInfo } from '@/vibes/soul/primitives/cursor-pagination';\nimport { Rating } from '@/vibes/soul/primitives/rating';\nimport * as Skeleton from '@/vibes/soul/primitives/skeleton';\n\nimport { getFilterParsers } from './filter-parsers';\n\nexport interface LinkGroupFilter {\n  type: 'link-group';\n  label: string;\n  links: Array<{ label: string; href: string }>;\n}\n\nexport interface ToggleGroupFilter {\n  type: 'toggle-group';\n  paramName: string;\n  label: string;\n  options: Array<{ label: string; value: string; disabled?: boolean }>;\n}\n\nexport interface RatingFilter {\n  type: 'rating';\n  paramName: string;\n  label: string;\n  disabled?: boolean;\n}\n\nexport interface RangeFilter {\n  type: 'range';\n  label: string;\n  minParamName: string;\n  maxParamName: string;\n  min?: number;\n  max?: number;\n  minLabel?: string;\n  maxLabel?: string;\n  minPrepend?: ReactNode;\n  maxPrepend?: ReactNode;\n  minPlaceholder?: string;\n  maxPlaceholder?: string;\n  disabled?: boolean;\n}\n\nexport type Filter = ToggleGroupFilter | RangeFilter | RatingFilter | LinkGroupFilter;\n\nexport interface FilterPanelProps {\n  className?: string;\n  filters: Streamable<Filter[]>;\n  resetFiltersLabel?: Streamable<string>;\n  paginationInfo?: Streamable<CursorPaginationInfo>;\n  rangeFilterApplyLabel?: Streamable<string>;\n}\n\nfunction getParamCountLabel(params: Record<string, string | null | string[]>, key: string) {\n  const value = params[key];\n\n  if (Array.isArray(value) && value.length > 0) return `(${value.length})`;\n\n  return '';\n}\n\nexport function FilterPanel({\n  className,\n  filters: streamableFilters,\n  resetFiltersLabel: streamableResetFiltersLabel,\n  rangeFilterApplyLabel: streamableRangeFilterApplyLabel,\n  paginationInfo: streamablePaginationInfo,\n}: FilterPanelProps) {\n  const filters = useStreamable(streamableFilters);\n  const resetFiltersLabel = useStreamable(streamableResetFiltersLabel) ?? 'Reset filters';\n  const rangeFilterApplyLabel = useStreamable(streamableRangeFilterApplyLabel);\n  const paginationInfo = useStreamable(streamablePaginationInfo);\n  const startCursorParamName = paginationInfo?.startCursorParamName ?? 'before';\n  const endCursorParamName = paginationInfo?.endCursorParamName ?? 'after';\n  const [params, setParams] = useQueryStates(\n    {\n      ...getFilterParsers(filters),\n      [startCursorParamName]: parseAsString,\n      [endCursorParamName]: parseAsString,\n    },\n    {\n      shallow: false,\n      history: 'push',\n    },\n  );\n  const [isPending, startTransition] = useTransition();\n  const [optimisticParams, setOptimisticParams] = useOptimistic(params);\n  const [accordionItems, setAccordionItems] = useState(() =>\n    filters\n      .filter((filter) => filter.type !== 'link-group')\n      .map((filter, index) => ({\n        key: index.toString(),\n        value: index.toString(),\n        filter,\n        expanded: index < 3,\n      })),\n  );\n\n  if (filters.length === 0) return null;\n\n  const linkGroupFilters = filters.filter(\n    (filter): filter is LinkGroupFilter => filter.type === 'link-group',\n  );\n  return (\n    <div className={clsx('group/filter-panel', className)} data-pending={isPending ? true : null}>\n      <Stream\n        fallback={<FilterPanelSkeleton />}\n        value={Streamable.all([\n          streamableFilters,\n          streamableResetFiltersLabel,\n          streamableRangeFilterApplyLabel,\n        ])}\n      >\n        {() => (\n          <div className=\"space-y-5\">\n            {linkGroupFilters.map((linkGroup, index) => (\n              <div key={index.toString()}>\n                <h3 className=\"py-4 font-(family-name:--product-list-section-filter-label-font-family,var(--font-family-mono)) text-sm text-(--product-list-section-filter-label,var(--contrast-400)) uppercase\">\n                  {linkGroup.label}\n                </h3>\n                <ul>\n                  {linkGroup.links.map((link, linkIndex) => (\n                    <li className=\"py-2\" key={linkIndex.toString()}>\n                      <Link\n                        className=\"font-(family-name:--product-list-section-filter-link-font-family,var(--font-family-body)) text-base font-medium text-(--product-list-section-filter-link,var(--contrast-500)) transition-colors duration-300 ease-out hover:text-(--product-list-section-filter-link-hover,var(--foreground))\"\n                        href={link.href}\n                      >\n                        {link.label}\n                      </Link>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            ))}\n            <Accordion\n              onValueChange={(items) =>\n                setAccordionItems((prevItems) =>\n                  prevItems.map((prevItem) => ({\n                    ...prevItem,\n                    expanded: items.includes(prevItem.value),\n                  })),\n                )\n              }\n              type=\"multiple\"\n              value={accordionItems.filter((item) => item.expanded).map((item) => item.value)}\n            >\n              {accordionItems.map((accordionItem) => {\n                const { key, value, filter } = accordionItem;\n\n                switch (filter.type) {\n                  case 'toggle-group':\n                    return (\n                      <AccordionItem\n                        key={key}\n                        title={`${filter.label}${getParamCountLabel(optimisticParams, filter.paramName)}`}\n                        value={value}\n                      >\n                        <ToggleGroup\n                          label={filter.label}\n                          onValueChange={(toggleGroupValues) => {\n                            startTransition(async () => {\n                              const nextParams = {\n                                ...optimisticParams,\n                                [startCursorParamName]: null,\n                                [endCursorParamName]: null,\n                                [filter.paramName]:\n                                  toggleGroupValues.length === 0 ? null : toggleGroupValues,\n                              };\n\n                              setOptimisticParams(nextParams);\n                              await setParams(nextParams);\n                            });\n                          }}\n                          options={filter.options}\n                          type=\"multiple\"\n                          value={optimisticParams[filter.paramName] ?? []}\n                        />\n                      </AccordionItem>\n                    );\n\n                  case 'range':\n                    return (\n                      <AccordionItem key={key} title={filter.label} value={value}>\n                        <RangeInput\n                          applyLabel={rangeFilterApplyLabel}\n                          disabled={filter.disabled}\n                          max={filter.max}\n                          maxLabel={filter.maxLabel}\n                          maxName={filter.maxParamName}\n                          maxPlaceholder={filter.maxPlaceholder}\n                          maxPrepend={filter.maxPrepend}\n                          min={filter.min}\n                          minLabel={filter.minLabel}\n                          minName={filter.minParamName}\n                          minPlaceholder={filter.minPlaceholder}\n                          minPrepend={filter.minPrepend}\n                          onChange={({ min, max }) => {\n                            startTransition(async () => {\n                              const nextParams = {\n                                ...optimisticParams,\n                                [filter.minParamName]: min,\n                                [filter.maxParamName]: max,\n                                [startCursorParamName]: null,\n                                [endCursorParamName]: null,\n                              };\n\n                              setOptimisticParams(nextParams);\n                              await setParams(nextParams);\n                            });\n                          }}\n                          value={{\n                            min: optimisticParams[filter.minParamName] ?? null,\n                            max: optimisticParams[filter.maxParamName] ?? null,\n                          }}\n                        />\n                      </AccordionItem>\n                    );\n\n                  case 'rating':\n                    return (\n                      <AccordionItem key={key} title={filter.label} value={value}>\n                        <div className=\"space-y-3\">\n                          {[5, 4, 3, 2, 1].map((rating) => (\n                            <Checkbox\n                              checked={\n                                optimisticParams[filter.paramName]?.includes(rating.toString()) ??\n                                false\n                              }\n                              disabled={filter.disabled}\n                              key={rating}\n                              label={<Rating rating={rating} showRating={false} />}\n                              onCheckedChange={(checked) =>\n                                startTransition(async () => {\n                                  const ratings = new Set(optimisticParams[filter.paramName]);\n\n                                  if (checked === true) ratings.add(rating.toString());\n                                  else ratings.delete(rating.toString());\n\n                                  const nextParams = {\n                                    ...optimisticParams,\n                                    [filter.paramName]: Array.from(ratings),\n                                    [startCursorParamName]: null,\n                                    [endCursorParamName]: null,\n                                  };\n\n                                  setOptimisticParams(nextParams);\n                                  await setParams(nextParams);\n                                })\n                              }\n                            />\n                          ))}\n                        </div>\n                      </AccordionItem>\n                    );\n\n                  default:\n                    return null;\n                }\n              })}\n            </Accordion>\n\n            <Button\n              onClick={() => {\n                startTransition(async () => {\n                  const nextParams = {\n                    ...Object.fromEntries(\n                      Object.entries(optimisticParams).map(([key]) => [key, null]),\n                    ),\n                    [startCursorParamName]: optimisticParams[startCursorParamName],\n                    [endCursorParamName]: optimisticParams[endCursorParamName],\n                  };\n\n                  setOptimisticParams(nextParams);\n                  await setParams(nextParams);\n                });\n              }}\n              size=\"small\"\n              variant=\"secondary\"\n            >\n              {resetFiltersLabel}\n            </Button>\n          </div>\n        )}\n      </Stream>\n    </div>\n  );\n}\n\nexport function FilterPanelSkeleton() {\n  return (\n    <Skeleton.Root className=\"group-has-[[data-pending]]/filter-panel:animate-pulse\" pending>\n      <div className=\"space-y-5\" data-pending>\n        {Array.from({ length: 3 }).map((_, idx) => (\n          <div key={idx}>\n            <div className=\"flex items-start gap-8 py-3 @md:py-4\">\n              <Skeleton.Text characterCount={12} className=\"flex-1 rounded-sm text-sm\" />\n              <Skeleton.Box className=\"mt-1 h-4 w-4 rounded\" />\n            </div>\n            <div className=\"py-3 text-base\">\n              <div className=\"flex flex-wrap gap-2\">\n                <Skeleton.Box className=\"h-12 w-[8ch] rounded-full\" />\n                <Skeleton.Box className=\"h-12 w-[12ch] rounded-full\" />\n                <Skeleton.Box className=\"h-12 w-[10ch] rounded-full\" />\n              </div>\n            </div>\n          </div>\n        ))}\n        {/* Reset Filters Button */}\n        <Skeleton.Box className=\"h-10 w-[10ch] rounded-full\" />\n      </div>\n    </Skeleton.Root>\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/sections/product-list-section/filter-panel.tsx"
    },
    {
      "path": "vibes/soul/sections/product-list-section/filter-parsers.ts",
      "content": "import { parseAsArrayOf, parseAsInteger, parseAsString, ParserBuilder } from 'nuqs/server';\n\nimport { Filter } from './filter-panel';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getFilterParsers(filters: Filter[]): Record<string, ParserBuilder<any>> {\n  return filters\n    .filter((filter) => filter.type !== 'link-group')\n    .reduce((acc, filter) => {\n      switch (filter.type) {\n        case 'range':\n          return {\n            ...acc,\n            [filter.minParamName]: parseAsInteger,\n            [filter.maxParamName]: parseAsInteger,\n          };\n        case 'toggle-group':\n          return {\n            ...acc,\n            [filter.paramName]: parseAsArrayOf(parseAsString),\n          };\n        case 'rating':\n          return {\n            ...acc,\n            [filter.paramName]: parseAsArrayOf(parseAsString),\n          };\n\n        default:\n          return {\n            ...acc,\n          };\n      }\n    }, {});\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/sections/product-list-section/filter-parsers.ts"
    },
    {
      "path": "vibes/soul/sections/product-list-section/sorting.tsx",
      "content": "'use client';\n\nimport { parseAsString, useQueryState } from 'nuqs';\nimport { useOptimistic, useTransition } from 'react';\n\nimport { Select } from '@/vibes/soul/form/select';\nimport { Streamable, useStreamable } from '@/vibes/soul/lib/streamable';\nimport * as Skeleton from '@/vibes/soul/primitives/skeleton';\n\nexport interface Option {\n  label: string;\n  value: string;\n}\n\nexport function Sorting({\n  label: streamableLabel,\n  options: streamableOptions,\n  paramName = 'sort',\n  defaultValue = '',\n  placeholder: streamablePlaceholder,\n}: {\n  label?: Streamable<string | null>;\n  options: Streamable<Option[]>;\n  paramName?: string;\n  defaultValue?: string;\n  placeholder?: Streamable<string | null>;\n}) {\n  const [param, setParam] = useQueryState(\n    paramName,\n    parseAsString.withDefault(defaultValue).withOptions({ shallow: false, history: 'push' }),\n  );\n  const [optimisticParam, setOptimisticParam] = useOptimistic(param);\n  const [isPending, startTransition] = useTransition();\n  const options = useStreamable(streamableOptions);\n  const label = useStreamable(streamableLabel) ?? 'Sort';\n  const placeholder = useStreamable(streamablePlaceholder) ?? 'Sort by';\n\n  return (\n    <Select\n      hideLabel\n      label={label}\n      name={paramName}\n      onValueChange={(value) => {\n        startTransition(async () => {\n          setOptimisticParam(value);\n          await setParam(value);\n        });\n      }}\n      options={options}\n      pending={isPending}\n      placeholder={placeholder}\n      value={optimisticParam}\n      variant=\"round\"\n    />\n  );\n}\n\nexport function SortingSkeleton() {\n  return (\n    <Skeleton.Root\n      className=\"@container-normal group-has-[[data-pending]]/product-list-section:animate-pulse\"\n      pending\n    >\n      <Skeleton.Box className=\"h-[50px] w-[12ch] rounded-full\" data-pending />\n    </Skeleton.Root>\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/sections/product-list-section/sorting.tsx"
    }
  ]
}