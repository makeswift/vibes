{
  "name": "sticky-sidebar-layout",
  "type": "registry:ui",
  "dependencies": [
    "clsx"
  ],
  "registryDependencies": [
    "streamable",
    "skeleton",
    "select"
  ],
  "files": [
    {
      "path": "vibes/soul/sections/sticky-sidebar-layout/index.tsx",
      "content": "import { clsx } from 'clsx';\nimport { ReactNode } from 'react';\n\nexport interface StickySidebarLayoutProps {\n  className?: string;\n  sidebar: ReactNode;\n  children: ReactNode;\n  containerSize?: 'md' | 'lg' | 'xl' | '2xl';\n  sidebarSize?: '1/4' | '1/3' | '1/2' | 'sm' | 'md' | 'lg';\n  sidebarPosition?: 'before' | 'after';\n  hideOverflow?: boolean;\n}\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n * :root {\n *   --section-max-width-medium: 768px;\n *   --section-max-width-large: 1024px;\n *   --section-max-width-x-large: 1280px;\n *   --section-max-width-2x-large: 1536px;\n * }\n * ```\n */\nexport function StickySidebarLayout({\n  className,\n  sidebar,\n  children,\n  sidebarSize = '1/3',\n  sidebarPosition = 'before',\n  containerSize = '2xl',\n  hideOverflow = false,\n}: StickySidebarLayoutProps) {\n  return (\n    <section className={clsx('@container', hideOverflow && 'overflow-hidden', className)}>\n      <div\n        className={clsx(\n          'mx-auto flex flex-col items-stretch gap-x-16 gap-y-10 px-4 py-10 @xl:px-6 @xl:py-14 @4xl:flex-row @4xl:px-8 @4xl:py-20',\n          {\n            md: 'max-w-[var(--section-max-width-medium,768px)]',\n            lg: 'max-w-[var(--section-max-width-large,1024px)]',\n            xl: 'max-w-[var(--section-max-width-x-large,1280px)]',\n            '2xl': 'max-w-[var(--section-max-width-2x-large,1536px)]',\n          }[containerSize],\n        )}\n      >\n        <div\n          className={clsx(\n            'min-w-0',\n            sidebarPosition === 'after' ? 'order-2' : 'order-1',\n            {\n              '1/3': '@4xl:w-1/3',\n              '1/2': '@4xl:w-1/2',\n              '1/4': '@4xl:w-1/4',\n              sm: '@4xl:w-48',\n              md: '@4xl:w-60',\n              lg: '@4xl:w-80',\n            }[sidebarSize],\n          )}\n        >\n          <div className=\"group/sidebar-menu sticky top-10\">{sidebar}</div>\n        </div>\n        <div\n          className={clsx(\n            'min-w-0',\n            sidebarPosition === 'after' ? 'order-1' : 'order-2',\n            {\n              '1/3': '@4xl:w-2/3',\n              '1/2': '@4xl:w-1/2',\n              '1/4': '@4xl:w-3/4',\n              sm: '@4xl:flex-1',\n              md: '@4xl:flex-1',\n              lg: '@4xl:flex-1',\n            }[sidebarSize],\n          )}\n        >\n          {children}\n        </div>\n      </div>\n    </section>\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/sections/sticky-sidebar-layout/index.tsx"
    },
    {
      "path": "vibes/soul/sections/sticky-sidebar-layout/sidebar-menu/index.tsx",
      "content": "import { ComponentPropsWithoutRef } from 'react';\n\nimport { Stream, Streamable } from '@/vibes/soul/lib/streamable';\nimport * as Skeleton from '@/vibes/soul/primitives/skeleton';\n\nimport { SidebarMenuLink } from './sidebar-menu-link';\nimport { SidebarMenuSelect } from './sidebar-menu-select';\n\ninterface MenuLink {\n  href: string;\n  label: string;\n  prefetch?: ComponentPropsWithoutRef<typeof SidebarMenuLink>['prefetch'];\n}\n\nexport interface SidebarMenuProps {\n  links: Streamable<MenuLink[]>;\n  placeholderCount?: number;\n}\n\nexport function SidebarMenu({ links: streamableLinks, placeholderCount = 5 }: SidebarMenuProps) {\n  return (\n    <Stream\n      fallback={<SidebarMenuSkeleton placeholderCount={placeholderCount} />}\n      value={streamableLinks}\n    >\n      {(links) => {\n        if (!links.length) {\n          return null;\n        }\n\n        return (\n          <nav>\n            <ul className=\"hidden @2xl:block\">\n              {links.map((link, index) => (\n                <li key={index}>\n                  <SidebarMenuLink href={link.href} prefetch={link.prefetch}>\n                    {link.label}\n                  </SidebarMenuLink>\n                </li>\n              ))}\n            </ul>\n            <div className=\"@2xl:hidden\">\n              <SidebarMenuSelect links={links} />\n            </div>\n          </nav>\n        );\n      }}\n    </Stream>\n  );\n}\n\nexport function SidebarMenuSkeleton({\n  placeholderCount = 5,\n}: Pick<SidebarMenuProps, 'placeholderCount'>) {\n  return (\n    <>\n      <Skeleton.Root\n        className=\"hidden group-has-[[data-pending]]/sidebar-menu:animate-pulse @4xl:block\"\n        pending\n      >\n        <div className=\"w-full\" data-pending>\n          {Array.from({ length: placeholderCount }).map((_, index) => (\n            <div className=\"flex h-10 items-center px-3 text-sm\" key={index}>\n              <Skeleton.Text characterCount={10} className=\"rounded-md\" />\n            </div>\n          ))}\n        </div>\n      </Skeleton.Root>\n      <Skeleton.Root\n        className=\"group-has-[[data-pending]]/sidebar-menu:animate-pulse @4xl:hidden\"\n        pending\n      >\n        <div data-pending>\n          <Skeleton.Box className=\"h-[50px] w-full rounded-lg\" />\n        </div>\n      </Skeleton.Root>\n    </>\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/sections/sticky-sidebar-layout/sidebar-menu/index.tsx"
    },
    {
      "path": "vibes/soul/sections/sticky-sidebar-layout/sidebar-menu/sidebar-menu-link.tsx",
      "content": "'use client';\n\nimport { clsx } from 'clsx';\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\nimport React from 'react';\n\nexport function SidebarMenuLink({\n  className,\n  href,\n  ...rest\n}: React.ComponentPropsWithoutRef<typeof Link>) {\n  const pathname = usePathname();\n  const linkPathname = typeof href === 'string' ? href : (href.pathname ?? null);\n\n  return (\n    <Link\n      {...rest}\n      className={clsx(\n        'flex min-h-10 items-center rounded-md px-3 text-sm font-semibold',\n        linkPathname !== null && pathname.includes(linkPathname)\n          ? 'bg-contrast-100'\n          : 'hover:bg-contrast-100',\n        className,\n      )}\n      href={href}\n    />\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/sections/sticky-sidebar-layout/sidebar-menu/sidebar-menu-link.tsx"
    },
    {
      "path": "vibes/soul/sections/sticky-sidebar-layout/sidebar-menu/sidebar-menu-select.tsx",
      "content": "'use client';\n\nimport { usePathname, useRouter } from 'next/navigation';\n\nimport { Select } from '@/vibes/soul/form/select';\n\nexport function SidebarMenuSelect({ links }: { links: Array<{ href: string; label: string }> }) {\n  const pathname = usePathname();\n  const router = useRouter();\n\n  return (\n    <Select\n      name=\"sidebar-layout-link-select\"\n      onValueChange={(value) => {\n        router.push(value);\n      }}\n      options={links.map((link) => ({ value: link.href, label: link.label }))}\n      value={pathname}\n    />\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/sections/sticky-sidebar-layout/sidebar-menu/sidebar-menu-select.tsx"
    }
  ]
}