{
  "name": "account-settings",
  "type": "registry:ui",
  "dependencies": [
    "@conform-to/zod",
    "@conform-to/react",
    "zod"
  ],
  "registryDependencies": [
    "input",
    "button",
    "toaster"
  ],
  "files": [
    {
      "path": "vibes/soul/sections/account-settings/index.tsx",
      "content": "import { ChangePasswordAction, ChangePasswordForm } from './change-password-form';\nimport { Account, UpdateAccountAction, UpdateAccountForm } from './update-account-form';\n\nexport interface AccountSettingsSectionProps {\n  title?: string;\n  account: Account;\n  updateAccountAction: UpdateAccountAction;\n  updateAccountSubmitLabel?: string;\n  changePasswordTitle?: string;\n  changePasswordAction: ChangePasswordAction;\n  changePasswordSubmitLabel?: string;\n}\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n * :root {\n *   --account-settings-section-font-family: var(--font-family-heading);\n *   --account-settings-section-text: var(--foreground);\n *   --account-settings-section-border: var(--contrast-100);\n * }\n * ```\n */\nexport function AccountSettingsSection({\n  title = 'Account Settings',\n  account,\n  updateAccountAction,\n  updateAccountSubmitLabel,\n  changePasswordTitle = 'Change Password',\n  changePasswordAction,\n  changePasswordSubmitLabel,\n}: AccountSettingsSectionProps) {\n  return (\n    <div className=\"@container\">\n      <div className=\"flex flex-col gap-y-24 @xl:flex-row\">\n        <div className=\"flex w-full flex-col @xl:max-w-lg\">\n          <div className=\"pb-12\">\n            <h1 className=\"mb-10 font-(family-name:--account-settings-section-font-family,var(--font-family-heading)) text-4xl leading-none font-medium text-(--account-settings-section-text,var(--foreground)) @xl:text-4xl\">\n              {title}\n            </h1>\n            <UpdateAccountForm\n              account={account}\n              action={updateAccountAction}\n              submitLabel={updateAccountSubmitLabel}\n            />\n          </div>\n          <div className=\"border-t border-(--account-settings-section-border,var(--contrast-100)) pt-12\">\n            <h1 className=\"mb-10 font-(family-name:--account-settings-section-font-family,var(--font-family-heading)) text-2xl leading-none font-medium text-(--account-settings-section-text,var(--foreground)) @xl:text-2xl\">\n              {changePasswordTitle}\n            </h1>\n            <ChangePasswordForm\n              action={changePasswordAction}\n              submitLabel={changePasswordSubmitLabel}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/sections/account-settings/index.tsx"
    },
    {
      "path": "vibes/soul/sections/account-settings/change-password-form.tsx",
      "content": "'use client';\n\nimport { getFormProps, getInputProps, SubmissionResult, useForm } from '@conform-to/react';\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod';\nimport { ReactNode, useActionState, useEffect } from 'react';\nimport { useFormStatus } from 'react-dom';\n\nimport { Input } from '@/vibes/soul/form/input';\nimport { Button } from '@/vibes/soul/primitives/button';\n\nimport { changePasswordSchema } from './schema';\n\ntype Action<State, Payload> = (state: Awaited<State>, payload: Payload) => State | Promise<State>;\n\nexport type ChangePasswordAction = Action<SubmissionResult | null, FormData>;\n\nexport interface ChangePasswordFormProps {\n  action: ChangePasswordAction;\n  currentPasswordLabel?: string;\n  newPasswordLabel?: string;\n  confirmPasswordLabel?: string;\n  submitLabel?: string;\n}\n\nexport function ChangePasswordForm({\n  action,\n  currentPasswordLabel = 'Current password',\n  newPasswordLabel = 'New password',\n  confirmPasswordLabel = 'Confirm password',\n  submitLabel = 'Update',\n}: ChangePasswordFormProps) {\n  const [lastResult, formAction] = useActionState(action, null);\n  const [form, fields] = useForm({\n    defaultValue: {\n      currentPassword: '',\n      password: '',\n      confirmPassword: '',\n    },\n    constraint: getZodConstraint(changePasswordSchema),\n    shouldValidate: 'onBlur',\n    shouldRevalidate: 'onInput',\n    onValidate({ formData }) {\n      return parseWithZod(formData, { schema: changePasswordSchema });\n    },\n  });\n\n  useEffect(() => {\n    if (lastResult?.error) {\n      console.log(lastResult.error);\n    }\n  }, [lastResult]);\n\n  return (\n    <form {...getFormProps(form)} action={formAction} className=\"space-y-5\">\n      <Input\n        {...getInputProps(fields.currentPassword, { type: 'password' })}\n        errors={fields.currentPassword.errors}\n        key={fields.currentPassword.id}\n        label={currentPasswordLabel}\n        placeholder={currentPasswordLabel}\n      />\n      <Input\n        {...getInputProps(fields.password, { type: 'password' })}\n        errors={fields.password.errors}\n        key={fields.password.id}\n        label={newPasswordLabel}\n        placeholder={newPasswordLabel}\n      />\n      <Input\n        {...getInputProps(fields.confirmPassword, { type: 'password' })}\n        className=\"mb-6\"\n        errors={fields.confirmPassword.errors}\n        key={fields.confirmPassword.id}\n        label={confirmPasswordLabel}\n        placeholder={confirmPasswordLabel}\n      />\n      <SubmitButton>{submitLabel}</SubmitButton>\n    </form>\n  );\n}\n\nfunction SubmitButton({ children }: { children: ReactNode }) {\n  const { pending } = useFormStatus();\n\n  return (\n    <Button loading={pending} size=\"small\" type=\"submit\" variant=\"secondary\">\n      {children}\n    </Button>\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/sections/account-settings/change-password-form.tsx"
    },
    {
      "path": "vibes/soul/sections/account-settings/update-account-form.tsx",
      "content": "'use client';\n\nimport { getFormProps, getInputProps, SubmissionResult, useForm } from '@conform-to/react';\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod';\nimport { useActionState, useEffect, useOptimistic, useTransition } from 'react';\nimport { z } from 'zod';\n\nimport { Input } from '@/vibes/soul/form/input';\nimport { Button } from '@/vibes/soul/primitives/button';\nimport { toast } from '@/vibes/soul/primitives/toaster';\n\nimport { updateAccountSchema } from './schema';\n\ntype Action<S, P> = (state: Awaited<S>, payload: P) => S | Promise<S>;\n\nexport type UpdateAccountAction = Action<State, FormData>;\n\nexport type Account = z.infer<typeof updateAccountSchema>;\n\ninterface State {\n  account: Account;\n  successMessage?: string;\n  lastResult: SubmissionResult | null;\n}\n\nexport interface UpdateAccountFormProps {\n  action: UpdateAccountAction;\n  account: Account;\n  firstNameLabel?: string;\n  lastNameLabel?: string;\n  emailLabel?: string;\n  companyLabel?: string;\n  submitLabel?: string;\n}\n\nexport function UpdateAccountForm({\n  action,\n  account,\n  firstNameLabel = 'First name',\n  lastNameLabel = 'Last name',\n  emailLabel = 'Email',\n  companyLabel = 'Company',\n  submitLabel = 'Update',\n}: UpdateAccountFormProps) {\n  const [state, formAction] = useActionState(action, { account, lastResult: null });\n  const [pending, startTransition] = useTransition();\n\n  const [optimisticState, setOptimisticState] = useOptimistic<State, FormData>(\n    state,\n    (prevState, formData) => {\n      const intent = formData.get('intent');\n      const submission = parseWithZod(formData, { schema: updateAccountSchema });\n\n      if (submission.status !== 'success') return prevState;\n\n      switch (intent) {\n        case 'update': {\n          return {\n            ...prevState,\n            account: submission.value,\n          };\n        }\n\n        default:\n          return prevState;\n      }\n    },\n  );\n\n  const [form, fields] = useForm({\n    lastResult: state.lastResult,\n    defaultValue: optimisticState.account,\n    constraint: getZodConstraint(updateAccountSchema),\n    shouldValidate: 'onBlur',\n    shouldRevalidate: 'onInput',\n    onValidate({ formData }) {\n      return parseWithZod(formData, { schema: updateAccountSchema });\n    },\n  });\n\n  useEffect(() => {\n    if (state.lastResult?.status === 'success' && typeof state.successMessage === 'string') {\n      toast.success(state.successMessage);\n    }\n  }, [state]);\n\n  return (\n    <form\n      {...getFormProps(form)}\n      action={(formData) => {\n        startTransition(() => {\n          formAction(formData);\n          setOptimisticState(formData);\n        });\n      }}\n      className=\"space-y-5\"\n    >\n      <div className=\"flex gap-5\">\n        <Input\n          {...getInputProps(fields.firstName, { type: 'text' })}\n          errors={fields.firstName.errors}\n          key={fields.firstName.id}\n          label={firstNameLabel}\n          placeholder={firstNameLabel}\n        />\n        <Input\n          {...getInputProps(fields.lastName, { type: 'text' })}\n          errors={fields.lastName.errors}\n          key={fields.lastName.id}\n          label={lastNameLabel}\n          placeholder={lastNameLabel}\n        />\n      </div>\n      <Input\n        {...getInputProps(fields.email, { type: 'text' })}\n        errors={fields.email.errors}\n        key={fields.email.id}\n        label={emailLabel}\n        placeholder={emailLabel}\n      />\n      <Input\n        {...getInputProps(fields.company, { type: 'text' })}\n        errors={fields.company.errors}\n        key={fields.company.id}\n        label={companyLabel}\n        placeholder={companyLabel}\n      />\n      <Button\n        loading={pending}\n        name=\"intent\"\n        size=\"small\"\n        type=\"submit\"\n        value=\"update\"\n        variant=\"secondary\"\n      >\n        {submitLabel}\n      </Button>\n    </form>\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/sections/account-settings/update-account-form.tsx"
    },
    {
      "path": "vibes/soul/sections/account-settings/schema.ts",
      "content": "import { z } from 'zod';\n\nexport const updateAccountSchema = z.object({\n  firstName: z.string().min(2, { message: 'Name must be at least 2 characters long.' }).trim(),\n  lastName: z.string().min(2, { message: 'Name must be at least 2 characters long.' }).trim(),\n  email: z.string().email({ message: 'Please enter a valid email.' }).trim(),\n  company: z.string().trim().optional(),\n});\n\nexport const changePasswordSchema = z\n  .object({\n    currentPassword: z.string().trim(),\n    password: z\n      .string()\n      .min(8, { message: 'Be at least 8 characters long' })\n      .regex(/[a-zA-Z]/, { message: 'Contain at least one letter.' })\n      .regex(/[0-9]/, { message: 'Contain at least one number.' })\n      .regex(/[^a-zA-Z0-9]/, {\n        message: 'Contain at least one special character.',\n      })\n      .trim(),\n    confirmPassword: z.string(),\n  })\n  .superRefine(({ confirmPassword, password }, ctx) => {\n    if (confirmPassword !== password) {\n      ctx.addIssue({\n        code: 'custom',\n        message: 'The passwords did not match',\n        path: ['confirmPassword'],\n      });\n    }\n  });\n",
      "type": "registry:ui",
      "target": "vibes/soul/sections/account-settings/schema.ts"
    }
  ]
}