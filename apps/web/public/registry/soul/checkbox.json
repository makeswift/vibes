{
  "name": "checkbox",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-checkbox",
    "@radix-ui/react-label",
    "lucide-react",
    "clsx"
  ],
  "registryDependencies": [
    "field-error"
  ],
  "files": [
    {
      "path": "vibes/soul/form/checkbox/index.tsx",
      "content": "'use client';\n\nimport * as CheckboxPrimitive from '@radix-ui/react-checkbox';\nimport * as LabelPrimitive from '@radix-ui/react-label';\nimport { clsx } from 'clsx';\nimport { Check } from 'lucide-react';\nimport { ComponentPropsWithoutRef, ReactNode, useId } from 'react';\n\nimport { FieldError } from '@/vibes/soul/form/field-error';\n\nexport interface CheckboxProps extends ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root> {\n  label?: ReactNode;\n  errors?: string[];\n  colorScheme?: 'light' | 'dark';\n}\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n *  :root {\n *    --checkbox-focus: var(--primary);\n *    --checkbox-light-label: var(--foreground);\n *    --checkbox-light-error: var(--error);\n *    --checkbox-light-unchecked-border: var(--contrast-200);\n *    --checkbox-light-unchecked-border-hover: var(--contrast-300);\n *    --checkbox-light-unchecked-background: var(--background);\n *    --checkbox-light-unchecked-icon: var(--foreground);\n *    --checkbox-light-checked-border: var(--foreground);\n *    --checkbox-light-checked-border-hover: var(--foreground);\n *    --checkbox-light-checked-background: var(--foreground);\n *    --checkbox-light-checked-icon: var(--background);\n *    --checkbox-light-disabled-border: var(--contrast-200);\n *    --checkbox-light-disabled-background: var(--contrast-100);\n *    --checkbox-light-disabled-icon: var(--contrast-300);\n *    --checkbox-dark-label: var(--background);\n *    --checkbox-dark-error: var(--error);\n *    --checkbox-dark-unchecked-border: var(--contrast-400);\n *    --checkbox-dark-unchecked-border-hover: var(--contrast-300);\n *    --checkbox-dark-unchecked-background: var(--foreground);\n *    --checkbox-dark-unchecked-icon: var(--background);\n *    --checkbox-dark-checked-border: var(--background);\n *    --checkbox-dark-checked-border-hover: var(--background);\n *    --checkbox-dark-checked-background: var(--foreground);\n *    --checkbox-dark-checked-icon: var(--foreground);\n *    --checkbox-dark-disabled-border: var(--contrast-200);\n *    --checkbox-dark-disabled-background: var(--contrast-100);\n *    --checkbox-dark-disabled-icon: var(--contrast-300);\n *    --checkbox-font-family: var(--font-family-body);\n *  }\n * ```\n */\nexport function Checkbox({\n  id,\n  label,\n  errors,\n  className,\n  colorScheme = 'light',\n  ...props\n}: CheckboxProps) {\n  const generatedId = useId();\n\n  return (\n    <div className=\"space-y-2\">\n      <div\n        className={clsx(\n          'flex items-center gap-2 font-(family-name:--checkbox-font-family,var(--font-family-body))',\n          className,\n        )}\n      >\n        <CheckboxPrimitive.Root\n          {...props}\n          aria-labelledby={id !== undefined ? `${id}-label` : `${generatedId}-label`}\n          className={clsx(\n            'peer flex h-5 w-5 items-center justify-center rounded-md border transition-colors duration-150 focus-visible:ring-2 focus-visible:ring-(--checkbox-focus,var(--primary)) focus-visible:outline-0 disabled:cursor-not-allowed',\n            {\n              light:\n                errors && errors.length > 0\n                  ? 'border-(--checkbox-light-error,var(--error))'\n                  : clsx(\n                      // Disabled states\n                      'disabled:border-(--checkbox-light-disabled-border,var(--contrast-200)) disabled:bg-(--checkbox-light-disabled-background,var(--contrast-100)) disabled:text-(--checkbox-light-disabled-icon,var(--contrast-300))',\n                      // Normal states\n                      'enabled:data-[state=checked]:border-(--checkbox-light-checked-border,var(--foreground)) enabled:data-[state=checked]:bg-(--checkbox-light-checked-background,var(--foreground)) enabled:data-[state=checked]:text-(--checkbox-light-checked-text,var(--background)) enabled:data-[state=unchecked]:border-(--checkbox-light-unchecked-border,var(--contrast-200)) enabled:data-[state=unchecked]:bg-(--checkbox-light-unchecked-background,var(--background)) enabled:data-[state=unchecked]:text-(--checkbox-light-unchecked-text,var(--foreground))',\n                      // Hover states (only apply when checkbox is enabled)\n                      'enabled:data-[state=checked]:hover:border-(--checkbox-light-checked-border-hover,var(--foreground)) enabled:data-[state=unchecked]:hover:border-(--checkbox-light-unchecked-border-hover,var(--contrast-300))',\n                    ),\n              dark:\n                errors && errors.length > 0\n                  ? 'border-(--checkbox-dark-error,var(--error))'\n                  : clsx(\n                      // Disabled states\n                      'disabled:border-(--checkbox-dark-disabled-border,var(--contrast-200)) disabled:bg-(--checkbox-dark-disabled-background,var(--contrast-100)) disabled:text-(--checkbox-dark-disabled-icon,var(--contrast-300))',\n                      // Normal states\n                      'enabled:data-[state=checked]:border-(--checkbox-dark-checked-border,var(--background)) enabled:data-[state=checked]:bg-(--checkbox-dark-checked-background,var(--foreground)) enabled:data-[state=checked]:text-(--checkbox-dark-checked-text,var(--background)) enabled:data-[state=unchecked]:border-(--checkbox-dark-unchecked-border,var(--contrast-400)) enabled:data-[state=unchecked]:bg-(--checkbox-dark-unchecked-background,var(--foreground)) enabled:data-[state=unchecked]:text-(--checkbox-dark-unchecked-text,var(--background))',\n                      // Hover states (only apply when checkbox is enabled)\n                      'enabled:data-[state=checked]:hover:border-(--checkbox-dark-checked-border-hover,var(--background)) enabled:data-[state=unchecked]:hover:border-(--checkbox-dark-unchecked-border-hover,var(--contrast-300))',\n                    ),\n            }[colorScheme],\n          )}\n          id={id ?? generatedId}\n        >\n          <CheckboxPrimitive.Indicator>\n            <Check className=\"h-4 w-4\" color=\"currentColor\" />\n          </CheckboxPrimitive.Indicator>\n        </CheckboxPrimitive.Root>\n\n        {label != null && label !== '' && (\n          <LabelPrimitive.Root\n            className={clsx(\n              'cursor-pointer text-sm peer-disabled:cursor-not-allowed peer-disabled:opacity-50',\n              {\n                light: 'text-(--checkbox-light-label,var(--foreground))',\n                dark: 'text-(--checkbox-dark-label,var(--background))',\n              }[colorScheme],\n            )}\n            htmlFor={id ?? generatedId}\n            id={id !== undefined ? `${id}-label` : `${generatedId}-label`}\n          >\n            {label}\n          </LabelPrimitive.Root>\n        )}\n      </div>\n      {errors?.map((error) => <FieldError key={error}>{error}</FieldError>)}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/form/checkbox/index.tsx"
    }
  ]
}