{
  "name": "product-detail",
  "type": "registry:ui",
  "dependencies": [
    "@conform-to/react",
    "@conform-to/zod",
    "nuqs",
    "zod"
  ],
  "registryDependencies": [
    "streamable",
    "accordion",
    "price-label",
    "rating",
    "skeleton",
    "breadcrumbs",
    "product-gallery",
    "button-radio-group",
    "card-radio-group",
    "checkbox",
    "form-status",
    "input",
    "number-input",
    "radio-group",
    "select",
    "swatch-radio-group",
    "button",
    "toaster"
  ],
  "files": [
    {
      "path": "vibes/soul/sections/product-detail/index.tsx",
      "content": "import { ReactNode } from 'react';\n\nimport { Stream, Streamable } from '@/vibes/soul/lib/streamable';\nimport { Accordion, AccordionItem } from '@/vibes/soul/primitives/accordion';\nimport { Price, PriceLabel } from '@/vibes/soul/primitives/price-label';\nimport { Rating } from '@/vibes/soul/primitives/rating';\nimport * as Skeleton from '@/vibes/soul/primitives/skeleton';\nimport { type Breadcrumb, Breadcrumbs } from '@/vibes/soul/sections/breadcrumbs';\nimport { ProductGallery } from '@/vibes/soul/sections/product-detail/product-gallery';\n\nimport { ProductDetailForm, ProductDetailFormAction } from './product-detail-form';\nimport { Field } from './schema';\n\ninterface ProductDetailProduct {\n  id: string;\n  title: string;\n  href: string;\n  images: Streamable<Array<{ src: string; alt: string }>>;\n  price?: Streamable<Price | null>;\n  subtitle?: string;\n  badge?: string;\n  rating?: Streamable<number | null>;\n  summary?: Streamable<string>;\n  description?: Streamable<string | ReactNode | null>;\n  accordions?: Streamable<\n    Array<{\n      title: string;\n      content: ReactNode;\n    }>\n  >;\n}\n\nexport interface ProductDetailProps<F extends Field> {\n  breadcrumbs?: Streamable<Breadcrumb[]>;\n  product: Streamable<ProductDetailProduct | null>;\n  action: ProductDetailFormAction<F>;\n  fields: Streamable<F[]>;\n  quantityLabel?: string;\n  incrementLabel?: string;\n  decrementLabel?: string;\n  ctaLabel?: Streamable<string | null>;\n  ctaDisabled?: Streamable<boolean | null>;\n  prefetch?: boolean;\n  thumbnailLabel?: string;\n  additionalInformationTitle?: string;\n}\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n * :root {\n *   --product-detail-border: var(--contrast-100);\n *   --product-detail-subtitle-font-family: var(--font-family-mono);\n *   --product-detail-title-font-family: var(--font-family-heading);\n *   --product-detail-primary-text: var(--foreground);\n *   --product-detail-secondary-text: var(--contrast-500);\n * }\n * ```\n */\nexport function ProductDetail<F extends Field>({\n  product: streamableProduct,\n  action,\n  fields: streamableFields,\n  breadcrumbs,\n  quantityLabel,\n  incrementLabel,\n  decrementLabel,\n  ctaLabel: streamableCtaLabel,\n  ctaDisabled: streamableCtaDisabled,\n  prefetch,\n  thumbnailLabel,\n  additionalInformationTitle = 'Additional information',\n}: ProductDetailProps<F>) {\n  return (\n    <section className=\"@container\">\n      <div className=\"group/product-detail mx-auto w-full max-w-screen-2xl px-4 py-10 @xl:px-6 @xl:py-14 @4xl:px-8 @4xl:py-20\">\n        {breadcrumbs && (\n          <div className=\"group/breadcrumbs mb-6\">\n            <Breadcrumbs breadcrumbs={breadcrumbs} />\n          </div>\n        )}\n        <Stream fallback={<ProductDetailSkeleton />} value={streamableProduct}>\n          {(product) =>\n            product && (\n              <div className=\"grid grid-cols-1 items-stretch gap-x-8 gap-y-8 @2xl:grid-cols-2 @5xl:gap-x-12\">\n                <div className=\"group/product-gallery hidden @2xl:block\">\n                  <Stream fallback={<ProductGallerySkeleton />} value={product.images}>\n                    {(images) => <ProductGallery images={images} />}\n                  </Stream>\n                </div>\n                {/* Product Details */}\n                <div className=\"text-(--product-detail-primary-text,var(--foreground))\">\n                  {Boolean(product.subtitle) && (\n                    <p className=\"font-(family-name:--product-detail-subtitle-font-family,var(--font-family-mono)) text-sm uppercase\">\n                      {product.subtitle}\n                    </p>\n                  )}\n                  <h1 className=\"mt-2 mb-3 font-(family-name:--product-detail-title-font-family,var(--font-family-heading)) text-2xl leading-none font-medium @xl:mb-4 @xl:text-3xl @4xl:text-4xl\">\n                    {product.title}\n                  </h1>\n                  <div className=\"group/product-rating\">\n                    <Stream fallback={<RatingSkeleton />} value={product.rating}>\n                      {(rating) => <Rating rating={rating ?? 0} />}\n                    </Stream>\n                  </div>\n                  <div className=\"group/product-price\">\n                    <Stream fallback={<PriceLabelSkeleton />} value={product.price}>\n                      {(price) => (\n                        <PriceLabel className=\"my-3 text-xl @xl:text-2xl\" price={price ?? ''} />\n                      )}\n                    </Stream>\n                  </div>\n                  <div className=\"group/product-gallery mb-8 @2xl:hidden\">\n                    <Stream fallback={<ProductGallerySkeleton />} value={product.images}>\n                      {(images) => (\n                        <ProductGallery images={images} thumbnailLabel={thumbnailLabel} />\n                      )}\n                    </Stream>\n                  </div>\n                  <div className=\"group/product-summary\">\n                    <Stream fallback={<ProductSummarySkeleton />} value={product.summary}>\n                      {(summary) =>\n                        Boolean(summary) && (\n                          <p className=\"text-(--product-detail-secondary-text,var(--contrast-500))\">\n                            {summary}\n                          </p>\n                        )\n                      }\n                    </Stream>\n                  </div>\n                  <div className=\"group/product-detail-form\">\n                    <Stream\n                      fallback={<ProductDetailFormSkeleton />}\n                      value={Streamable.all([\n                        streamableFields,\n                        streamableCtaLabel,\n                        streamableCtaDisabled,\n                      ])}\n                    >\n                      {([fields, ctaLabel, ctaDisabled]) => (\n                        <ProductDetailForm\n                          action={action}\n                          ctaDisabled={ctaDisabled ?? undefined}\n                          ctaLabel={ctaLabel ?? undefined}\n                          decrementLabel={decrementLabel}\n                          fields={fields}\n                          incrementLabel={incrementLabel}\n                          prefetch={prefetch}\n                          productId={product.id}\n                          quantityLabel={quantityLabel}\n                        />\n                      )}\n                    </Stream>\n                  </div>\n                  <div className=\"group/product-description\">\n                    <Stream fallback={<ProductDescriptionSkeleton />} value={product.description}>\n                      {(description) =>\n                        Boolean(description) && (\n                          <div className=\"prose prose-sm max-w-none border-t border-(--product-detail-border,var(--contrast-100)) py-8 [&>div>*:first-child]:mt-0 [&>div>*:last-child]:mb-0\">\n                            {description}\n                          </div>\n                        )\n                      }\n                    </Stream>\n                  </div>\n                  <h2 className=\"sr-only\">{additionalInformationTitle}</h2>\n                  <div className=\"group/product-accordion\">\n                    <Stream fallback={<ProductAccordionsSkeleton />} value={product.accordions}>\n                      {(accordions) =>\n                        accordions && (\n                          <Accordion\n                            className=\"border-t border-(--product-detail-border,var(--contrast-100)) pt-4\"\n                            type=\"multiple\"\n                          >\n                            {accordions.map((accordion, index) => (\n                              <AccordionItem\n                                key={index}\n                                title={accordion.title}\n                                value={index.toString()}\n                              >\n                                {accordion.content}\n                              </AccordionItem>\n                            ))}\n                          </Accordion>\n                        )\n                      }\n                    </Stream>\n                  </div>\n                </div>\n              </div>\n            )\n          }\n        </Stream>\n      </div>\n    </section>\n  );\n}\n\nfunction ProductGallerySkeleton() {\n  return (\n    <Skeleton.Root className=\"group-has-[[data-pending]]/product-gallery:animate-pulse\" pending>\n      <div className=\"w-full overflow-hidden rounded-xl @xl:rounded-2xl\">\n        <div className=\"flex\">\n          <Skeleton.Box className=\"aspect-[4/5] h-full w-full shrink-0 grow-0 basis-full\" />\n        </div>\n      </div>\n      <div className=\"mt-2 flex max-w-full gap-2 overflow-x-auto\">\n        {Array.from({ length: 5 }).map((_, idx) => (\n          <Skeleton.Box className=\"h-12 w-12 shrink-0 rounded-lg @md:h-16 @md:w-16\" key={idx} />\n        ))}\n      </div>\n    </Skeleton.Root>\n  );\n}\n\nfunction PriceLabelSkeleton() {\n  return <Skeleton.Box className=\"my-4 h-4 w-20 rounded-md\" />;\n}\n\nfunction RatingSkeleton() {\n  return (\n    <Skeleton.Root\n      className=\"flex w-[136px] items-center gap-1 group-has-[[data-pending]]/product-rating:animate-pulse\"\n      pending\n    >\n      <Skeleton.Box className=\"h-4 w-[100px] rounded-md\" />\n      <Skeleton.Box className=\"h-6 w-8 rounded-xl\" />\n    </Skeleton.Root>\n  );\n}\n\nfunction ProductSummarySkeleton() {\n  return (\n    <Skeleton.Root\n      className=\"flex w-full flex-col gap-3.5 pb-6 group-has-[[data-pending]]/product-summary:animate-pulse\"\n      pending\n    >\n      {Array.from({ length: 3 }).map((_, idx) => (\n        <Skeleton.Box className=\"h-2.5 w-full\" key={idx} />\n      ))}\n    </Skeleton.Root>\n  );\n}\n\nfunction ProductDescriptionSkeleton() {\n  return (\n    <Skeleton.Root\n      className=\"flex w-full flex-col gap-3.5 pb-6 group-has-[[data-pending]]/product-description:animate-pulse\"\n      pending\n    >\n      {Array.from({ length: 2 }).map((_, idx) => (\n        <Skeleton.Box className=\"h-2.5 w-full\" key={idx} />\n      ))}\n      <Skeleton.Box className=\"h-2.5 w-3/4\" />\n    </Skeleton.Root>\n  );\n}\n\nfunction ProductDetailFormSkeleton() {\n  return (\n    <Skeleton.Root\n      className=\"flex flex-col gap-8 py-8 group-has-[[data-pending]]/product-detail-form:animate-pulse\"\n      pending\n    >\n      <div className=\"flex flex-col gap-5\">\n        <Skeleton.Box className=\"h-2 w-10 rounded-md\" />\n        <div className=\"flex gap-2\">\n          {Array.from({ length: 3 }).map((_, idx) => (\n            <Skeleton.Box className=\"h-11 w-[72px] rounded-full\" key={idx} />\n          ))}\n        </div>\n      </div>\n      <div className=\"flex flex-col gap-5\">\n        <Skeleton.Box className=\"h-3 w-16 rounded-md\" />\n        <div className=\"flex gap-4\">\n          {Array.from({ length: 5 }).map((_, idx) => (\n            <Skeleton.Box className=\"h-10 w-10 rounded-full\" key={idx} />\n          ))}\n        </div>\n      </div>\n      <div className=\"flex gap-2\">\n        <Skeleton.Box className=\"h-12 w-[120px] rounded-lg\" />\n        <Skeleton.Box className=\"h-12 w-[216px] rounded-full\" />\n      </div>\n    </Skeleton.Root>\n  );\n}\n\nfunction ProductAccordionsSkeleton() {\n  return (\n    <Skeleton.Root\n      className=\"flex h-[600px] w-full flex-col gap-8 pt-4 group-has-[[data-pending]]/product-accordion:animate-pulse\"\n      pending\n    >\n      <div className=\"flex items-center justify-between\">\n        <Skeleton.Box className=\"h-2 w-20 rounded-xs\" />\n        <Skeleton.Box className=\"h-3 w-3 rounded-xs\" />\n      </div>\n      <div className=\"mb-1 flex flex-col gap-4\">\n        <Skeleton.Box className=\"h-3 w-full rounded-xs\" />\n        <Skeleton.Box className=\"h-3 w-full rounded-xs\" />\n        <Skeleton.Box className=\"h-3 w-3/5 rounded-xs\" />\n      </div>\n      <div className=\"flex items-center justify-between\">\n        <Skeleton.Box className=\"h-2 w-24 rounded-xs\" />\n        <Skeleton.Box className=\"h-3 w-3 rounded-full\" />\n      </div>\n      <div className=\"flex items-center justify-between\">\n        <Skeleton.Box className=\"h-2 w-20 rounded-xs\" />\n        <Skeleton.Box className=\"h-3 w-3 rounded-full\" />\n      </div>\n      <div className=\"flex items-center justify-between\">\n        <Skeleton.Box className=\"h-2 w-32 rounded-xs\" />\n        <Skeleton.Box className=\"h-3 w-3 rounded-full\" />\n      </div>\n    </Skeleton.Root>\n  );\n}\n\nexport function ProductDetailSkeleton() {\n  return (\n    <Skeleton.Root\n      className=\"grid grid-cols-1 items-stretch gap-x-6 gap-y-8 group-has-[[data-pending]]/product-detail:animate-pulse @2xl:grid-cols-2 @5xl:gap-x-12\"\n      pending\n    >\n      <div className=\"hidden @2xl:block\">\n        <ProductGallerySkeleton />\n      </div>\n      <div>\n        <Skeleton.Box className=\"mb-6 h-4 w-20 rounded-lg\" />\n        <Skeleton.Box className=\"mb-6 h-6 w-72 rounded-lg\" />\n        <RatingSkeleton />\n        <PriceLabelSkeleton />\n        <ProductSummarySkeleton />\n        <div className=\"mb-8 @2xl:hidden\">\n          <ProductGallerySkeleton />\n        </div>\n        <ProductDetailFormSkeleton />\n      </div>\n    </Skeleton.Root>\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/sections/product-detail/index.tsx"
    },
    {
      "path": "vibes/soul/sections/product-detail/product-detail-form.tsx",
      "content": "'use client';\n\nimport {\n  FieldMetadata,\n  FormProvider,\n  FormStateInput,\n  getFormProps,\n  SubmissionResult,\n  useForm,\n  useInputControl,\n} from '@conform-to/react';\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod';\nimport { usePathname, useRouter } from 'next/navigation';\nimport { createSerializer, parseAsString, useQueryStates } from 'nuqs';\nimport { ReactNode, useActionState, useCallback, useEffect } from 'react';\nimport { useFormStatus } from 'react-dom';\nimport { z } from 'zod';\n\nimport { ButtonRadioGroup } from '@/vibes/soul/form/button-radio-group';\nimport { CardRadioGroup } from '@/vibes/soul/form/card-radio-group';\nimport { Checkbox } from '@/vibes/soul/form/checkbox';\nimport { DatePicker } from '@/vibes/soul/form/date-picker';\nimport { FormStatus } from '@/vibes/soul/form/form-status';\nimport { Input } from '@/vibes/soul/form/input';\nimport { NumberInput } from '@/vibes/soul/form/number-input';\nimport { RadioGroup } from '@/vibes/soul/form/radio-group';\nimport { Select } from '@/vibes/soul/form/select';\nimport { SwatchRadioGroup } from '@/vibes/soul/form/swatch-radio-group';\nimport { Textarea } from '@/vibes/soul/form/textarea';\nimport { Button } from '@/vibes/soul/primitives/button';\nimport { toast } from '@/vibes/soul/primitives/toaster';\n\nimport { Field, schema, SchemaRawShape } from './schema';\n\ntype Action<S, P> = (state: Awaited<S>, payload: P) => S | Promise<S>;\n\ninterface State<F extends Field> {\n  fields: F[];\n  lastResult: SubmissionResult | null;\n  successMessage?: ReactNode;\n}\n\nexport type ProductDetailFormAction<F extends Field> = Action<State<F>, FormData>;\n\nexport interface ProductDetailFormProps<F extends Field> {\n  fields: F[];\n  action: ProductDetailFormAction<F>;\n  productId: string;\n  ctaLabel?: string;\n  quantityLabel?: string;\n  incrementLabel?: string;\n  decrementLabel?: string;\n  ctaDisabled?: boolean;\n  prefetch?: boolean;\n}\n\nexport function ProductDetailForm<F extends Field>({\n  action,\n  fields,\n  productId,\n  ctaLabel = 'Add to cart',\n  quantityLabel = 'Quantity',\n  incrementLabel = 'Increase quantity',\n  decrementLabel = 'Decrease quantity',\n  ctaDisabled = false,\n  prefetch = false,\n}: ProductDetailFormProps<F>) {\n  const router = useRouter();\n  const pathname = usePathname();\n\n  const searchParams = fields.reduce<Record<string, typeof parseAsString>>((acc, field) => {\n    return field.persist === true ? { ...acc, [field.name]: parseAsString } : acc;\n  }, {});\n\n  const [params] = useQueryStates(searchParams, { shallow: false });\n\n  const onPrefetch = (fieldName: string, value: string) => {\n    if (prefetch) {\n      const serialize = createSerializer(searchParams);\n\n      const newUrl = serialize(pathname, { ...params, [fieldName]: value });\n\n      router.prefetch(newUrl);\n    }\n  };\n\n  const defaultValue = fields.reduce<{\n    [Key in keyof SchemaRawShape]?: z.infer<SchemaRawShape[Key]>;\n  }>(\n    (acc, field) => ({\n      ...acc,\n      [field.name]: params[field.name] ?? field.defaultValue,\n    }),\n    { quantity: 1 },\n  );\n\n  const [{ lastResult, successMessage }, formAction] = useActionState(action, {\n    fields,\n    lastResult: null,\n  });\n\n  useEffect(() => {\n    if (lastResult?.status === 'success') {\n      toast.success(successMessage);\n    }\n  }, [lastResult, successMessage]);\n\n  const [form, formFields] = useForm({\n    lastResult,\n    constraint: getZodConstraint(schema(fields)),\n    onValidate({ formData }) {\n      return parseWithZod(formData, { schema: schema(fields) });\n    },\n    defaultValue,\n    shouldValidate: 'onSubmit',\n    shouldRevalidate: 'onInput',\n  });\n\n  const quantityControl = useInputControl(formFields.quantity);\n\n  return (\n    <FormProvider context={form.context}>\n      <FormStateInput />\n      <form {...getFormProps(form)} action={formAction} className=\"py-8\">\n        <input name=\"id\" type=\"hidden\" value={productId} />\n        <div className=\"space-y-6\">\n          {fields.map((field) => {\n            return (\n              <FormField\n                field={field}\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                formField={formFields[field.name]!}\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                key={formFields[field.name]!.id}\n                onPrefetch={onPrefetch}\n              />\n            );\n          })}\n          {form.errors?.map((error, index) => (\n            <FormStatus className=\"pt-3\" key={index} type=\"error\">\n              {error}\n            </FormStatus>\n          ))}\n          <div className=\"flex gap-x-3 pt-3\">\n            <NumberInput\n              aria-label={quantityLabel}\n              decrementLabel={decrementLabel}\n              incrementLabel={incrementLabel}\n              min={1}\n              name={formFields.quantity.name}\n              onBlur={quantityControl.blur}\n              onChange={(e) => quantityControl.change(e.currentTarget.value)}\n              onFocus={quantityControl.focus}\n              required\n              value={quantityControl.value}\n            />\n            <SubmitButton disabled={ctaDisabled}>{ctaLabel}</SubmitButton>\n          </div>\n        </div>\n      </form>\n    </FormProvider>\n  );\n}\n\nfunction SubmitButton({ children, disabled }: { children: ReactNode; disabled?: boolean }) {\n  const { pending } = useFormStatus();\n\n  return (\n    <Button\n      className=\"w-auto @xl:w-56\"\n      disabled={disabled}\n      loading={pending}\n      size=\"medium\"\n      type=\"submit\"\n    >\n      {children}\n    </Button>\n  );\n}\n\n// eslint-disable-next-line complexity\nfunction FormField({\n  field,\n  formField,\n  onPrefetch,\n}: {\n  field: Field;\n  formField: FieldMetadata<string | number | boolean | Date | undefined>;\n  onPrefetch: (fieldName: string, value: string) => void;\n}) {\n  const controls = useInputControl(formField);\n\n  const [, setParams] = useQueryStates(\n    field.persist === true ? { [field.name]: parseAsString.withOptions({ shallow: false }) } : {},\n  );\n\n  const handleChange = useCallback(\n    (value: string) => {\n      void setParams({ [field.name]: value === '' ? value : null });\n      controls.change(value);\n    },\n    [setParams, field, controls],\n  );\n\n  const handleOnOptionMouseEnter = (value: string) => {\n    if (field.persist === true) {\n      onPrefetch(field.name, value);\n    }\n  };\n\n  switch (field.type) {\n    case 'number':\n      return (\n        <NumberInput\n          decrementLabel={field.decrementLabel}\n          errors={formField.errors}\n          incrementLabel={field.incrementLabel}\n          key={formField.id}\n          label={field.label}\n          name={formField.name}\n          onBlur={controls.blur}\n          onChange={(e) => handleChange(e.currentTarget.value)}\n          onFocus={controls.focus}\n          required={formField.required}\n          value={controls.value ?? ''}\n        />\n      );\n\n    case 'text':\n      return (\n        <Input\n          errors={formField.errors}\n          key={formField.id}\n          label={field.label}\n          name={formField.name}\n          onBlur={controls.blur}\n          onChange={(e) => handleChange(e.currentTarget.value)}\n          onFocus={controls.focus}\n          required={formField.required}\n          value={controls.value ?? ''}\n        />\n      );\n\n    case 'textarea':\n      return (\n        <Textarea\n          errors={formField.errors}\n          key={formField.id}\n          label={field.label}\n          maxLength={field.maxLength}\n          minLength={field.minLength}\n          name={formField.name}\n          onBlur={controls.blur}\n          onChange={(e) => handleChange(e.currentTarget.value)}\n          onFocus={controls.focus}\n          required={formField.required}\n          value={controls.value ?? ''}\n        />\n      );\n\n    case 'date':\n      return (\n        <DatePicker\n          defaultValue={controls.value}\n          errors={formField.errors}\n          key={formField.id}\n          label={field.label}\n          name={formField.name}\n          onBlur={controls.blur}\n          onChange={(e) => handleChange(e.currentTarget.value)}\n          onFocus={controls.focus}\n          required={formField.required}\n        />\n      );\n\n    case 'checkbox':\n      return (\n        <Checkbox\n          errors={formField.errors}\n          key={formField.id}\n          label={field.label}\n          name={formField.name}\n          onBlur={controls.blur}\n          onCheckedChange={(value) => handleChange(String(value))}\n          onFocus={controls.focus}\n          required={formField.required}\n          value={controls.value ?? ''}\n        />\n      );\n\n    case 'select':\n      return (\n        <Select\n          errors={formField.errors}\n          key={formField.id}\n          label={field.label}\n          name={formField.name}\n          onBlur={controls.blur}\n          onFocus={controls.focus}\n          onOptionMouseEnter={handleOnOptionMouseEnter}\n          onValueChange={handleChange}\n          options={field.options}\n          required={formField.required}\n          value={controls.value ?? ''}\n        />\n      );\n\n    case 'radio-group':\n      return (\n        <RadioGroup\n          errors={formField.errors}\n          key={formField.id}\n          label={field.label}\n          name={formField.name}\n          onBlur={controls.blur}\n          onFocus={controls.focus}\n          onOptionMouseEnter={handleOnOptionMouseEnter}\n          onValueChange={handleChange}\n          options={field.options}\n          required={formField.required}\n          value={controls.value ?? ''}\n        />\n      );\n\n    case 'swatch-radio-group':\n      return (\n        <SwatchRadioGroup\n          errors={formField.errors}\n          key={formField.id}\n          label={field.label}\n          name={formField.name}\n          onBlur={controls.blur}\n          onFocus={controls.focus}\n          onOptionMouseEnter={handleOnOptionMouseEnter}\n          onValueChange={handleChange}\n          options={field.options}\n          required={formField.required}\n          value={controls.value ?? ''}\n        />\n      );\n\n    case 'card-radio-group':\n      return (\n        <CardRadioGroup\n          errors={formField.errors}\n          key={formField.id}\n          label={field.label}\n          name={formField.name}\n          onBlur={controls.blur}\n          onFocus={controls.focus}\n          onOptionMouseEnter={handleOnOptionMouseEnter}\n          onValueChange={handleChange}\n          options={field.options}\n          required={formField.required}\n          value={controls.value ?? ''}\n        />\n      );\n\n    case 'button-radio-group':\n      return (\n        <ButtonRadioGroup\n          errors={formField.errors}\n          key={formField.id}\n          label={field.label}\n          name={formField.name}\n          onBlur={controls.blur}\n          onFocus={controls.focus}\n          onOptionMouseEnter={handleOnOptionMouseEnter}\n          onValueChange={handleChange}\n          options={field.options}\n          required={formField.required}\n          value={controls.value ?? ''}\n        />\n      );\n  }\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/sections/product-detail/product-detail-form.tsx"
    },
    {
      "path": "vibes/soul/sections/product-detail/product-gallery.tsx",
      "content": "'use client';\n\nimport { clsx } from 'clsx';\nimport useEmblaCarousel from 'embla-carousel-react';\nimport Image from 'next/image';\nimport { useEffect, useState } from 'react';\n\nexport interface ProductGalleryProps {\n  images: Array<{ alt: string; src: string }>;\n  className?: string;\n  thumbnailLabel?: string;\n}\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n * :root {\n *   --product-gallery-focus: var(--primary);\n *   --product-gallery-image-background: var(--contrast-100);\n *   --product-gallery-image-border: var(--contrast-100);\n *   --product-gallery-image-border-active: var(--foreground);\n * }\n * ```\n */\nexport function ProductGallery({\n  images,\n  className,\n  thumbnailLabel = 'View image number',\n}: ProductGalleryProps) {\n  const [previewImage, setPreviewImage] = useState(0);\n  const [emblaRef, emblaApi] = useEmblaCarousel();\n\n  useEffect(() => {\n    if (!emblaApi) return;\n\n    const onSelect = () => setPreviewImage(emblaApi.selectedScrollSnap());\n\n    emblaApi.on('select', onSelect);\n\n    return () => {\n      emblaApi.off('select', onSelect);\n    };\n  }, [emblaApi]);\n\n  const selectImage = (index: number) => {\n    setPreviewImage(index);\n    if (emblaApi) emblaApi.scrollTo(index);\n  };\n\n  return (\n    <div className={clsx('sticky top-4 flex flex-col gap-2 @2xl:flex-row', className)}>\n      <div\n        className=\"w-full overflow-hidden rounded-xl @xl:rounded-2xl @2xl:order-2\"\n        ref={emblaRef}\n      >\n        <div className=\"flex\">\n          {images.map((image, idx) => (\n            <div className=\"relative aspect-[4/5] w-full shrink-0 grow-0 basis-full\" key={idx}>\n              <Image\n                alt={image.alt}\n                className=\"bg-(--product-gallery-image-background,var(--contrast-100)) object-cover\"\n                fill\n                priority={idx === 0}\n                sizes=\"(min-width: 42rem) 50vw, 100vw\"\n                src={image.src}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n      <div className=\"flex max-w-full shrink-0 flex-row gap-2 overflow-x-auto p-1 @2xl:order-1 @2xl:flex-col\">\n        {images.map((image, index) => (\n          <button\n            aria-label={`${thumbnailLabel} ${index + 1}`}\n            className={clsx(\n              'relative h-12 w-12 shrink-0 overflow-hidden rounded-lg border transition-all duration-300 focus-visible:ring-2 focus-visible:ring-(--product-gallery-focus,var(--primary)) focus-visible:ring-offset-2 focus-visible:outline-hidden @md:h-16 @md:w-16',\n              index === previewImage\n                ? 'border-(--product-gallery-image-border-active,var(--foreground))'\n                : 'border-transparent',\n            )}\n            key={index}\n            onClick={() => selectImage(index)}\n          >\n            <div\n              className={clsx(\n                index === previewImage ? 'opacity-100' : 'opacity-50',\n                'transition-all duration-300 hover:opacity-100',\n              )}\n            >\n              <Image\n                alt={image.alt}\n                className=\"bg-(--product-gallery-image-background,var(--contrast-100)) object-cover\"\n                fill\n                sizes=\"(min-width: 28rem) 4rem, 3rem\"\n                src={image.src}\n              />\n            </div>\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/sections/product-detail/product-gallery.tsx"
    },
    {
      "path": "vibes/soul/sections/product-detail/schema.ts",
      "content": "import { z } from 'zod';\n\ninterface FormField {\n  name: string;\n  label?: string;\n  errors?: string[];\n  required?: boolean;\n  persist?: boolean;\n}\n\ntype RadioField = {\n  type: 'radio-group';\n  options: Array<{ label: string; value: string }>;\n  defaultValue?: string;\n} & FormField;\n\ntype SelectField = {\n  type: 'select';\n  options: Array<{ label: string; value: string }>;\n  defaultValue?: string;\n} & FormField;\n\ntype CheckboxField = {\n  type: 'checkbox';\n  defaultValue?: string;\n} & FormField;\n\ntype NumberInputField = {\n  type: 'number';\n  defaultValue?: string;\n  min?: number;\n  max?: number;\n  incrementLabel?: string;\n  decrementLabel?: string;\n} & FormField;\n\ntype TextInputField = {\n  type: 'text';\n  defaultValue?: string;\n  pattern?: string;\n} & FormField;\n\ntype TextAreaField = {\n  type: 'textarea';\n  defaultValue?: string;\n  pattern?: string;\n  minLength?: number;\n  maxLength?: number;\n} & FormField;\n\ntype DateField = {\n  type: 'date';\n  defaultValue?: string;\n  pattern?: string;\n} & FormField;\n\ntype SwatchRadioFieldOption =\n  | {\n      type: 'color';\n      value: string;\n      label: string;\n      color: string;\n      disabled?: boolean;\n    }\n  | {\n      type: 'image';\n      value: string;\n      label: string;\n      image: { src: string; alt: string };\n      disabled?: boolean;\n    };\n\ntype SwatchRadioField = {\n  type: 'swatch-radio-group';\n  defaultValue?: string;\n  options: SwatchRadioFieldOption[];\n} & FormField;\n\ntype CardRadioField = {\n  type: 'card-radio-group';\n  defaultValue?: string;\n  options: Array<{\n    value: string;\n    label: string;\n    image?: { src: string; alt: string };\n    disabled?: boolean;\n  }>;\n} & FormField;\n\ntype ButtonRadioField = {\n  type: 'button-radio-group';\n  defaultValue?: string;\n  pattern?: string;\n  options: Array<{\n    value: string;\n    label: string;\n    disabled?: boolean;\n  }>;\n} & FormField;\n\nexport type Field =\n  | RadioField\n  | CheckboxField\n  | NumberInputField\n  | TextInputField\n  | TextAreaField\n  | DateField\n  | SwatchRadioField\n  | CardRadioField\n  | ButtonRadioField\n  | SelectField;\n\nexport interface SchemaRawShape {\n  [key: string]:\n    | z.ZodString\n    | z.ZodOptional<z.ZodString>\n    | z.ZodNumber\n    | z.ZodOptional<z.ZodNumber>;\n  id: z.ZodString;\n  quantity: z.ZodNumber;\n}\n\nexport function schema(fields: Field[]): z.ZodObject<SchemaRawShape> {\n  const shape: SchemaRawShape = {\n    id: z.string(),\n    quantity: z.number().min(1),\n  };\n\n  fields.forEach((field) => {\n    let fieldSchema: z.ZodString | z.ZodNumber;\n    switch (field.type) {\n      case 'number':\n        fieldSchema = z.number();\n\n        if (field.min != null) fieldSchema = fieldSchema.min(field.min);\n        if (field.max != null) fieldSchema = fieldSchema.max(field.max);\n\n        shape[field.name] = fieldSchema;\n        break;\n\n      case 'textarea':\n        fieldSchema = z.string();\n        if (field.minLength != null) fieldSchema = fieldSchema.min(field.minLength);\n        if (field.maxLength != null) fieldSchema = fieldSchema.max(field.maxLength);\n\n        shape[field.name] = fieldSchema;\n        break;\n\n      default:\n        fieldSchema = z.string();\n\n        shape[field.name] = fieldSchema;\n        break;\n    }\n\n    if (field.required !== true) shape[field.name] = fieldSchema.optional();\n  });\n\n  return z.object(shape);\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/sections/product-detail/schema.ts"
    }
  ]
}