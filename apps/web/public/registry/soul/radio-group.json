{
  "name": "radio-group",
  "type": "registry:ui",
  "dependencies": [
    "clsx",
    "@radix-ui/react-radio-group"
  ],
  "registryDependencies": [
    "field-error",
    "label"
  ],
  "files": [
    {
      "path": "vibes/soul/form/radio-group/index.tsx",
      "content": "import * as RadioGroupPrimitive from '@radix-ui/react-radio-group';\nimport { clsx } from 'clsx';\nimport * as React from 'react';\n\nimport { FieldError } from '@/vibes/soul/form/field-error';\nimport { Label } from '@/vibes/soul/form/label';\n\ninterface Option {\n  value: string;\n  label: string;\n  disabled?: boolean;\n}\n\nexport const RadioGroup = React.forwardRef<\n  React.ComponentRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root> & {\n    label?: string;\n    options: Option[];\n    errors?: string[];\n    colorScheme?: 'light' | 'dark';\n    onOptionMouseEnter?: (value: string) => void;\n  }\n>(\n  (\n    { label, options, errors, className, onOptionMouseEnter, colorScheme = 'light', ...rest },\n    ref,\n  ) => {\n    const id = React.useId();\n\n    return (\n      <div className={clsx('space-y-2', className)}>\n        {label !== undefined && label !== '' && <Label id={id}>{label}</Label>}\n        <RadioGroupPrimitive.Root {...rest} aria-labelledby={id} className=\"space-y-2\" ref={ref}>\n          {options.map((option, index) => (\n            <RadioGroupItem\n              colorScheme={colorScheme}\n              error={errors != null && errors.length > 0}\n              key={index}\n              onOptionMouseEnter={onOptionMouseEnter}\n              option={option}\n            />\n          ))}\n        </RadioGroupPrimitive.Root>\n        {errors?.map((error) => <FieldError key={error}>{error}</FieldError>)}\n      </div>\n    );\n  },\n);\n\nRadioGroup.displayName = 'RadioGroup';\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n *  :root {\n *   --radio-group-light-background: var(--background);\n *   --radio-group-light-border: var(--contrast-200);\n *   --radio-group-light-border-error: var(--error);\n *   --radio-group-light-disabled-border-error: color-mix(in oklab, var(--error) 50%, transparent);\n *   --radio-group-light-border-hover: var(--contrast-300);\n *   --radio-group-light-border-focus: var(--contrast-300);\n *   --radio-group-light-indicator-background: var(--foreground);\n *   --radio-group-light-label: var(--foreground);\n *   --radio-group-dark-background: var(--foreground);\n *   --radio-group-dark-border: var(--contrast-400);\n *   --radio-group-dark-border-error: var(--error);\n *   --radio-group-dark-disabled-border-error: color-mix(in oklab, var(--error) 50%, transparent);\n *   --radio-group-dark-border-hover: var(--contrast-300);\n *   --radio-group-dark-border-focus: var(--contrast-300);\n *   --radio-group-dark-indicator-background: var(--background);\n *   --radio-group-dark-label: var(--background);\n *  }\n * ```\n */\nfunction RadioGroupItem({\n  option,\n  error = false,\n  colorScheme = 'light',\n  onOptionMouseEnter,\n}: {\n  option: Option;\n  error?: boolean;\n  colorScheme?: 'light' | 'dark';\n  onOptionMouseEnter?: (value: string) => void;\n}) {\n  const id = React.useId();\n\n  return (\n    <div className=\"flex items-center\" key={option.value}>\n      <RadioGroupPrimitive.Item\n        aria-label={option.label}\n        className={clsx(\n          'size-5 cursor-default rounded-full border outline-hidden data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&:disabled+label]:pointer-events-none [&:disabled+label]:opacity-50',\n          {\n            light: 'bg-(--radio-group-light-background,var(--background))',\n            dark: 'bg-(--radio-group-dark-background,var(--foreground))',\n          }[colorScheme],\n          {\n            light: error\n              ? 'border-(--radio-group-light-border-error,var(--error)) disabled:border-(--radio-group-light-disabled-border-error,color-mix(in_oklab,var(--error)_50%,transparent))'\n              : 'border-(--radio-group-light-border,var(--contrast-200)) hover:border-(--radio-group-light-border-hover,var(--contrast-300)) focus:border-(--radio-group-light-border-focus,var(--contrast-300))',\n            dark: error\n              ? 'border-(--radio-group-dark-border-error,var(--error)) disabled:border-(--radio-group-dark-disabled-border-error,color-mix(in_oklab,var(--error)_50%,transparent))'\n              : 'border-(--radio-group-dark-border,var(--contrast-400)) hover:border-(--radio-group-dark-border-hover,var(--contrast-300)) focus:border-(--radio-group-light-border-focus,var(--contrast-300))',\n          }[colorScheme],\n        )}\n        disabled={option.disabled}\n        id={id}\n        onMouseEnter={() => {\n          onOptionMouseEnter?.(option.value);\n        }}\n        value={option.value}\n      >\n        <RadioGroupPrimitive.Indicator\n          className={clsx(\n            'relative flex size-full items-center justify-center after:block after:size-3 after:rounded-full',\n            {\n              light: 'after:bg-(--radio-group-light-indicator-background,var(--foreground))',\n              dark: 'after:bg-(--radio-group-dark-indicator-background,var(--background))',\n            }[colorScheme],\n          )}\n        />\n      </RadioGroupPrimitive.Item>\n      <label\n        className={clsx(\n          'pl-3 text-sm leading-none',\n          {\n            light: 'text-(--radio-group-light-label,var(--foreground))',\n            dark: 'text-(--radio-group-dark-label,var(--background))',\n          }[colorScheme],\n        )}\n        htmlFor={id}\n      >\n        {option.label}\n      </label>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/form/radio-group/index.tsx"
    }
  ]
}