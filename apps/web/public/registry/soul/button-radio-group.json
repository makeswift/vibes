{
  "name": "button-radio-group",
  "type": "registry:ui",
  "dependencies": [
    "clsx",
    "lucide-react",
    "@radix-ui/react-radio-group"
  ],
  "registryDependencies": [
    "field-error",
    "label"
  ],
  "files": [
    {
      "path": "vibes/soul/form/button-radio-group/index.tsx",
      "content": "import * as RadioGroupPrimitive from '@radix-ui/react-radio-group';\nimport { clsx } from 'clsx';\nimport * as React from 'react';\n\nimport { FieldError } from '@/vibes/soul/form/field-error';\nimport { Label } from '@/vibes/soul/form/label';\n\ninterface Option {\n  value: string;\n  label: string;\n  disabled?: boolean;\n}\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n *  :root {\n *   --button-radio-group-focus: var(--primary);\n *   --button-radio-group-light-unchecked-border: var(--contrast-100);\n *   --button-radio-group-light-unchecked-background: var(--background);\n *   --button-radio-group-light-unchecked-text: var(--foreground);\n *   --button-radio-group-light-unchecked-border-hover: var(--contrast-200);\n *   --button-radio-group-light-unchecked-background-hover: var(--contrast-100);\n *   --button-radio-group-light-checked-background: var(--foreground);\n *   --button-radio-group-light-checked-text: var(--background);\n *   --button-radio-group-light-border-error: var(--error);\n *   --button-radio-group-dark-unchecked-border: var(--contrast-500);\n *   --button-radio-group-dark-unchecked-background: var(--background);\n *   --button-radio-group-dark-unchecked-text: var(--background);\n *   --button-radio-group-dark-unchecked-border-hover: var(--contrast-400);\n *   --button-radio-group-dark-unchecked-background-hover: var(--contrast-500);\n *   --button-radio-group-dark-checked-background: var(--background);\n *   --button-radio-group-dark-checked-text: var(--foreground);\n *   --button-radio-group-dark-border-error: var(--error);\n *  }\n * ```\n */\nexport const ButtonRadioGroup = React.forwardRef<\n  React.ComponentRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root> & {\n    label?: string;\n    options: Option[];\n    errors?: string[];\n    onOptionMouseEnter?: (value: string) => void;\n    colorScheme?: 'light' | 'dark';\n  }\n>(\n  (\n    { label, options, errors, className, onOptionMouseEnter, colorScheme = 'light', ...rest },\n    ref,\n  ) => {\n    const id = React.useId();\n\n    return (\n      <div className={clsx('button-radio-group space-y-2', className)}>\n        {label !== undefined && label !== '' && (\n          <Label colorScheme={colorScheme} id={id}>\n            {label}\n          </Label>\n        )}\n        <RadioGroupPrimitive.Root\n          {...rest}\n          aria-labelledby={id}\n          className=\"flex flex-wrap gap-2\"\n          ref={ref}\n        >\n          {options.map((option) => (\n            <RadioGroupPrimitive.Item\n              aria-label={option.label}\n              className={clsx(\n                'font-body h-12 rounded-full border px-4 text-sm leading-normal font-normal whitespace-nowrap transition-colors focus-visible:ring-2 focus-visible:outline-0 data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n                {\n                  light:\n                    'border-(--button-radio-group-light-unchecked-border,var(--contrast-100)) focus-visible:ring-(--button-radio-group-light-focus,var(--primary)) data-[state=checked]:bg-(--button-radio-group-light-checked-background,var(--foreground)) data-[state=checked]:text-(--button-radio-group-light-checked-text,var(--background)) data-[state=unchecked]:bg-(--button-radio-group-light-unchecked-background,var(--background)) data-[state=unchecked]:text-(--button-radio-group-light-unchecked-text,var(--foreground)) data-[state=unchecked]:hover:border-(--button-radio-group-light-unchecked-border-hover,var(--contrast-200)) data-[state=unchecked]:hover:bg-(--button-radio-group-light-unchecked-background-hover,var(--contrast-100))',\n                  dark: 'border-(--button-radio-group-dark-unchecked-border,var(--contrast-500)) focus-visible:ring-(--button-radio-group-dark-focus,var(--primary)) data-[state=checked]:bg-(--button-radio-group-dark-checked-background,var(--background)) data-[state=checked]:text-(--button-radio-group-dark-checked-text,var(--foreground)) data-[state=unchecked]:bg-(--button-radio-group-dark-unchecked-background,var(--foreground)) data-[state=unchecked]:text-(--button-radio-group-dark-checked-text,var(--background)) data-[state=unchecked]:hover:border-(--button-radio-group-dark-unchecked-border-hover,var(--contrast-400)) data-[state=unchecked]:hover:bg-(--button-radio-group-dark-unchecked-background-hover,var(--contrast-500))',\n                }[colorScheme],\n                {\n                  light:\n                    errors && errors.length > 0\n                      ? 'data-[state=unchecked]:border-(--button-radio-group-light-border-error,var(--error))'\n                      : 'data-[state=checked]:border-(--button-radio-group-light-checked-background,var(--foreground))',\n                  dark:\n                    errors && errors.length > 0\n                      ? 'data-[state=unchecked]:border-(--button-radio-group-dark-border-error,var(--error))'\n                      : 'data-[state=checked]:border-(--button-radio-group-dark-checked-background,var(--foreground))',\n                }[colorScheme],\n              )}\n              disabled={option.disabled}\n              id={option.value}\n              key={option.value}\n              onMouseEnter={() => {\n                onOptionMouseEnter?.(option.value);\n              }}\n              value={option.value}\n            >\n              {option.label}\n            </RadioGroupPrimitive.Item>\n          ))}\n        </RadioGroupPrimitive.Root>\n        {errors?.map((error) => <FieldError key={error}>{error}</FieldError>)}\n      </div>\n    );\n  },\n);\n\nButtonRadioGroup.displayName = 'ButtonRadioGroup';\n",
      "type": "registry:ui",
      "target": "vibes/soul/form/button-radio-group/index.tsx"
    }
  ]
}