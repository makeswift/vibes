{
  "name": "cart",
  "type": "registry:ui",
  "dependencies": [
    "@conform-to/react",
    "@conform-to/zod",
    "clsx",
    "lucide-react",
    "zod"
  ],
  "registryDependencies": [
    "streamable",
    "button-link",
    "skeleton",
    "section-layout",
    "sticky-sidebar-layout",
    "button",
    "toaster",
    "input",
    "field-error",
    "chip"
  ],
  "files": [
    {
      "path": "vibes/soul/sections/cart/index.tsx",
      "content": "import { Stream, Streamable } from '@/vibes/soul/lib/streamable';\nimport { ButtonLink } from '@/vibes/soul/primitives/button-link';\nimport * as Skeleton from '@/vibes/soul/primitives/skeleton';\nimport { SectionLayout } from '@/vibes/soul/sections/section-layout';\nimport { StickySidebarLayout } from '@/vibes/soul/sections/sticky-sidebar-layout';\n\nimport { CartClient, Cart as CartData, CartLineItem, CartProps } from './client';\n\nexport { type CartLineItem } from './client';\n\nexport function Cart<LineItem extends CartLineItem>({\n  cart: streamableCart,\n  decrementLineItemLabel: streamableDecrementLineItemLabel,\n  title = 'Cart',\n  summaryTitle = 'Summary',\n  ...props\n}: Omit<CartProps<LineItem>, 'cart'> & {\n  cart: Streamable<CartData<LineItem>>;\n}) {\n  return (\n    <Stream\n      fallback={<CartSkeleton summaryTitle={summaryTitle} title={title} />}\n      value={streamableCart}\n    >\n      {(cart) => <CartClient {...props} cart={cart} summaryTitle={summaryTitle} title={title} />}\n    </Stream>\n  );\n}\n\nexport interface CartSkeletonProps {\n  className?: string;\n  placeholderCount?: number;\n  summaryPlaceholderCount?: number;\n  title?: string;\n  summaryTitle?: string;\n}\n\nexport function CartSkeleton({\n  title = 'Cart',\n  summaryTitle = 'Summary',\n  placeholderCount = 2,\n  summaryPlaceholderCount = 3,\n}: CartSkeletonProps) {\n  return (\n    <StickySidebarLayout\n      className=\"group/cart text-(--cart-text,var(--foreground))\"\n      sidebar={\n        <div>\n          <h2 className=\"mb-10 font-(family-name:--cart-title-font-family,var(--font-family-heading)) text-4xl leading-none font-medium @xl:text-5xl\">\n            {summaryTitle}\n          </h2>\n          <div className=\"group-has-[[data-pending]]/cart:animate-pulse\">\n            <div className=\"w-full\" data-pending>\n              <div className=\"divide-y divide-(--cart-border,var(--contrast-100))\">\n                {Array.from({ length: summaryPlaceholderCount }).map((_, index) => (\n                  <div className=\"py-4\" key={index}>\n                    <div className=\"flex items-center justify-between\">\n                      <Skeleton.Text characterCount={10} className=\"rounded-md\" />\n                      <Skeleton.Text characterCount={8} className=\"rounded-md\" />\n                    </div>\n                  </div>\n                ))}\n              </div>\n              <div className=\"flex justify-between border-t border-(--cart-border,var(--contrast-100)) py-6 text-xl font-bold\">\n                <div className=\"flex items-center justify-between\">\n                  <Skeleton.Text characterCount={8} className=\"rounded-md\" />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <Skeleton.Text characterCount={8} className=\"rounded-md\" />\n                </div>\n              </div>\n            </div>\n          </div>\n          <Skeleton.Box className=\"mt-4 h-[58px] w-full rounded-full\" />\n        </div>\n      }\n      sidebarPosition=\"after\"\n      sidebarSize=\"1/3\"\n    >\n      <div>\n        <h1 className=\"mb-10 font-(family-name:--cart-title-font-family,var(--font-family-heading)) text-4xl leading-none font-medium @xl:text-5xl\">\n          {title}\n        </h1>\n        {/* Cart Line Items */}\n        <div className=\"group-has-[[data-pending]]/cart:animate-pulse\">\n          <ul className=\"flex flex-col gap-5\" data-pending>\n            {Array.from({ length: placeholderCount }).map((_, index) => (\n              <li\n                className=\"@container flex flex-col items-start gap-x-5 gap-y-4 @sm:flex-row\"\n                key={index}\n              >\n                {/* Image */}\n                <Skeleton.Box className=\"aspect-square w-full max-w-24 rounded-xl\" />\n                <div className=\"flex grow flex-col flex-wrap justify-between gap-y-2 @xl:flex-row\">\n                  <div className=\"flex w-full flex-1 flex-col @xl:w-1/2 @xl:pr-4\">\n                    {/* Line Item Title */}\n                    <Skeleton.Text characterCount={15} className=\"rounded-md\" />\n                    {/* Subtitle */}\n                    <Skeleton.Text characterCount={10} className=\"rounded-md\" />\n                  </div>\n                  {/* Counter */}\n                  <div>\n                    <div className=\"flex w-full flex-wrap items-center gap-x-5 gap-y-2\">\n                      {/* Price */}\n                      <Skeleton.Text characterCount={5} className=\"rounded-md\" />\n                      {/* Counter */}\n                      <Skeleton.Box className=\"h-[44px] w-[118px] rounded-lg\" />\n                      {/* DeleteLineItemButton */}\n                      <Skeleton.Box className=\"-ml-1 h-8 w-8 rounded-full\" />\n                    </div>\n                  </div>\n                </div>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </StickySidebarLayout>\n  );\n}\n\nexport interface CartEmptyState {\n  title: string;\n  subtitle: string;\n  cta: {\n    label: string;\n    href: string;\n  };\n}\n\nexport function CartEmptyState({ title, subtitle, cta }: CartEmptyState) {\n  return (\n    <SectionLayout className=\"text-center font-(family-name:--cart-font-family,var(--font-family-body))\">\n      <h1 className=\"mb-3 text-center font-(family-name:--cart-title-font-family,var(--font-family-heading)) text-3xl leading-none text-(--cart-title,var(--foreground)) @xl:text-4xl\">\n        {title}\n      </h1>\n      <p className=\"mb-6 text-center leading-normal text-(--cart-subtitle,var(--contrast-500)) @3xl:text-lg\">\n        {subtitle}\n      </p>\n      <ButtonLink href={cta.href}>{cta.label}</ButtonLink>\n    </SectionLayout>\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/sections/cart/index.tsx"
    },
    {
      "path": "vibes/soul/sections/cart/client.tsx",
      "content": "'use client';\n\nimport { getFormProps, getInputProps, SubmissionResult, useForm } from '@conform-to/react';\nimport { parseWithZod } from '@conform-to/zod';\nimport { clsx } from 'clsx';\nimport { ArrowRight, Minus, Plus, Trash2 } from 'lucide-react';\nimport Image from 'next/image';\nimport {\n  ComponentPropsWithoutRef,\n  startTransition,\n  useActionState,\n  useEffect,\n  useOptimistic,\n} from 'react';\nimport { useFormStatus } from 'react-dom';\n\nimport { Button } from '@/vibes/soul/primitives/button';\nimport { toast } from '@/vibes/soul/primitives/toaster';\nimport { StickySidebarLayout } from '@/vibes/soul/sections/sticky-sidebar-layout';\n\nimport { CouponCodeForm, CouponCodeFormState } from './coupon-code-form';\nimport { cartLineItemActionFormDataSchema } from './schema';\n\nimport { CartEmptyState } from '.';\n\ntype Action<State, Payload> = (state: Awaited<State>, payload: Payload) => State | Promise<State>;\n\nexport interface CartLineItem {\n  id: string;\n  image: { alt: string; src: string };\n  title: string;\n  subtitle: string;\n  quantity: number;\n  price: string;\n}\n\nexport interface CartSummaryItem {\n  label: string;\n  value: string;\n}\n\nexport interface CartState<LineItem extends CartLineItem> {\n  lineItems: LineItem[];\n  lastResult: SubmissionResult | null;\n}\n\nexport interface Cart<LineItem extends CartLineItem> {\n  lineItems: LineItem[];\n  summaryItems: CartSummaryItem[];\n  total: string;\n  totalLabel?: string;\n}\n\ninterface CouponCode {\n  action: Action<CouponCodeFormState, FormData>;\n  couponCodes?: string[];\n  ctaLabel?: string;\n  disabled?: boolean;\n  label?: string;\n  placeholder?: string;\n  removeLabel?: string;\n}\n\nexport interface CartProps<LineItem extends CartLineItem> {\n  title?: string;\n  summaryTitle?: string;\n  emptyState?: CartEmptyState;\n  lineItemAction: Action<CartState<LineItem>, FormData>;\n  checkoutAction: Action<SubmissionResult | null, FormData>;\n  checkoutLabel?: string;\n  deleteLineItemLabel?: string;\n  decrementLineItemLabel?: string;\n  incrementLineItemLabel?: string;\n  cart: Cart<LineItem>;\n  couponCode?: CouponCode;\n}\n\nconst defaultEmptyState = {\n  title: 'Your cart is empty',\n  subtitle: 'Add some products to get started.',\n  cta: { label: 'Continue shopping', href: '#' },\n};\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n * :root {\n *   --cart-focus: var(--primary);\n *   --cart-font-family: var(--font-family-body);\n *   --cart-title-font-family: var(--font-family-heading);\n *   --cart-text: var(--foreground);\n *   --cart-subtitle-text: var(--contrast-500);\n *   --cart-subtext-text: var(--contrast-300);\n *   --cart-icon: var(--contrast-300);\n *   --cart-icon-hover: var(--foreground);\n *   --cart-border: var(--contrast-100);\n *   --cart-image-background: var(--contrast-100);\n *   --cart-button-background: var(--contrast-100);\n *   --cart-counter-icon: var(--contrast-300);\n *   --cart-counter-icon-hover: var(--foreground);\n *   --cart-counter-background: var(--background);\n *   --cart-counter-background-hover: color-mix(in oklab, var(--contrast-100) 50%, transparent);\n * }\n * ```\n */\nexport function CartClient<LineItem extends CartLineItem>({\n  title,\n  cart,\n  couponCode,\n  decrementLineItemLabel,\n  incrementLineItemLabel,\n  deleteLineItemLabel,\n  lineItemAction,\n  checkoutAction,\n  checkoutLabel = 'Checkout',\n  emptyState = defaultEmptyState,\n  summaryTitle,\n}: CartProps<LineItem>) {\n  const [state, formAction] = useActionState(lineItemAction, {\n    lineItems: cart.lineItems,\n    lastResult: null,\n  });\n\n  const [form] = useForm({ lastResult: state.lastResult });\n\n  useEffect(() => {\n    if (form.errors) {\n      form.errors.forEach((error) => {\n        toast.error(error);\n      });\n    }\n  }, [form.errors]);\n\n  const [optimisticLineItems, setOptimisticLineItems] = useOptimistic<CartLineItem[], FormData>(\n    state.lineItems,\n    (prevState, formData) => {\n      const submission = parseWithZod(formData, { schema: cartLineItemActionFormDataSchema });\n\n      if (submission.status !== 'success') return prevState;\n\n      switch (submission.value.intent) {\n        case 'increment': {\n          const { id } = submission.value;\n\n          return prevState.map((item) =>\n            item.id === id ? { ...item, quantity: item.quantity + 1 } : item,\n          );\n        }\n\n        case 'decrement': {\n          const { id } = submission.value;\n\n          return prevState.map((item) =>\n            item.id === id ? { ...item, quantity: item.quantity - 1 } : item,\n          );\n        }\n\n        case 'delete': {\n          const { id } = submission.value;\n\n          return prevState.filter((item) => item.id !== id);\n        }\n\n        default:\n          return prevState;\n      }\n    },\n  );\n\n  const optimisticQuantity = optimisticLineItems.reduce((total, item) => total + item.quantity, 0);\n\n  if (optimisticQuantity === 0) {\n    return <CartEmptyState {...emptyState} />;\n  }\n\n  return (\n    <StickySidebarLayout\n      className=\"font-[family-name:var(--cart-font-family,var(--font-family-body))] text-(--cart-text,var(--foreground))\"\n      sidebar={\n        <div>\n          <h2 className=\"mb-10 font-[family-name:var(--cart-title-font-family,var(--font-family-heading))] text-4xl leading-none font-medium @xl:text-5xl\">\n            {summaryTitle}\n          </h2>\n          <dl aria-label=\"Receipt Summary\" className=\"w-full\">\n            <div className=\"divide-y divide-(--cart-border,var(--contrast-100))\">\n              {cart.summaryItems.map((summaryItem, index) => (\n                <div className=\"flex justify-between py-4\" key={index}>\n                  <dt>{summaryItem.label}</dt>\n                  <dd>{summaryItem.value}</dd>\n                </div>\n              ))}\n            </div>\n            {couponCode && (\n              <CouponCodeForm\n                action={couponCode.action}\n                couponCodes={couponCode.couponCodes}\n                ctaLabel={couponCode.ctaLabel}\n                disabled={couponCode.disabled}\n                label={couponCode.label}\n                placeholder={couponCode.placeholder}\n                removeLabel={couponCode.removeLabel}\n              />\n            )}\n            <div className=\"flex justify-between border-t border-(--cart-border,var(--contrast-100)) py-6 text-xl font-bold\">\n              <dt>{cart.totalLabel ?? 'Total'}</dt>\n              <dl>{cart.total}</dl>\n            </div>\n          </dl>\n          <CheckoutButton action={checkoutAction} className=\"mt-4 w-full\">\n            {checkoutLabel}\n            <ArrowRight size={20} strokeWidth={1} />\n          </CheckoutButton>\n        </div>\n      }\n      sidebarPosition=\"after\"\n      sidebarSize=\"1/3\"\n    >\n      <div className=\"w-full\">\n        <h1 className=\"mb-10 font-[family-name:var(--cart-title-font-family,var(--font-family-heading))] text-4xl leading-none font-medium @xl:text-5xl\">\n          {title}\n          <span className=\"ml-4 text-(--cart-subtext-text,var(--contrast-300)) contrast-more:text-(--cart-subtitle-text,var(--contrast-500))\">\n            {optimisticQuantity}\n          </span>\n        </h1>\n        {/* Cart Items */}\n        <ul className=\"flex flex-col gap-5\">\n          {optimisticLineItems.map((lineItem) => (\n            <li\n              className=\"@container flex flex-col items-start gap-x-5 gap-y-4 @sm:flex-row\"\n              key={lineItem.id}\n            >\n              <div className=\"relative aspect-square w-full max-w-24 overflow-hidden rounded-xl bg-(--cart-image-background,var(--contrast-100)) focus-visible:ring-2 focus-visible:ring-(--cart-focus,var(--primary)) focus-visible:ring-offset-4 focus-visible:outline-hidden\">\n                <Image\n                  alt={lineItem.image.alt}\n                  className=\"object-cover\"\n                  fill\n                  sizes=\"(min-width: 28rem) 9rem, (min-width: 24rem) 6rem, 100vw\"\n                  src={lineItem.image.src}\n                />\n              </div>\n              <div className=\"flex grow flex-col flex-wrap justify-between gap-y-2 @xl:flex-row\">\n                <div className=\"flex w-full flex-1 flex-col @xl:w-1/2 @xl:pr-4\">\n                  <span className=\"font-medium\">{lineItem.title}</span>\n                  <span className=\"text-(--cart-subtext-text,var(--contrast-300)) contrast-more:text-(--cart-subtitle-text,var(--contrast-500))\">\n                    {lineItem.subtitle}\n                  </span>\n                </div>\n                <CounterForm\n                  action={formAction}\n                  decrementLabel={decrementLineItemLabel}\n                  deleteLabel={deleteLineItemLabel}\n                  incrementLabel={incrementLineItemLabel}\n                  lineItem={lineItem}\n                  onSubmit={(formData) => {\n                    startTransition(() => {\n                      formAction(formData);\n                      setOptimisticLineItems(formData);\n                    });\n                  }}\n                />\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </StickySidebarLayout>\n  );\n}\n\nfunction CounterForm({\n  lineItem,\n  action,\n  onSubmit,\n  incrementLabel = 'Increase count',\n  decrementLabel = 'Decrease count',\n  deleteLabel = 'Remove item',\n}: {\n  lineItem: CartLineItem;\n  incrementLabel?: string;\n  decrementLabel?: string;\n  deleteLabel?: string;\n  action: (payload: FormData) => void;\n  onSubmit: (formData: FormData) => void;\n}) {\n  const [form, fields] = useForm({\n    defaultValue: { id: lineItem.id },\n    shouldValidate: 'onBlur',\n    shouldRevalidate: 'onInput',\n    onValidate({ formData }) {\n      return parseWithZod(formData, { schema: cartLineItemActionFormDataSchema });\n    },\n    onSubmit(event, { formData }) {\n      event.preventDefault();\n\n      onSubmit(formData);\n    },\n  });\n\n  return (\n    <form {...getFormProps(form)} action={action}>\n      <input {...getInputProps(fields.id, { type: 'hidden' })} key={fields.id.id} />\n      <div className=\"flex w-full flex-wrap items-center gap-x-5 gap-y-2\">\n        <span className=\"font-medium @xl:ml-auto\">{lineItem.price}</span>\n\n        {/* Counter */}\n        <div className=\"flex items-center rounded-lg border border-(--cart-counter-border,var(--contrast-100))\">\n          <button\n            aria-label={decrementLabel}\n            className={clsx(\n              'group rounded-l-lg bg-(--cart-counter-background,var(--background)) p-3 focus-visible:ring-2 focus-visible:ring-(--cart-focus,var(--primary)) focus-visible:outline-hidden disabled:cursor-not-allowed',\n              lineItem.quantity === 1\n                ? 'opacity-50'\n                : 'hover:bg-(--cart-counter-background-hover,color-mix(in_oklab,var(--contrast-100)_50%,transparent))',\n            )}\n            disabled={lineItem.quantity === 1}\n            name=\"intent\"\n            type=\"submit\"\n            value=\"decrement\"\n          >\n            <Minus\n              className={clsx(\n                'text-(--cart-counter-icon,var(--contrast-300)) transition-colors duration-300',\n                lineItem.quantity !== 1 &&\n                  'group-hover:text-(--cart-counter-icon-hover,var(--foreground))',\n              )}\n              size={18}\n              strokeWidth={1.5}\n            />\n          </button>\n          <span className=\"flex w-8 justify-center select-none focus-visible:ring-2 focus-visible:ring-(--cart-focus,var(--primary)) focus-visible:outline-hidden\">\n            {lineItem.quantity}\n          </span>\n          <button\n            aria-label={incrementLabel}\n            className={clsx(\n              'group rounded-r-lg bg-(--cart-counter-background,var(--background)) p-3 transition-colors duration-300 hover:bg-(--cart-counter-background-hover,color-mix(in_oklab,var(--contrast-100)_50%,transparent)) focus-visible:ring-2 focus-visible:ring-(--cart-focus,var(--primary)) focus-visible:outline-hidden disabled:cursor-not-allowed',\n            )}\n            name=\"intent\"\n            type=\"submit\"\n            value=\"increment\"\n          >\n            <Plus\n              className=\"text-(--cart-counter-icon,var(--contrast-300)) transition-colors duration-300 group-hover:text-(--cart-counter-icon-hover,var(--foreground))\"\n              size={18}\n              strokeWidth={1.5}\n            />\n          </button>\n        </div>\n\n        <button\n          aria-label={deleteLabel}\n          className=\"group -ml-1 flex h-8 w-8 shrink-0 items-center justify-center rounded-full transition-colors duration-300 hover:bg-(--cart-button-background,var(--contrast-100)) focus-visible:ring-2 focus-visible:ring-(--cart-focus,var(--primary)) focus-visible:ring-offset-4 focus-visible:outline-hidden\"\n          name=\"intent\"\n          type=\"submit\"\n          value=\"delete\"\n        >\n          <Trash2\n            className=\"text-(--cart-icon,var(--contrast-300)) group-hover:text-(--cart-icon-hover,var(--foreground))\"\n            size={20}\n            strokeWidth={1}\n          />\n        </button>\n      </div>\n    </form>\n  );\n}\n\nfunction CheckoutButton({\n  action,\n  ...props\n}: { action: Action<SubmissionResult | null, FormData> } & ComponentPropsWithoutRef<\n  typeof Button\n>) {\n  const [lastResult, formAction] = useActionState(action, null);\n\n  const [form] = useForm({ lastResult });\n\n  useEffect(() => {\n    if (form.errors) {\n      form.errors.forEach((error) => {\n        toast.error(error);\n      });\n    }\n  }, [form.errors]);\n\n  return (\n    <form action={formAction}>\n      <SubmitButton {...props} />\n    </form>\n  );\n}\n\nfunction SubmitButton(props: ComponentPropsWithoutRef<typeof Button>) {\n  const { pending } = useFormStatus();\n\n  return <Button {...props} disabled={pending} loading={pending} type=\"submit\" />;\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/sections/cart/client.tsx"
    },
    {
      "path": "vibes/soul/sections/cart/schema.ts",
      "content": "import { z } from 'zod';\n\nexport const cartLineItemActionFormDataSchema = z.discriminatedUnion('intent', [\n  z.object({\n    intent: z.literal('increment'),\n    id: z.string(),\n  }),\n  z.object({\n    intent: z.literal('decrement'),\n    id: z.string(),\n  }),\n  z.object({\n    intent: z.literal('delete'),\n    id: z.string(),\n  }),\n]);\n\nexport const couponCodeActionFormDataSchema = ({\n  required_error = 'Please enter a valid promo code',\n}: {\n  required_error?: string;\n}) =>\n  z.discriminatedUnion('intent', [\n    z.object({\n      intent: z.literal('apply'),\n      couponCode: z.string({ required_error }),\n    }),\n    z.object({\n      intent: z.literal('delete'),\n      couponCode: z.string(),\n    }),\n  ]);\n",
      "type": "registry:ui",
      "target": "vibes/soul/sections/cart/schema.ts"
    },
    {
      "path": "vibes/soul/sections/cart/coupon-code-form/index.tsx",
      "content": "'use client';\n\nimport { getFormProps, getInputProps, SubmissionResult, useForm } from '@conform-to/react';\nimport { parseWithZod } from '@conform-to/zod';\nimport { startTransition, useActionState, useOptimistic } from 'react';\nimport { useFormStatus } from 'react-dom';\n\nimport { FieldError } from '@/vibes/soul/form/field-error';\nimport { Input } from '@/vibes/soul/form/input';\nimport { Button } from '@/vibes/soul/primitives/button';\n\nimport { couponCodeActionFormDataSchema } from '../schema';\n\nimport { CouponChip } from './coupon-chip';\n\ntype Action<State, Payload> = (state: Awaited<State>, payload: Payload) => State | Promise<State>;\n\nexport interface CouponCodeFormState {\n  couponCodes: string[];\n  lastResult: SubmissionResult | null;\n}\n\nexport interface CouponCodeFormProps {\n  action: Action<CouponCodeFormState, FormData>;\n  couponCodes?: string[];\n  ctaLabel?: string;\n  disabled?: boolean;\n  label?: string;\n  placeholder?: string;\n  removeLabel?: string;\n  requiredErrorMessage?: string;\n}\n\nexport function CouponCodeForm({\n  action,\n  couponCodes,\n  ctaLabel = 'Apply',\n  disabled = false,\n  label = 'Promo code',\n  placeholder,\n  removeLabel,\n  requiredErrorMessage,\n}: CouponCodeFormProps) {\n  const [state, formAction] = useActionState(action, {\n    couponCodes: couponCodes ?? [],\n    lastResult: null,\n  });\n\n  const [optimisticCouponCodes, setOptimisticCouponCodes] = useOptimistic<string[], FormData>(\n    state.couponCodes,\n    (prevState, formData) => {\n      const submission = parseWithZod(formData, {\n        schema: couponCodeActionFormDataSchema({ required_error: requiredErrorMessage }),\n      });\n\n      if (submission.status !== 'success') return prevState;\n\n      switch (submission.value.intent) {\n        case 'delete': {\n          const couponCode = submission.value.couponCode;\n\n          return prevState.filter((code) => code !== couponCode);\n        }\n\n        default:\n          return prevState;\n      }\n    },\n  );\n\n  const [form, fields] = useForm({\n    defaultValue: {\n      couponCode: '',\n    },\n    lastResult: state.lastResult,\n    shouldValidate: 'onBlur',\n    shouldRevalidate: 'onInput',\n    onValidate({ formData }) {\n      return parseWithZod(formData, {\n        schema: couponCodeActionFormDataSchema({ required_error: requiredErrorMessage }),\n      });\n    },\n    onSubmit(event, { formData }) {\n      event.preventDefault();\n\n      startTransition(() => {\n        formAction(formData);\n        setOptimisticCouponCodes(formData);\n      });\n    },\n  });\n\n  return (\n    <div className=\"space-y-2 border-t border-(--cart-border,var(--contrast-100)) pt-4 pb-5\">\n      <form {...getFormProps(form)} action={formAction} className=\"space-y-2\">\n        <label htmlFor={fields.couponCode.id}>{label}</label>\n        <div className=\"flex gap-1.5\">\n          <Input\n            {...getInputProps(fields.couponCode, {\n              required: true,\n              type: 'text',\n            })}\n            disabled={disabled}\n            errors={fields.couponCode.errors}\n            id={fields.couponCode.id}\n            key={fields.couponCode.id}\n            placeholder={placeholder}\n          />\n          <SubmitButton disabled={disabled}>{ctaLabel}</SubmitButton>\n        </div>\n      </form>\n      {optimisticCouponCodes.length > 0 && (\n        <div className=\"flex flex-wrap gap-1.5\">\n          {optimisticCouponCodes.map((couponCode) => (\n            <CouponChip\n              action={formAction}\n              couponCode={couponCode}\n              key={couponCode}\n              onSubmit={(formData) => {\n                startTransition(() => {\n                  formAction(formData);\n                  setOptimisticCouponCodes(formData);\n                });\n              }}\n              removeLabel={removeLabel}\n            />\n          ))}\n        </div>\n      )}\n      {form.errors?.map((error, index) => <FieldError key={index}>{error}</FieldError>)}\n    </div>\n  );\n}\n\nfunction SubmitButton({ disabled, ...props }: React.ComponentPropsWithoutRef<typeof Button>) {\n  const { pending } = useFormStatus();\n\n  return (\n    <Button\n      {...props}\n      className=\"shrink-0\"\n      disabled={disabled ?? pending}\n      loading={pending}\n      name=\"intent\"\n      size=\"small\"\n      type=\"submit\"\n      value=\"apply\"\n      variant=\"secondary\"\n    />\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/sections/cart/coupon-code-form/index.tsx"
    },
    {
      "path": "vibes/soul/sections/cart/coupon-code-form/coupon-chip.tsx",
      "content": "import { getFormProps, getInputProps, useForm } from '@conform-to/react';\nimport { parseWithZod } from '@conform-to/zod';\n\nimport { Chip } from '@/vibes/soul/primitives/chip';\n\nimport { couponCodeActionFormDataSchema } from '../schema';\n\nexport interface CouponChipProps {\n  action: (payload: FormData) => void;\n  onSubmit: (formData: FormData) => void;\n  couponCode: string;\n  removeLabel?: string;\n}\n\nexport function CouponChip({\n  couponCode,\n  removeLabel = 'Remove promo code',\n  onSubmit,\n  action,\n}: CouponChipProps) {\n  const [form, fields] = useForm({\n    defaultValue: {\n      couponCode,\n    },\n    onValidate({ formData }) {\n      return parseWithZod(formData, {\n        schema: couponCodeActionFormDataSchema({}),\n      });\n    },\n    onSubmit(event, { formData }) {\n      event.preventDefault();\n\n      onSubmit(formData);\n    },\n  });\n\n  return (\n    <form {...getFormProps(form)} action={action}>\n      <input\n        {...getInputProps(fields.couponCode, {\n          type: 'hidden',\n        })}\n        value={couponCode}\n      />\n      <Chip name=\"intent\" removeLabel={removeLabel} value=\"delete\">\n        {couponCode.toUpperCase()}\n      </Chip>\n    </form>\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/sections/cart/coupon-code-form/coupon-chip.tsx"
    }
  ]
}