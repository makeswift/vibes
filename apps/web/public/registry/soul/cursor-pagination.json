{
  "name": "cursor-pagination",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react",
    "nuqs",
    "clsx"
  ],
  "registryDependencies": [
    "streamable",
    "skeleton"
  ],
  "files": [
    {
      "path": "vibes/soul/primitives/cursor-pagination/index.tsx",
      "content": "'use client';\n\nimport { clsx } from 'clsx';\nimport { ArrowLeft, ArrowRight } from 'lucide-react';\nimport Link from 'next/link';\nimport { useSearchParams } from 'next/navigation';\nimport { createSerializer, parseAsString } from 'nuqs';\nimport { ReactNode } from 'react';\n\nimport { Stream, Streamable, useStreamable } from '@/vibes/soul/lib/streamable';\nimport * as Skeleton from '@/vibes/soul/primitives/skeleton';\n\nexport interface CursorPaginationInfo {\n  startCursorParamName?: string;\n  startCursor: string | null;\n  endCursorParamName?: string;\n  endCursor: string | null;\n}\n\nexport interface CursorPaginationProps {\n  label?: Streamable<string>;\n  info: Streamable<CursorPaginationInfo>;\n  previousLabel?: Streamable<string>;\n  nextLabel?: Streamable<string>;\n  scroll?: boolean;\n}\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n * :root {\n *   --cursor-pagination-focus: var(--primary);\n *   --cursor-pagination-border: var(--contrast-100);\n *   --cursor-pagination-border-hover: var(--contrast-200);\n *   --cursor-pagination-icon: var(--foreground);\n *   --cursor-pagination-background: var(--background);\n *   --cursor-pagination-background-hover: var(--contrast-100);\n * }\n * ```\n */\nexport function CursorPagination({\n  label: streamableLabel = 'pagination',\n  info,\n  previousLabel: streamablePreviousLabel = 'Go to previous page',\n  nextLabel: streamableNextLabel = 'Go to next page',\n  scroll = true,\n}: CursorPaginationProps) {\n  const {\n    startCursorParamName = 'before',\n    endCursorParamName = 'after',\n    startCursor,\n    endCursor,\n  } = useStreamable(info);\n  const searchParams = useSearchParams();\n  const serialize = createSerializer({\n    [startCursorParamName]: parseAsString,\n    [endCursorParamName]: parseAsString,\n  });\n\n  return (\n    <Stream\n      fallback={<CursorPaginationSkeleton />}\n      value={Streamable.all([streamableLabel, streamablePreviousLabel, streamableNextLabel])}\n    >\n      {([label, previousLabel, nextLabel]) => {\n        return (\n          <nav\n            aria-label={label}\n            className=\"py-10 text-(--cursor-pagination-icon,var(--foreground))\"\n            role=\"navigation\"\n          >\n            <ul className=\"flex items-center justify-center gap-3\">\n              <li>\n                {startCursor != null ? (\n                  <PaginationLink\n                    aria-label={previousLabel}\n                    href={serialize(searchParams, {\n                      [startCursorParamName]: startCursor,\n                      [endCursorParamName]: null,\n                    })}\n                    scroll={scroll}\n                  >\n                    <ArrowLeft size={24} strokeWidth={1} />\n                  </PaginationLink>\n                ) : (\n                  <Skeleton.Icon\n                    className=\"flex h-12 w-12 cursor-not-allowed items-center justify-center rounded-full border border-(--cursor-pagination-border,var(--contrast-100))\"\n                    icon={<ArrowLeft size={24} strokeWidth={1} />}\n                  />\n                )}\n              </li>\n              <li>\n                {endCursor != null ? (\n                  <PaginationLink\n                    aria-label={nextLabel}\n                    href={serialize(searchParams, {\n                      [endCursorParamName]: endCursor,\n                      [startCursorParamName]: null,\n                    })}\n                    scroll={scroll}\n                  >\n                    <ArrowRight size={24} strokeWidth={1} />\n                  </PaginationLink>\n                ) : (\n                  <Skeleton.Icon\n                    className=\"flex h-12 w-12 cursor-not-allowed items-center justify-center rounded-full border border-(--cursor-pagination-border,var(--contrast-100))\"\n                    icon={<ArrowRight size={24} strokeWidth={1} />}\n                  />\n                )}\n              </li>\n            </ul>\n          </nav>\n        );\n      }}\n    </Stream>\n  );\n}\n\nfunction PaginationLink({\n  href,\n  children,\n  scroll,\n  'aria-label': ariaLabel,\n}: {\n  href: string;\n  children: ReactNode;\n  scroll?: boolean;\n  ['aria-label']?: string;\n}) {\n  return (\n    <Link\n      aria-label={ariaLabel}\n      className={clsx(\n        'flex h-12 w-12 items-center justify-center rounded-full border border-(--cursor-pagination-border,var(--contrast-100)) bg-(--cursor-pagination-background,var(--background)) ring-(--cursor-pagination-focus,var(--primary)) transition-colors duration-300 hover:border-(--cursor-pagination-border-hover,var(--contrast-200)) hover:bg-(--cursor-pagination-background-hover,var(--contrast-100)) focus:outline-hidden focus-visible:ring-2',\n      )}\n      href={href}\n      scroll={scroll}\n    >\n      {children}\n    </Link>\n  );\n}\n\nexport function CursorPaginationSkeleton() {\n  return (\n    <div className=\"py-10 text-(--cursor-pagination-icon,var(--foreground))\">\n      <div className=\"flex items-center justify-center gap-3\">\n        <Skeleton.Icon\n          className=\"flex h-12 w-12 cursor-not-allowed items-center justify-center rounded-full border border-(--cursor-pagination-border,var(--contrast-100))\"\n          icon={<ArrowLeft size={24} strokeWidth={1} />}\n        />\n        <Skeleton.Icon\n          className=\"flex h-12 w-12 cursor-not-allowed items-center justify-center rounded-full border border-(--cursor-pagination-border,var(--contrast-100))\"\n          icon={<ArrowRight size={24} strokeWidth={1} />}\n        />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/primitives/cursor-pagination/index.tsx"
    }
  ]
}