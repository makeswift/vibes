{
  "name": "navigation",
  "type": "registry:ui",
  "dependencies": [
    "@conform-to/react",
    "@radix-ui/react-dropdown-menu",
    "@radix-ui/react-navigation-menu",
    "@radix-ui/react-popover",
    "clsx",
    "lodash.debounce",
    "lucide-react"
  ],
  "registryDependencies": [
    "form-status",
    "streamable",
    "button",
    "logo",
    "price-label",
    "product-card",
    "toaster"
  ],
  "files": [
    {
      "path": "vibes/soul/primitives/navigation/index.tsx",
      "content": "'use client';\n\nimport { SubmissionResult, useForm } from '@conform-to/react';\nimport * as DropdownMenu from '@radix-ui/react-dropdown-menu';\nimport * as NavigationMenu from '@radix-ui/react-navigation-menu';\nimport * as Popover from '@radix-ui/react-popover';\nimport { clsx } from 'clsx';\nimport debounce from 'lodash.debounce';\nimport { ArrowRight, ChevronDown, Search, SearchIcon, ShoppingBag, User } from 'lucide-react';\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\nimport React, {\n  forwardRef,\n  Ref,\n  startTransition,\n  useActionState,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n  useTransition,\n} from 'react';\nimport { useFormStatus } from 'react-dom';\n\nimport { FormStatus } from '@/vibes/soul/form/form-status';\nimport { Stream, Streamable } from '@/vibes/soul/lib/streamable';\nimport { Button } from '@/vibes/soul/primitives/button';\nimport { Logo } from '@/vibes/soul/primitives/logo';\nimport { Price } from '@/vibes/soul/primitives/price-label';\nimport { ProductCard } from '@/vibes/soul/primitives/product-card';\nimport { toast } from '@/vibes/soul/primitives/toaster';\n\ninterface Link {\n  label: string;\n  href: string;\n  groups?: Array<{\n    label?: string;\n    href?: string;\n    links: Array<{\n      label: string;\n      href: string;\n    }>;\n  }>;\n}\n\ninterface Locale {\n  id: string;\n  label: string;\n}\n\ninterface Currency {\n  id: string;\n  label: string;\n}\n\ntype Action<State, Payload> = (\n  state: Awaited<State>,\n  payload: Awaited<Payload>,\n) => State | Promise<State>;\n\nexport type SearchResult =\n  | {\n      type: 'products';\n      title: string;\n      products: Array<{\n        id: string;\n        title: string;\n        href: string;\n        price?: Price;\n        image?: { src: string; alt: string };\n      }>;\n    }\n  | {\n      type: 'links';\n      title: string;\n      links: Array<{ label: string; href: string }>;\n    };\n\ntype LocaleAction = Action<SubmissionResult | null, FormData>;\ntype CurrencyAction = Action<SubmissionResult | null, FormData>;\ntype SearchAction<S extends SearchResult> = Action<\n  {\n    searchResults: S[] | null;\n    lastResult: SubmissionResult | null;\n    emptyStateTitle?: string;\n    emptyStateSubtitle?: string;\n  },\n  FormData\n>;\n\ninterface Props<S extends SearchResult> {\n  className?: string;\n  isFloating?: boolean;\n  accountHref: string;\n  cartCount?: Streamable<number | null>;\n  cartHref: string;\n  links: Streamable<Link[]>;\n  linksPosition?: 'center' | 'left' | 'right';\n  locales?: Locale[];\n  activeLocaleId?: string;\n  localeAction?: LocaleAction;\n  currencies?: Currency[];\n  activeCurrencyId?: Streamable<string | undefined>;\n  currencyAction?: CurrencyAction;\n  logo: Streamable<string | { src: string; alt: string }>;\n  logoWidth?: number;\n  logoHeight?: number;\n  logoHref?: string;\n  logoLabel?: string;\n  mobileLogo?: Streamable<string | { src: string; alt: string }>;\n  mobileLogoWidth?: number;\n  mobileLogoHeight?: number;\n  searchHref: string;\n  searchParamName?: string;\n  searchAction?: SearchAction<S>;\n  searchCtaLabel?: string;\n  searchInputPlaceholder?: string;\n  cartLabel?: string;\n  accountLabel?: string;\n  openSearchPopupLabel?: string;\n  searchLabel?: string;\n  mobileMenuTriggerLabel?: string;\n}\n\nconst MobileMenuButton = forwardRef<\n  React.ComponentRef<'button'>,\n  { open: boolean } & React.ComponentPropsWithoutRef<'button'>\n>(({ open, className, ...rest }, ref) => {\n  return (\n    <button\n      {...rest}\n      className={clsx(\n        'group relative rounded-lg p-2 ring-(--nav-focus,var(--primary)) outline-0 transition-colors focus-visible:ring-2',\n        className,\n      )}\n      ref={ref}\n    >\n      <div className=\"flex h-4 w-4 origin-center transform flex-col justify-between overflow-hidden transition-all duration-300\">\n        <div\n          className={clsx(\n            'h-px origin-left transform bg-(--nav-mobile-button-icon,var(--foreground)) transition-all duration-300',\n            open ? 'translate-x-10' : 'w-7',\n          )}\n        />\n        <div\n          className={clsx(\n            'h-px transform rounded-sm bg-(--nav-mobile-button-icon,var(--foreground)) transition-all delay-75 duration-300',\n            open ? 'translate-x-10' : 'w-7',\n          )}\n        />\n        <div\n          className={clsx(\n            'h-px origin-left transform bg-(--nav-mobile-button-icon,var(--foreground)) transition-all delay-150 duration-300',\n            open ? 'translate-x-10' : 'w-7',\n          )}\n        />\n\n        <div\n          className={clsx(\n            'absolute top-2 flex transform items-center justify-between bg-(--nav-mobile-button-icon,var(--foreground)) transition-all duration-500',\n            open ? 'w-12 translate-x-0' : 'w-0 -translate-x-10',\n          )}\n        >\n          <div\n            className={clsx(\n              'absolute h-px w-4 transform bg-(--nav-mobile-button-icon,var(--foreground)) transition-all delay-300 duration-500',\n              open ? 'rotate-45' : 'rotate-0',\n            )}\n          />\n          <div\n            className={clsx(\n              'absolute h-px w-4 transform bg-(--nav-mobile-button-icon,var(--foreground)) transition-all delay-300 duration-500',\n              open ? '-rotate-45' : 'rotate-0',\n            )}\n          />\n        </div>\n      </div>\n    </button>\n  );\n});\n\nMobileMenuButton.displayName = 'MobileMenuButton';\n\nconst navGroupClassName =\n  'block rounded-lg bg-(--nav-group-background,transparent) px-3 py-2 font-(family-name:--nav-group-font-family,var(--font-family-body)) font-medium text-(--nav-group-text,var(--foreground)) ring-(--nav-focus,var(--primary)) transition-colors hover:bg-(--nav-group-background-hover,var(--contrast-100)) hover:text-(--nav-group-text-hover,var(--foreground)) focus-visible:outline-0 focus-visible:ring-2';\nconst navButtonClassName =\n  'relative rounded-lg bg-(--nav-button-background,transparent) p-1.5 text-(--nav-button-icon,var(--foreground)) ring-(--nav-focus,var(--primary)) transition-colors focus-visible:outline-0 focus-visible:ring-2 @4xl:hover:bg-(--nav-button-background-hover,var(--contrast-100)) @4xl:hover:text-(--nav-button-icon-hover,var(--foreground))';\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n * :root {\n *   --nav-focus: var(--primary);\n *   --nav-background: var(--background);\n *   --nav-floating-border: color-mix(in oklab, var(--foreground) 10%, transparent);\n *   --nav-link-text: var(--foreground);\n *   --nav-link-text-hover: var(--foreground);\n *   --nav-link-background: transparent;\n *   --nav-link-background-hover: var(--contrast-100);\n *   --nav-link-font-family: var(--font-family-body);\n *   --nav-group-text: var(--foreground);\n *   --nav-group-text-hover: var(--foreground);\n *   --nav-group-background: transparent;\n *   --nav-group-background-hover: var(--contrast-100);\n *   --nav-group-font-family: var(--font-family-body);\n *   --nav-sub-link-text: var(--contrast-500);\n *   --nav-sub-link-text-hover: var(--foreground);\n *   --nav-sub-link-background: transparent;\n *   --nav-sub-link-background-hover: var(--contrast-100);\n *   --nav-sub-link-font-family: var(--font-family-body);\n *   --nav-button-icon: var(--foreground);\n *   --nav-button-icon-hover: var(--foreground);\n *   --nav-button-background: var(--background);\n *   --nav-button-background-hover: var(--contrast-100);\n *   --nav-menu-background: var(--background);\n *   --nav-menu-border: color-mix(in oklab, var(--foreground) 5%, transparent);\n *   --nav-mobile-background: var(--background);\n *   --nav-mobile-divider: var(--contrast-100);\n *   --nav-mobile-button-icon: var(--foreground);\n *   --nav-mobile-link-text: var(--foreground);\n *   --nav-mobile-link-text-hover: var(--foreground);\n *   --nav-mobile-link-background: transparent;\n *   --nav-mobile-link-background-hover: var(--contrast-100);\n *   --nav-mobile-link-font-family: var(--font-family-body);\n *   --nav-mobile-sub-link-text: var(--contrast-500);\n *   --nav-mobile-sub-link-text-hover: var(--foreground);\n *   --nav-mobile-sub-link-background: transparent;\n *   --nav-mobile-sub-link-background-hover: var(--contrast-100);\n *   --nav-mobile-sub-link-font-family: var(--font-family-body);\n *   --nav-search-background: var(--background);\n *   --nav-search-border: color-mix(in oklab, var(--foreground) 5%, transparent);\n *   --nav-search-divider: color-mix(in oklab, var(--foreground) 5%, transparent);\n *   --nav-search-icon: var(--contrast-500);\n *   --nav-search-empty-title: var(--foreground);\n *   --nav-search-empty-subtitle: var(--contrast-500);\n *   --nav-search-result-title: var(--foreground);\n *   --nav-search-result-title-font-family: var(--font-family-mono);\n *   --nav-search-result-link-text: var(--foreground);\n *   --nav-search-result-link-text-hover: var(--foreground);\n *   --nav-search-result-link-background: var(--background);\n *   --nav-search-result-link-background-hover: var(--contrast-100);\n *   --nav-search-result-link-font-family: var(--font-family-body);\n *   --nav-cart-count-text: var(--background);\n *   --nav-cart-count-background: var(--foreground);\n *   --nav-locale-background: var(--background);\n *   --nav-locale-link-text: var(--contrast-400);\n *   --nav-locale-link-text-hover: var(--foreground);\n *   --nav-locale-link-text-selected: var(--foreground);\n *   --nav-locale-link-background: transparent;\n *   --nav-locale-link-background-hover: var(--contrast-100);\n *   --nav-locale-link-font-family: var(--font-family-body);\n * }\n * ```\n */\nexport const Navigation = forwardRef(function Navigation<S extends SearchResult>(\n  {\n    className,\n    isFloating = false,\n    cartHref,\n    cartCount: streamableCartCount,\n    accountHref,\n    links: streamableLinks,\n    logo: streamableLogo,\n    logoHref = '/',\n    logoLabel = 'Home',\n    logoWidth = 200,\n    logoHeight = 40,\n    mobileLogo: streamableMobileLogo,\n    mobileLogoWidth = 100,\n    mobileLogoHeight = 40,\n    linksPosition = 'center',\n    activeLocaleId,\n    localeAction,\n    locales,\n    currencies,\n    activeCurrencyId: streamableActiveCurrencyId,\n    currencyAction,\n    searchHref,\n    searchParamName = 'query',\n    searchAction,\n    searchCtaLabel,\n    searchInputPlaceholder,\n    cartLabel = 'Cart',\n    accountLabel = 'Profile',\n    openSearchPopupLabel = 'Open search popup',\n    searchLabel = 'Search',\n    mobileMenuTriggerLabel = 'Toggle navigation',\n  }: Props<S>,\n  ref: Ref<HTMLDivElement>,\n) {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [isSearchOpen, setIsSearchOpen] = useState(false);\n\n  const pathname = usePathname();\n\n  useEffect(() => {\n    setIsMobileMenuOpen(false);\n    setIsSearchOpen(false);\n  }, [pathname]);\n\n  useEffect(() => {\n    function handleScroll() {\n      setIsSearchOpen(false);\n      setIsMobileMenuOpen(false);\n    }\n\n    window.addEventListener('scroll', handleScroll);\n\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  return (\n    <NavigationMenu.Root\n      className={clsx('@container relative mx-auto w-full max-w-screen-2xl', className)}\n      delayDuration={0}\n      onValueChange={() => setIsSearchOpen(false)}\n      ref={ref}\n    >\n      <div\n        className={clsx(\n          'flex min-h-16 items-center justify-between gap-1 bg-(--nav-background,var(--background)) py-2 pr-2 pl-3 transition-shadow @4xl:rounded-2xl @4xl:px-2 @4xl:pr-2.5 @4xl:pl-6',\n          isFloating\n            ? 'shadow-xl ring-1 ring-(--nav-floating-border,color-mix(in_oklab,var(--foreground)_90%,transparent))'\n            : 'shadow-none ring-0',\n        )}\n      >\n        {/* Mobile Menu */}\n        <Popover.Root onOpenChange={setIsMobileMenuOpen} open={isMobileMenuOpen}>\n          <Popover.Anchor className=\"absolute top-full right-0 left-0\" />\n          <Popover.Trigger asChild>\n            <MobileMenuButton\n              aria-label={mobileMenuTriggerLabel}\n              className=\"mr-1 @4xl:hidden\"\n              onClick={() => setIsMobileMenuOpen((prev) => !prev)}\n              open={isMobileMenuOpen}\n            />\n          </Popover.Trigger>\n          <Popover.Portal>\n            <Popover.Content className=\"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 @container max-h-[calc(var(--radix-popover-content-available-height)-8px)] w-[var(--radix-popper-anchor-width)]\">\n              <div className=\"max-h-[inherit] divide-y divide-(--nav-mobile-divider,var(--contrast-100)) overflow-y-auto bg-(--nav-mobile-background,var(--background))\">\n                <Stream\n                  fallback={\n                    <ul className=\"flex animate-pulse flex-col gap-4 p-5 @4xl:gap-2 @4xl:p-5\">\n                      <li>\n                        <span className=\"bg-contrast-100 block h-4 w-10 rounded-md\" />\n                      </li>\n                      <li>\n                        <span className=\"bg-contrast-100 block h-4 w-14 rounded-md\" />\n                      </li>\n                      <li>\n                        <span className=\"bg-contrast-100 block h-4 w-24 rounded-md\" />\n                      </li>\n                      <li>\n                        <span className=\"bg-contrast-100 block h-4 w-16 rounded-md\" />\n                      </li>\n                    </ul>\n                  }\n                  value={streamableLinks}\n                >\n                  {(links) =>\n                    links.map((item, i) => (\n                      <ul className=\"flex flex-col p-2 @4xl:gap-2 @4xl:p-5\" key={i}>\n                        {item.label !== '' && (\n                          <li>\n                            <Link\n                              className=\"block rounded-lg bg-(--nav-mobile-link-background,transparent) px-3 py-2 font-(family-name:--nav-mobile-link-font-family,var(--font-family-body)) font-semibold text-(--nav-mobile-link-text,var(--foreground)) ring-(--nav-focus,var(--primary)) transition-colors hover:bg-(--nav-mobile-link-background-hover,var(--contrast-100)) hover:text-(--nav-mobile-link-text-hover,var(--foreground)) focus-visible:ring-2 focus-visible:outline-0 @4xl:py-4\"\n                              href={item.href}\n                            >\n                              {item.label}\n                            </Link>\n                          </li>\n                        )}\n                        {item.groups\n                          ?.flatMap((group) => group.links)\n                          .map((link, j) => (\n                            <li key={j}>\n                              <Link\n                                className=\"block rounded-lg bg-(--nav-mobile-sub-link-background,transparent) px-3 py-2 font-(family-name:--nav-mobile-sub-link-font-family,var(--font-family-body)) text-sm font-medium text-(--nav-mobile-sub-link-text,var(--contrast-500)) ring-(--nav-focus,var(--primary)) transition-colors hover:bg-(--nav-mobile-sub-link-background-hover,var(--contrast-100)) hover:text-(--nav-mobile-sub-link-text-hover,var(--foreground)) focus-visible:ring-2 focus-visible:outline-0 @4xl:py-4\"\n                                href={link.href}\n                              >\n                                {link.label}\n                              </Link>\n                            </li>\n                          ))}\n                      </ul>\n                    ))\n                  }\n                </Stream>\n              </div>\n            </Popover.Content>\n          </Popover.Portal>\n        </Popover.Root>\n\n        {/* Logo */}\n        <div\n          className={clsx(\n            'flex items-center justify-start self-stretch',\n            linksPosition === 'center' ? 'flex-1' : 'flex-1 @4xl:flex-none',\n          )}\n        >\n          <Logo\n            className={clsx(streamableMobileLogo != null ? 'hidden @4xl:flex' : 'flex')}\n            height={logoHeight}\n            href={logoHref}\n            label={logoLabel}\n            logo={streamableLogo}\n            width={logoWidth}\n          />\n          {streamableMobileLogo != null && (\n            <Logo\n              className=\"flex @4xl:hidden\"\n              height={mobileLogoHeight}\n              href={logoHref}\n              label={logoLabel}\n              logo={streamableMobileLogo}\n              width={mobileLogoWidth}\n            />\n          )}\n        </div>\n\n        {/* Top Level Nav Links */}\n        <ul\n          className={clsx(\n            'hidden gap-1 @4xl:flex @4xl:flex-1',\n            {\n              left: '@4xl:justify-start',\n              center: '@4xl:justify-center',\n              right: '@4xl:justify-end',\n            }[linksPosition],\n          )}\n        >\n          <Stream\n            fallback={\n              <ul className=\"flex animate-pulse flex-row gap-6\">\n                <li>\n                  <span className=\"bg-contrast-100 block h-4 w-16 rounded-md\" />\n                </li>\n                <li>\n                  <span className=\"bg-contrast-100 block h-4 w-12 rounded-md\" />\n                </li>\n                <li>\n                  <span className=\"bg-contrast-100 block h-4 w-24 rounded-md\" />\n                </li>\n                <li>\n                  <span className=\"bg-contrast-100 block h-4 w-16 rounded-md\" />\n                </li>\n              </ul>\n            }\n            value={streamableLinks}\n          >\n            {(links) =>\n              links.map((item, i) => (\n                <NavigationMenu.Item key={i} value={i.toString()}>\n                  <NavigationMenu.Trigger asChild>\n                    <Link\n                      className=\"hidden items-center rounded-xl bg-(--nav-link-background,transparent) p-2.5 font-(family-name:--nav-link-font-family,var(--font-family-body)) text-sm font-medium whitespace-nowrap text-(--nav-link-text,var(--foreground)) ring-(--nav-focus,var(--primary)) transition-colors duration-200 hover:bg-(--nav-link-background-hover,var(--contrast-100)) hover:text-(--nav-link-text-hover,var(--foreground)) focus-visible:ring-2 focus-visible:outline-0 @4xl:inline-flex\"\n                      href={item.href}\n                    >\n                      {item.label}\n                    </Link>\n                  </NavigationMenu.Trigger>\n                  {item.groups != null && item.groups.length > 0 && (\n                    <NavigationMenu.Content className=\"rounded-2xl bg-(--nav-menu-background,var(--background)) shadow-xl ring-1 ring-(--nav-menu-border,color-mix(in_oklab,var(--foreground)_5%,transparent))\">\n                      <div className=\"m-auto grid w-full max-w-screen-lg grid-cols-5 justify-center gap-5 px-5 pt-5 pb-8\">\n                        {item.groups.map((group, columnIndex) => (\n                          <ul className=\"flex flex-col\" key={columnIndex}>\n                            {/* Second Level Links */}\n                            {group.label != null && group.label !== '' && (\n                              <li>\n                                {group.href != null && group.href !== '' ? (\n                                  <Link className={navGroupClassName} href={group.href}>\n                                    {group.label}\n                                  </Link>\n                                ) : (\n                                  <span className={navGroupClassName}>{group.label}</span>\n                                )}\n                              </li>\n                            )}\n\n                            {group.links.map((link, idx) => (\n                              // Third Level Links\n                              <li key={idx}>\n                                <Link\n                                  className=\"block rounded-lg bg-(--nav-sub-link-background,transparent) px-3 py-1.5 font-(family-name:--nav-sub-link-font-family,var(--font-family-body)) text-sm font-medium text-(--nav-sub-link-text,var(--contrast-500)) ring-(--nav-focus,var(--primary)) transition-colors hover:bg-(--nav-sub-link-background-hover,var(--contrast-100)) hover:text-(--nav-sub-link-text-hover,var(--foreground)) focus-visible:ring-2 focus-visible:outline-0\"\n                                  href={link.href}\n                                >\n                                  {link.label}\n                                </Link>\n                              </li>\n                            ))}\n                          </ul>\n                        ))}\n                      </div>\n                    </NavigationMenu.Content>\n                  )}\n                </NavigationMenu.Item>\n              ))\n            }\n          </Stream>\n        </ul>\n\n        {/* Icon Buttons */}\n        <div\n          className={clsx(\n            'flex items-center justify-end gap-0.5 transition-colors duration-300',\n            linksPosition === 'center' ? 'flex-1' : 'flex-1 @4xl:flex-none',\n          )}\n        >\n          {searchAction ? (\n            <Popover.Root onOpenChange={setIsSearchOpen} open={isSearchOpen}>\n              <Popover.Anchor className=\"absolute top-full right-0 left-0\" />\n              <Popover.Trigger asChild>\n                <button\n                  aria-label={openSearchPopupLabel}\n                  className={navButtonClassName}\n                  onPointerEnter={(e) => e.preventDefault()}\n                  onPointerLeave={(e) => e.preventDefault()}\n                  onPointerMove={(e) => e.preventDefault()}\n                >\n                  <Search size={20} strokeWidth={1} />\n                </button>\n              </Popover.Trigger>\n              <Popover.Portal>\n                <Popover.Content className=\"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 @container max-h-[calc(var(--radix-popover-content-available-height)-16px)] w-[var(--radix-popper-anchor-width)] py-2\">\n                  <div className=\"flex max-h-[inherit] flex-col rounded-2xl bg-(--nav-search-background,var(--background)) shadow-xl ring-1 ring-(--nav-search-border,color-mix(in_oklab,var(--foreground)_95%,transparent)) transition-all duration-200 ease-in-out @4xl:inset-x-0\">\n                    <SearchForm\n                      searchAction={searchAction}\n                      searchCtaLabel={searchCtaLabel}\n                      searchHref={searchHref}\n                      searchInputPlaceholder={searchInputPlaceholder}\n                      searchParamName={searchParamName}\n                    />\n                  </div>\n                </Popover.Content>\n              </Popover.Portal>\n            </Popover.Root>\n          ) : (\n            <Link aria-label={searchLabel} className={navButtonClassName} href={searchHref}>\n              <Search size={20} strokeWidth={1} />\n            </Link>\n          )}\n\n          <Link aria-label={accountLabel} className={navButtonClassName} href={accountHref}>\n            <User size={20} strokeWidth={1} />\n          </Link>\n          <Link aria-label={cartLabel} className={navButtonClassName} href={cartHref}>\n            <ShoppingBag size={20} strokeWidth={1} />\n            <Stream\n              fallback={\n                <span className=\"bg-contrast-100 text-background absolute -top-0.5 -right-0.5 flex h-4 w-4 animate-pulse items-center justify-center rounded-full text-xs\" />\n              }\n              value={streamableCartCount}\n            >\n              {(cartCount) =>\n                cartCount != null &&\n                cartCount > 0 && (\n                  <span className=\"absolute -top-0.5 -right-0.5 flex h-4 w-4 items-center justify-center rounded-full bg-(--nav-cart-count-background,var(--foreground)) font-(family-name:--nav-cart-count-font-family,var(--font-family-body)) text-xs text-(--nav-cart-count-text,var(--background))\">\n                    {cartCount}\n                  </span>\n                )\n              }\n            </Stream>\n          </Link>\n\n          {/* Locale / Language Dropdown */}\n          {locales && locales.length > 1 && localeAction ? (\n            <LocaleForm\n              action={localeAction}\n              activeLocaleId={activeLocaleId}\n              // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n              locales={locales as [Locale, Locale, ...Locale[]]}\n            />\n          ) : null}\n\n          {/* Currency Dropdown */}\n          {currencies && currencies.length > 1 && currencyAction ? (\n            <Stream\n              fallback={\n                <CurrencyForm\n                  action={currencyAction}\n                  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                  currencies={currencies as [Currency, ...Currency[]]}\n                />\n              }\n              value={streamableActiveCurrencyId}\n            >\n              {(activeCurrencyId) => (\n                <CurrencyForm\n                  action={currencyAction}\n                  activeCurrencyId={activeCurrencyId}\n                  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                  currencies={currencies as [Currency, ...Currency[]]}\n                />\n              )}\n            </Stream>\n          ) : null}\n        </div>\n      </div>\n\n      <div className=\"absolute top-full right-0 left-0 z-50 flex w-full justify-center perspective-[2000px]\">\n        <NavigationMenu.Viewport className=\"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 relative mt-2 w-full\" />\n      </div>\n    </NavigationMenu.Root>\n  );\n});\n\nNavigation.displayName = 'Navigation';\n\nfunction SearchForm<S extends SearchResult>({\n  searchAction,\n  searchParamName = 'query',\n  searchHref = '/search',\n  searchInputPlaceholder = 'Search Products',\n  searchCtaLabel = 'View more',\n  submitLabel = 'Submit',\n}: {\n  searchAction: SearchAction<S>;\n  searchParamName?: string;\n  searchHref?: string;\n  searchCtaLabel?: string;\n  searchInputPlaceholder?: string;\n  submitLabel?: string;\n}) {\n  const [query, setQuery] = useState('');\n  const [isSearching, startSearching] = useTransition();\n  const [{ searchResults, lastResult, emptyStateTitle, emptyStateSubtitle }, formAction] =\n    useActionState(searchAction, {\n      searchResults: null,\n      lastResult: null,\n    });\n  const [isDebouncing, setIsDebouncing] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const isPending = isSearching || isDebouncing || isSubmitting;\n  const debouncedOnChange = useMemo(() => {\n    const debounced = debounce((q: string) => {\n      setIsDebouncing(false);\n\n      const formData = new FormData();\n\n      formData.append(searchParamName, q);\n\n      startSearching(() => {\n        formAction(formData);\n      });\n    }, 300);\n\n    return (q: string) => {\n      setIsDebouncing(true);\n\n      debounced(q);\n    };\n  }, [formAction, searchParamName]);\n\n  const [form] = useForm({ lastResult });\n\n  const handleSubmit = useCallback(() => {\n    setIsSubmitting(true);\n  }, []);\n\n  return (\n    <>\n      <form\n        action={searchHref}\n        className=\"flex items-center gap-3 px-3 py-3 @4xl:px-5 @4xl:py-4\"\n        onSubmit={handleSubmit}\n      >\n        <SearchIcon\n          className=\"hidden shrink-0 text-(--nav-search-icon,var(--contrast-500)) @xl:block\"\n          size={20}\n          strokeWidth={1}\n        />\n        <input\n          className=\"grow bg-transparent pl-2 text-lg font-medium outline-0 focus-visible:outline-hidden @xl:pl-0\"\n          name={searchParamName}\n          onChange={(e) => {\n            setQuery(e.currentTarget.value);\n            debouncedOnChange(e.currentTarget.value);\n          }}\n          placeholder={searchInputPlaceholder}\n          type=\"text\"\n          value={query}\n        />\n        <SubmitButton loading={isPending} submitLabel={submitLabel} />\n      </form>\n\n      <SearchResults\n        emptySearchSubtitle={emptyStateSubtitle}\n        emptySearchTitle={emptyStateTitle}\n        errors={form.errors}\n        query={query}\n        searchCtaLabel={searchCtaLabel}\n        searchParamName={searchParamName}\n        searchResults={searchResults}\n        stale={isPending}\n      />\n    </>\n  );\n}\n\nfunction SubmitButton({ loading, submitLabel }: { loading: boolean; submitLabel: string }) {\n  const { pending } = useFormStatus();\n\n  return (\n    <Button\n      loading={pending || loading}\n      shape=\"circle\"\n      size=\"small\"\n      type=\"submit\"\n      variant=\"secondary\"\n    >\n      <ArrowRight aria-label={submitLabel} size={20} strokeWidth={1.5} />\n    </Button>\n  );\n}\n\nfunction SearchResults({\n  query,\n  searchResults,\n  stale,\n  emptySearchTitle = `No results were found for '${query}'`,\n  emptySearchSubtitle = 'Please try another search.',\n  errors,\n}: {\n  query: string;\n  searchParamName: string;\n  searchCtaLabel?: string;\n  emptySearchTitle?: string;\n  emptySearchSubtitle?: string;\n  searchResults: SearchResult[] | null;\n  stale: boolean;\n  errors?: string[];\n}) {\n  if (query === '') return null;\n\n  if (errors != null && errors.length > 0) {\n    if (stale) return null;\n\n    return (\n      <div className=\"flex flex-col border-t border-(--nav-search-divider,var(--contrast-100)) p-6\">\n        {errors.map((error) => (\n          <FormStatus key={error} type=\"error\">\n            {error}\n          </FormStatus>\n        ))}\n      </div>\n    );\n  }\n\n  if (searchResults == null || searchResults.length === 0) {\n    if (stale) return null;\n\n    return (\n      <div className=\"flex flex-col border-t border-(--nav-search-divider,var(--contrast-100)) p-6\">\n        <p className=\"text-2xl font-medium text-(--nav-search-empty-title,var(--foreground))\">\n          {emptySearchTitle}\n        </p>\n        <p className=\"text-(--nav-search-empty-subtitle,var(--contrast-500))\">\n          {emptySearchSubtitle}\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={clsx(\n        'flex flex-1 flex-col overflow-y-auto border-t border-(--nav-search-divider,var(--contrast-100)) @2xl:flex-row',\n        stale && 'opacity-50',\n      )}\n    >\n      {searchResults.map((result, index) => {\n        switch (result.type) {\n          case 'links': {\n            return (\n              <section\n                aria-label={result.title}\n                className=\"flex w-full flex-col gap-1 border-b border-(--nav-search-divider,var(--contrast-100)) p-5 @2xl:max-w-80 @2xl:border-r @2xl:border-b-0\"\n                key={`result-${index}`}\n              >\n                <h3 className=\"mb-4 font-(family-name:--nav-search-result-title-font-family,var(--font-family-mono)) text-sm text-(--nav-search-result-title,var(--foreground)) uppercase\">\n                  {result.title}\n                </h3>\n                <ul role=\"listbox\">\n                  {result.links.map((link, i) => (\n                    <li key={i}>\n                      <Link\n                        className=\"block rounded-lg bg-(--nav-search-result-link-background,transparent) px-3 py-4 font-(family-name:--nav-search-result-link-font-family,var(--font-family-body)) font-semibold text-(--nav-search-result-link-text,var(--contrast-500)) ring-(--nav-focus,var(--primary)) transition-colors hover:bg-(--nav-search-result-link-background-hover,var(--contrast-100)) hover:text-(--nav-search-result-link-text-hover,var(--foreground)) focus-visible:ring-2 focus-visible:outline-0\"\n                        href={link.href}\n                      >\n                        {link.label}\n                      </Link>\n                    </li>\n                  ))}\n                </ul>\n              </section>\n            );\n          }\n\n          case 'products': {\n            return (\n              <section\n                aria-label={result.title}\n                className=\"@container flex w-full flex-col gap-5 p-5\"\n                key={`result-${index}`}\n              >\n                <h3 className=\"font-(family-name:--nav-search-result-title-font-family,var(--font-family-mono)) text-sm text-(--nav-search-result-title,var(--foreground)) uppercase\">\n                  {result.title}\n                </h3>\n                <ul\n                  className=\"grid w-full grid-cols-1 gap-5 @xs:grid-cols-2 @md:grid-cols-3 @lg:grid-cols-4\"\n                  role=\"listbox\"\n                >\n                  {result.products.map((product) => (\n                    <li key={product.id}>\n                      <ProductCard\n                        imageSizes=\"(min-width: 42rem) 25vw, 50vw\"\n                        product={{\n                          id: product.id,\n                          title: product.title,\n                          href: product.href,\n                          price: product.price,\n                          image: product.image,\n                        }}\n                      />\n                    </li>\n                  ))}\n                </ul>\n              </section>\n            );\n          }\n\n          default:\n            return null;\n        }\n      })}\n    </div>\n  );\n}\n\nfunction LocaleForm({\n  action,\n  locales,\n  activeLocaleId,\n}: {\n  activeLocaleId?: string;\n  action: LocaleAction;\n  locales: [Locale, ...Locale[]];\n}) {\n  const [lastResult, formAction] = useActionState(action, null);\n  const activeLocale = locales.find((locale) => locale.id === activeLocaleId);\n\n  const [form] = useForm({\n    lastResult,\n  });\n\n  useEffect(() => {\n    if (form.errors) {\n      form.errors.forEach((error) => {\n        toast.error(error);\n      });\n    }\n  }, [form.errors]);\n\n  return (\n    <DropdownMenu.Root>\n      <DropdownMenu.Trigger\n        className={clsx('flex items-center gap-1 text-xs uppercase', navButtonClassName)}\n      >\n        {activeLocale?.id ?? locales[0].id}\n        <ChevronDown size={16} strokeWidth={1.5} />\n      </DropdownMenu.Trigger>\n      <DropdownMenu.Portal>\n        <DropdownMenu.Content\n          align=\"end\"\n          className=\"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 z-50 max-h-80 overflow-y-auto rounded-xl bg-(--nav-locale-background,var(--background)) p-2 shadow-xl @4xl:w-32 @4xl:rounded-2xl @4xl:p-2\"\n          sideOffset={16}\n        >\n          {locales.map(({ id, label }) => (\n            <DropdownMenu.Item\n              className={clsx(\n                'cursor-default rounded-lg bg-(--nav-locale-link-background,transparent) px-2.5 py-2 font-(family-name:--nav-locale-link-font-family,var(--font-family-body)) text-sm font-medium text-(--nav-locale-link-text,var(--contrast-400)) ring-(--nav-focus,var(--primary)) outline-hidden transition-colors hover:bg-(--nav-locale-link-background-hover,var(--contrast-100)) hover:text-(--nav-locale-link-text-hover,var(--foreground))',\n                {\n                  'text-(--nav-locale-link-text-selected,var(--foreground))': id === activeLocaleId,\n                },\n              )}\n              key={id}\n              onSelect={() => {\n                // eslint-disable-next-line @typescript-eslint/require-await\n                startTransition(async () => {\n                  const formData = new FormData();\n\n                  formData.append('id', id);\n                  formAction(formData);\n                });\n              }}\n            >\n              {label}\n            </DropdownMenu.Item>\n          ))}\n        </DropdownMenu.Content>\n      </DropdownMenu.Portal>\n    </DropdownMenu.Root>\n  );\n}\n\nfunction CurrencyForm({\n  action,\n  currencies,\n  activeCurrencyId,\n}: {\n  activeCurrencyId?: string;\n  action: CurrencyAction;\n  currencies: [Currency, ...Currency[]];\n}) {\n  const [lastResult, formAction] = useActionState(action, null);\n  const activeCurrency = currencies.find((currency) => currency.id === activeCurrencyId);\n\n  const [form] = useForm({\n    lastResult,\n  });\n\n  useEffect(() => {\n    if (form.errors) {\n      form.errors.forEach((error) => {\n        toast.error(error);\n      });\n    }\n  }, [form.errors]);\n\n  return (\n    <DropdownMenu.Root>\n      <DropdownMenu.Trigger\n        className={clsx('flex items-center gap-1 text-xs uppercase', navButtonClassName)}\n      >\n        {activeCurrency?.label ?? currencies[0].label}\n        <ChevronDown size={16} strokeWidth={1.5} />\n      </DropdownMenu.Trigger>\n      <DropdownMenu.Portal>\n        <DropdownMenu.Content\n          align=\"end\"\n          className=\"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 z-50 max-h-80 overflow-y-auto rounded-xl bg-(--nav-locale-background,var(--background)) p-2 shadow-xl @4xl:w-32 @4xl:rounded-2xl @4xl:p-2\"\n          sideOffset={16}\n        >\n          {currencies.map((currency) => (\n            <DropdownMenu.Item\n              className={clsx(\n                'cursor-default rounded-lg bg-(--nav-locale-link-background,transparent) px-2.5 py-2 font-(family-name:--nav-locale-link-font-family,var(--font-family-body)) text-sm font-medium text-(--nav-locale-link-text,var(--contrast-400)) ring-(--nav-focus,var(--primary)) outline-hidden transition-colors hover:bg-(--nav-locale-link-background-hover,var(--contrast-100)) hover:text-(--nav-locale-link-text-hover,var(--foreground))',\n                {\n                  'text-(--nav-locale-link-text-selected,var(--foreground))':\n                    currency.id === activeCurrencyId,\n                },\n              )}\n              key={currency.id}\n              onSelect={() => {\n                // eslint-disable-next-line @typescript-eslint/require-await\n                startTransition(async () => {\n                  const formData = new FormData();\n\n                  formData.append('id', currency.id);\n                  formAction(formData);\n                });\n              }}\n            >\n              {currency.label}\n            </DropdownMenu.Item>\n          ))}\n        </DropdownMenu.Content>\n      </DropdownMenu.Portal>\n    </DropdownMenu.Root>\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/primitives/navigation/index.tsx"
    },
    {
      "path": "vibes/soul/primitives/navigation/schema.ts",
      "content": "import { z } from 'zod';\n\nexport const localeSchema = z.object({\n  id: z.string(),\n});\n\nexport const searchSchema = (searchParamName: string) =>\n  z.object({\n    [searchParamName]: z.string(),\n  });\n",
      "type": "registry:ui",
      "target": "vibes/soul/primitives/navigation/schema.ts"
    }
  ]
}