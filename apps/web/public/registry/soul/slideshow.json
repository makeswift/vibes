{
  "name": "slideshow",
  "type": "registry:ui",
  "dependencies": [
    "clsx",
    "embla-carousel",
    "embla-carousel-autoplay",
    "embla-carousel-react",
    "embla-carousel-fade",
    "lucide-react"
  ],
  "registryDependencies": [
    "button-link"
  ],
  "files": [
    {
      "path": "vibes/soul/sections/slideshow/index.tsx",
      "content": "'use client';\n\nimport { clsx } from 'clsx';\nimport { EmblaCarouselType } from 'embla-carousel';\nimport Autoplay from 'embla-carousel-autoplay';\nimport Fade from 'embla-carousel-fade';\nimport useEmblaCarousel from 'embla-carousel-react';\nimport { Pause, Play } from 'lucide-react';\nimport Image from 'next/image';\nimport { ComponentPropsWithoutRef, useCallback, useEffect, useState } from 'react';\n\nimport { ButtonLink } from '@/vibes/soul/primitives/button-link';\n\ntype ButtonLinkProps = ComponentPropsWithoutRef<typeof ButtonLink>;\n\ninterface Slide {\n  title: string;\n  description?: string;\n  showDescription?: boolean;\n  image?: { alt: string; blurDataUrl?: string; src: string };\n  cta?: {\n    label: string;\n    href: string;\n    variant?: ButtonLinkProps['variant'];\n    size?: ButtonLinkProps['size'];\n    shape?: ButtonLinkProps['shape'];\n  };\n  showCta?: boolean;\n}\n\nexport interface SlideshowProps {\n  slides: Slide[];\n  playOnInit?: boolean;\n  interval?: number;\n  className?: string;\n}\n\ninterface UseProgressButtonType {\n  selectedIndex: number;\n  scrollSnaps: number[];\n  onProgressButtonClick: (index: number) => void;\n}\n\nconst useProgressButton = (\n  emblaApi: EmblaCarouselType | undefined,\n  onButtonClick?: (emblaApi: EmblaCarouselType) => void,\n): UseProgressButtonType => {\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [scrollSnaps, setScrollSnaps] = useState<number[]>([]);\n\n  const onProgressButtonClick = useCallback(\n    (index: number) => {\n      if (!emblaApi) return;\n      emblaApi.scrollTo(index);\n      if (onButtonClick) onButtonClick(emblaApi);\n    },\n    [emblaApi, onButtonClick],\n  );\n\n  const onInit = useCallback((emblaAPI: EmblaCarouselType) => {\n    setScrollSnaps(emblaAPI.scrollSnapList());\n  }, []);\n\n  const onSelect = useCallback((emblaAPI: EmblaCarouselType) => {\n    setSelectedIndex(emblaAPI.selectedScrollSnap());\n  }, []);\n\n  useEffect(() => {\n    if (!emblaApi) return;\n\n    onInit(emblaApi);\n    onSelect(emblaApi);\n\n    emblaApi.on('reInit', onInit).on('reInit', onSelect).on('select', onSelect);\n  }, [emblaApi, onInit, onSelect]);\n\n  return {\n    selectedIndex,\n    scrollSnaps,\n    onProgressButtonClick,\n  };\n};\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n * :root {\n *   --slideshow-focus: var(--primary);\n *   --slideshow-mask: color-mix(in oklab, var(--foreground) 80%, transparent);\n *   --slideshow-background: var(--primary-shadow);\n *   --slideshow-title: var(--background);\n *   --slideshow-title-font-family: var(--font-family-heading);\n *   --slideshow-description: color-mix(in oklab, var(--background) 80%, transparent);\n *   --slideshow-description-font-family: var(--font-family-body);\n *   --slideshow-pagination: var(--background);\n *   --slideshow-play-border: color-mix(in oklab, var(--contrast-300) 50%, transparent);\n *   --slideshow-play-border-hover: color-mix(in oklab, var(--contrast-300) 80%, transparent);\n *   --slideshow-play-text: var(--background);\n *   --slideshow-number: var(--background);\n *   --slideshow-number-font-family: var(--font-family-mono);\n * }\n * ```\n */\nexport function Slideshow({\n  slides,\n  playOnInit = true,\n  interval = 5000,\n  className,\n}: SlideshowProps) {\n  const [emblaRef, emblaApi] = useEmblaCarousel({ loop: true, duration: 20 }, [\n    Autoplay({ delay: interval, playOnInit }),\n    Fade(),\n  ]);\n  const { selectedIndex, scrollSnaps, onProgressButtonClick } = useProgressButton(emblaApi);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [playCount, setPlayCount] = useState(0);\n\n  const toggleAutoplay = useCallback(() => {\n    const autoplay = emblaApi?.plugins().autoplay;\n\n    if (!autoplay) return;\n\n    const playOrStop = autoplay.isPlaying() ? autoplay.stop : autoplay.play;\n    playOrStop();\n  }, [emblaApi]);\n\n  const resetAutoplay = useCallback(() => {\n    const autoplay = emblaApi?.plugins().autoplay;\n    if (!autoplay) return;\n\n    autoplay.reset();\n  }, [emblaApi]);\n\n  useEffect(() => {\n    const autoplay = emblaApi?.plugins().autoplay;\n    if (!autoplay) return;\n\n    setIsPlaying(autoplay.isPlaying());\n    emblaApi\n      .on('autoplay:play', () => {\n        setIsPlaying(true);\n        setPlayCount(playCount + 1);\n      })\n      .on('autoplay:stop', () => {\n        setIsPlaying(false);\n      })\n      .on('reInit', () => {\n        setIsPlaying(autoplay.isPlaying());\n      });\n  }, [emblaApi, playCount]);\n\n  return (\n    <section\n      className={clsx(\n        '@container relative h-[80vh] bg-(--slideshow-background,var(--primary-shadow))',\n        className,\n      )}\n    >\n      <div className=\"h-full overflow-hidden\" ref={emblaRef}>\n        <div className=\"flex h-full\">\n          {slides.map(\n            ({ title, description, showDescription = true, image, cta, showCta = true }, idx) => {\n              return (\n                <div\n                  className=\"relative h-full w-full min-w-0 shrink-0 grow-0 basis-full\"\n                  key={idx}\n                >\n                  <div className=\"absolute inset-x-0 bottom-0 z-10 bg-gradient-to-t from-(--slideshow-mask,color-mix(in_oklab,var(--foreground)_80%,transparent)) to-transparent\">\n                    <div className=\"mx-auto w-full max-w-screen-2xl px-4 pt-12 pb-16 text-balance @xl:px-6 @xl:pt-16 @xl:pb-20 @4xl:px-8 @4xl:pt-20\">\n                      <h1 className=\"m-0 max-w-xl font-(family-name:--slideshow-title-font-family,var(--font-family-heading)) text-4xl leading-none font-medium text-(--slideshow-title,var(--background)) @2xl:text-5xl @2xl:leading-[.9] @4xl:text-6xl\">\n                        {title}\n                      </h1>\n                      {showDescription && (\n                        <p className=\"mt-2 max-w-xl font-(family-name:--slideshow-description-font-family,var(--font-family-body)) text-base leading-normal text-(--slideshow-description,color-mix(in_oklab,var(--background)_80%,transparent)) @xl:mt-3 @xl:text-lg\">\n                          {description}\n                        </p>\n                      )}\n                      {showCta && (\n                        <ButtonLink\n                          className=\"mt-6 @xl:mt-8\"\n                          href={cta?.href ?? '#'}\n                          shape={cta?.shape ?? 'pill'}\n                          size={cta?.size ?? 'large'}\n                          variant={cta?.variant ?? 'tertiary'}\n                        >\n                          {cta?.label ?? 'Learn more'}\n                        </ButtonLink>\n                      )}\n                    </div>\n                  </div>\n\n                  {image?.src != null && image.src !== '' && (\n                    <Image\n                      alt={image.alt}\n                      blurDataURL={image.blurDataUrl}\n                      className=\"block h-20 w-full object-cover\"\n                      fill\n                      placeholder={\n                        image.blurDataUrl != null && image.blurDataUrl !== '' ? 'blur' : 'empty'\n                      }\n                      priority={idx === 0}\n                      sizes=\"100vw\"\n                      src={image.src}\n                    />\n                  )}\n                </div>\n              );\n            },\n          )}\n        </div>\n      </div>\n\n      {/* Controls */}\n      <div className=\"absolute bottom-4 left-1/2 flex w-full max-w-screen-2xl -translate-x-1/2 flex-wrap items-center px-4 @xl:bottom-6 @xl:px-6 @4xl:px-8\">\n        {/* Progress Buttons */}\n        {scrollSnaps.map((_: number, index: number) => {\n          return (\n            <button\n              aria-label={`View image number ${index + 1}`}\n              className=\"rounded-lg px-1.5 py-2 focus-visible:ring-2 focus-visible:ring-(--slideshow-focus,var(--primary)) focus-visible:outline-0\"\n              key={index}\n              onClick={() => {\n                onProgressButtonClick(index);\n                resetAutoplay();\n              }}\n            >\n              <div className=\"relative overflow-hidden\">\n                {/* White Bar - Current Index Indicator / Progress Bar */}\n                <div\n                  className={clsx(\n                    'absolute h-0.5 bg-(--slideshow-pagination,var(--background))',\n                    'fill-mode-forwards opacity-0',\n                    isPlaying ? 'running' : 'paused',\n                    index === selectedIndex\n                      ? 'animate-in slide-in-from-left opacity-100 ease-linear'\n                      : 'animate-out fade-out ease-out',\n                  )}\n                  key={`progress-${playCount}`}\n                  style={{\n                    animationDuration: index === selectedIndex ? `${interval}ms` : '200ms',\n                    width: `${150 / slides.length}px`,\n                  }}\n                />\n                {/* Grey Bar BG */}\n                <div\n                  className=\"h-0.5 bg-(--slideshow-pagination,var(--background)) opacity-30\"\n                  style={{ width: `${150 / slides.length}px` }}\n                />\n              </div>\n            </button>\n          );\n        })}\n\n        {/* Carousel Count - \"01/03\" */}\n        <span className=\"mt-px mr-3 ml-auto font-(family-name:--slideshow-number-font-family,var(--font-family-mono)) text-sm text-(--slideshow-number,var(--background))\">\n          {selectedIndex + 1 < 10 ? `0${selectedIndex + 1}` : selectedIndex + 1}/\n          {slides.length < 10 ? `0${slides.length}` : slides.length}\n        </span>\n\n        {/* Stop / Start Button */}\n        <button\n          aria-label={isPlaying ? 'Pause' : 'Play'}\n          className=\"flex h-7 w-7 items-center justify-center rounded-lg border border-(--slideshow-play-border,color-mix(in_oklab,var(--contrast-300)_50%,transparent)) text-(--slideshow-play-text,var(--background)) ring-(--slideshow-focus) transition-opacity duration-300 hover:border-(--slideshow-play-border-hover,color-mix(in_oklab,var(--contrast-300)_80%,transparent)) focus-visible:ring-2 focus-visible:outline-0\"\n          onClick={toggleAutoplay}\n          type=\"button\"\n        >\n          {isPlaying ? (\n            <Pause className=\"pointer-events-none\" size={16} strokeWidth={1.5} />\n          ) : (\n            <Play className=\"pointer-events-none\" size={16} strokeWidth={1.5} />\n          )}\n        </button>\n      </div>\n    </section>\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/sections/slideshow/index.tsx"
    }
  ]
}