{
  "name": "product-card",
  "type": "registry:ui",
  "dependencies": [
    "clsx",
    "nuqs"
  ],
  "registryDependencies": [
    "badge",
    "price-label",
    "skeleton",
    "checkbox",
    "compare-drawer"
  ],
  "files": [
    {
      "path": "vibes/soul/primitives/product-card/index.tsx",
      "content": "import { clsx } from 'clsx';\nimport Image from 'next/image';\nimport Link from 'next/link';\n\nimport { Badge } from '@/vibes/soul/primitives/badge';\nimport { Price, PriceLabel } from '@/vibes/soul/primitives/price-label';\nimport * as Skeleton from '@/vibes/soul/primitives/skeleton';\n\nimport { Compare } from './compare';\n\nexport interface Product {\n  id: string;\n  title: string;\n  href: string;\n  image?: { src: string; alt: string };\n  price?: Price;\n  subtitle?: string;\n  badge?: string;\n  rating?: number;\n}\n\nexport interface ProductCardProps {\n  className?: string;\n  colorScheme?: 'light' | 'dark';\n  aspectRatio?: '5:6' | '3:4' | '1:1';\n  showCompare?: boolean;\n  imagePriority?: boolean;\n  imageSizes?: string;\n  compareLabel?: string;\n  compareParamName?: string;\n  product: Product;\n}\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n * :root {\n *   --product-card-focus: var(--primary);\n *   --product-card-light-offset: var(--background);\n *   --product-card-light-background: var(--contrast-100);\n *   --product-card-light-title: var(--foreground);\n *   --product-card-light-subtitle: color-mix(in oklab, var(--foreground) 75%, transparent);\n *   --product-card-dark-offset: var(--foreground);\n *   --product-card-dark-background: var(--contrast-500);\n *   --product-card-dark-title: var(--background);\n *   --product-card-dark-subtitle: color-mix(in oklab, var(--background) 75%, transparent);\n *   --product-card-font-family: var(--font-family-body);\n *   --product-card-border-radius: 1rem;\n * }\n * ```\n */\nexport function ProductCard({\n  product: { id, title, subtitle, badge, price, image, href },\n  colorScheme = 'light',\n  className,\n  showCompare = false,\n  aspectRatio = '5:6',\n  compareLabel,\n  compareParamName,\n  imagePriority = false,\n  imageSizes = '(min-width: 80rem) 20vw, (min-width: 64rem) 25vw, (min-width: 42rem) 33vw, (min-width: 24rem) 50vw, 100vw',\n}: ProductCardProps) {\n  return (\n    <article\n      className={clsx(\n        'group @container w-full max-w-md font-(family-name:--product-card-font-family,var(--font-family-body))',\n        className,\n      )}\n    >\n      <div>\n        <div className=\"relative\">\n          <div\n            className={clsx(\n              'relative overflow-hidden rounded-(--product-card-border-radius,1rem)',\n              {\n                '5:6': 'aspect-[5/6]',\n                '3:4': 'aspect-[3/4]',\n                '1:1': 'aspect-square',\n              }[aspectRatio],\n              {\n                light: 'bg-(--product-card-light-background,var(--contrast-100))',\n                dark: 'bg-(--product-card-dark-background,var(--contrast-500))',\n              }[colorScheme],\n            )}\n          >\n            {image != null ? (\n              <Image\n                alt={image.alt}\n                className={clsx(\n                  'w-full scale-100 object-cover transition-transform duration-500 ease-out select-none group-hover:scale-110',\n                  {\n                    light: 'bg-(--product-card-light-background,var(--contrast-100))',\n                    dark: 'bg-(--product-card-dark-background,var(--contrast-500))',\n                  }[colorScheme],\n                )}\n                fill\n                priority={imagePriority}\n                sizes={imageSizes}\n                src={image.src}\n              />\n            ) : (\n              <div\n                className={clsx(\n                  'pt-5 pl-5 text-4xl leading-[0.8] font-bold tracking-tighter break-words opacity-25 transition-transform duration-500 ease-out group-hover:scale-105 @xs:text-7xl',\n                  {\n                    light: 'text-(--product-card-light-title,var(--foreground))',\n                    dark: 'text-(--product-card-dark-title,var(--background))',\n                  }[colorScheme],\n                )}\n              >\n                {title}\n              </div>\n            )}\n            {badge != null && badge !== '' && (\n              <Badge className=\"absolute top-3 left-3\" shape=\"rounded\">\n                {badge}\n              </Badge>\n            )}\n          </div>\n          <Link\n            aria-label={title}\n            className={clsx(\n              'absolute inset-0 rounded-(--product-card-border-radius,1rem) focus:outline-hidden focus-visible:ring-2 focus-visible:ring-(--product-card-focus,var(--primary)) focus-visible:ring-offset-4',\n              {\n                light: 'ring-offset-(--product-card-light-offset,var(--background))',\n                dark: 'ring-offset-(--product-card-dark-offset,var(--foreground))',\n              }[colorScheme],\n            )}\n            href={href}\n            id={id}\n          >\n            <span className=\"sr-only\">View product</span>\n          </Link>\n        </div>\n        <div className=\"mt-2 flex flex-col items-start gap-x-4 gap-y-3 px-1 @xs:mt-3 @xs:flex-row\">\n          <div className=\"relative flex-1 text-sm @[16rem]:text-base\">\n            <h3\n              className={clsx(\n                'block font-semibold',\n                {\n                  light: 'text-(--product-card-light-title,var(--foreground))',\n                  dark: 'text-(--product-card-dark-title,var(--background))',\n                }[colorScheme],\n              )}\n            >\n              {title}\n            </h3>\n\n            {subtitle != null && subtitle !== '' && (\n              <span\n                className={clsx(\n                  'block text-sm font-normal',\n                  {\n                    light:\n                      'text-(--product-card-light-subtitle,color-mix(in_oklab,var(--foreground)_75%,transparent))',\n                    dark: 'text-(--product-card-dark-subtitle,color-mix(in_oklab,var(--background)_75%,transparent))',\n                  }[colorScheme],\n                )}\n              >\n                {subtitle}\n              </span>\n            )}\n            {price != null && (\n              <PriceLabel className=\"mt-2\" colorScheme={colorScheme} price={price} />\n            )}\n            <Link\n              aria-label={title}\n              className={clsx(\n                'absolute inset-0 rounded-sm focus:outline-hidden focus-visible:ring-2 focus-visible:ring-(--product-card-focus,var(--primary)) focus-visible:ring-offset-4',\n                {\n                  light: 'ring-offset-(--product-card-light-offset,var(--background))',\n                  dark: 'ring-offset-(--product-card-dark-offset,var(--foreground))',\n                }[colorScheme],\n              )}\n              href={href}\n              id={id}\n              tabIndex={-1}\n            >\n              <span className=\"sr-only\">View product</span>\n            </Link>\n          </div>\n          {showCompare && (\n            <div className=\"shrink-0\">\n              <Compare\n                colorScheme={colorScheme}\n                label={compareLabel}\n                paramName={compareParamName}\n                product={{ id, title, href, image }}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    </article>\n  );\n}\n\nexport function ProductCardSkeleton({\n  className,\n  aspectRatio = '5:6',\n}: Pick<ProductCardProps, 'className' | 'aspectRatio'>) {\n  return (\n    <Skeleton.Root className={clsx(className)}>\n      <Skeleton.Box\n        className={clsx(\n          'rounded-(--product-card-border-radius,1rem)',\n          {\n            '5:6': 'aspect-[5/6]',\n            '3:4': 'aspect-[3/4]',\n            '1:1': 'aspect-square',\n          }[aspectRatio],\n        )}\n      />\n      <div className=\"mt-2 flex flex-col items-start gap-x-4 gap-y-3 px-1 @xs:mt-3 @xs:flex-row\">\n        <div className=\"flex-1 text-sm @[16rem]:text-base\">\n          <Skeleton.Text characterCount={10} className=\"rounded\" />\n          <Skeleton.Text characterCount={8} className=\"rounded\" />\n          <Skeleton.Text characterCount={6} className=\"rounded\" />\n        </div>\n      </div>\n    </Skeleton.Root>\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/primitives/product-card/index.tsx"
    },
    {
      "path": "vibes/soul/primitives/product-card/compare.tsx",
      "content": "'use client';\n\nimport { useQueryState } from 'nuqs';\nimport { startTransition } from 'react';\n\nimport { Checkbox } from '@/vibes/soul/form/checkbox';\nimport { useCompareDrawer } from '@/vibes/soul/primitives/compare-drawer';\nimport { compareParser } from '@/vibes/soul/primitives/compare-drawer/loader';\n\nexport interface CompareDrawerItem {\n  id: string;\n  image?: { src: string; alt: string };\n  href: string;\n  title: string;\n}\n\nexport interface CompareProps {\n  colorScheme?: 'light' | 'dark';\n  paramName?: string;\n  label?: string;\n  product: CompareDrawerItem;\n}\n\nexport function Compare({\n  colorScheme = 'light',\n  paramName = 'compare',\n  label = 'Compare',\n  product,\n}: CompareProps) {\n  const [, setParam] = useQueryState(paramName, compareParser);\n\n  const { optimisticItems, setOptimisticItems, maxItems } = useCompareDrawer();\n\n  return (\n    <Checkbox\n      checked={!!optimisticItems.find((item) => item.id === product.id)}\n      colorScheme={colorScheme}\n      disabled={\n        !optimisticItems.find((item) => item.id === product.id) &&\n        maxItems !== undefined &&\n        optimisticItems.length >= maxItems\n      }\n      label={label}\n      onCheckedChange={(value) => {\n        startTransition(async () => {\n          setOptimisticItems({\n            type: value === true ? 'add' : 'remove',\n            item: product,\n          });\n\n          await setParam((prev) => {\n            const next =\n              value === true\n                ? [...(prev ?? []), product.id]\n                : (prev ?? []).filter((v) => v !== product.id);\n\n            return next.length > 0 ? next : null;\n          });\n        });\n      }}\n    />\n  );\n}\n",
      "type": "registry:ui",
      "target": "vibes/soul/primitives/product-card/compare.tsx"
    }
  ]
}