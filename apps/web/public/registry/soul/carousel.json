{
  "name": "carousel",
  "type": "registry:ui",
  "dependencies": [
    "embla-carousel-react",
    "lucide-react",
    "clsx"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "vibes/soul/primitives/carousel/index.tsx",
      "content": "'use client';\n\nimport { clsx } from 'clsx';\nimport useEmblaCarousel, { type UseEmblaCarouselType } from 'embla-carousel-react';\nimport { ArrowLeft, ArrowRight } from 'lucide-react';\nimport {\n  ComponentPropsWithoutRef,\n  createContext,\n  KeyboardEvent,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\n\ntype CarouselApi = UseEmblaCarouselType[1];\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>;\ntype CarouselOptions = UseCarouselParameters[0];\ntype CarouselPlugin = UseCarouselParameters[1];\n\nexport interface CarouselProps extends ComponentPropsWithoutRef<'div'> {\n  opts?: CarouselOptions;\n  plugins?: CarouselPlugin;\n  setApi?: (api: CarouselApi) => void;\n  carouselScrollbarLabel?: string;\n  hideOverflow?: boolean;\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0];\n  api: ReturnType<typeof useEmblaCarousel>[1];\n  scrollPrev: () => void;\n  scrollNext: () => void;\n  canScrollPrev: boolean;\n  canScrollNext: boolean;\n} & CarouselProps;\n\nconst CarouselContext = createContext<CarouselContextProps | null>(null);\n\nfunction useCarousel() {\n  const context = useContext(CarouselContext);\n\n  if (!context) {\n    throw new Error('useCarousel must be used within a <Carousel />');\n  }\n\n  return context;\n}\n\nfunction Carousel({\n  opts,\n  setApi,\n  plugins,\n  className,\n  children,\n  hideOverflow = true,\n  ...props\n}: CarouselProps) {\n  const [carouselRef, api] = useEmblaCarousel(opts, plugins);\n  const [canScrollPrev, setCanScrollPrev] = useState(false);\n  const [canScrollNext, setCanScrollNext] = useState(false);\n\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  const onSelect = useCallback((api: CarouselApi) => {\n    if (!api) return;\n\n    setCanScrollPrev(api.canScrollPrev());\n    setCanScrollNext(api.canScrollNext());\n  }, []);\n\n  const scrollPrev = useCallback(() => api?.scrollPrev(), [api]);\n\n  const scrollNext = useCallback(() => api?.scrollNext(), [api]);\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (event.key === 'ArrowLeft') {\n        event.preventDefault();\n        scrollPrev();\n      } else if (event.key === 'ArrowRight') {\n        event.preventDefault();\n        scrollNext();\n      }\n    },\n    [scrollPrev, scrollNext],\n  );\n\n  useEffect(() => {\n    if (!api || !setApi) return;\n\n    setApi(api);\n  }, [api, setApi]);\n\n  useEffect(() => {\n    if (!api) return;\n\n    onSelect(api);\n    api.on('reInit', onSelect);\n    api.on('select', onSelect);\n\n    return () => {\n      api.off('select', onSelect);\n    };\n  }, [api, onSelect]);\n\n  return (\n    <CarouselContext.Provider\n      value={{\n        carouselRef,\n        api,\n        opts,\n        scrollPrev,\n        scrollNext,\n        canScrollPrev,\n        canScrollNext,\n      }}\n    >\n      <div\n        {...props}\n        aria-roledescription=\"carousel\"\n        className={clsx('@container relative p-1.5', hideOverflow && 'overflow-hidden', className)}\n        onKeyDownCapture={handleKeyDown}\n        role=\"region\"\n      >\n        {children}\n      </div>\n    </CarouselContext.Provider>\n  );\n}\n\nfunction CarouselContent({ className, ...props }: ComponentPropsWithoutRef<'div'>) {\n  const { carouselRef } = useCarousel();\n\n  return (\n    <div className=\"w-full\" ref={carouselRef}>\n      <div {...props} className={clsx('-ml-4 flex @2xl:-ml-5', className)} />\n    </div>\n  );\n}\n\nfunction CarouselItem({ className, ...props }: ComponentPropsWithoutRef<'div'>) {\n  return (\n    <div\n      {...props}\n      aria-roledescription=\"slide\"\n      className={clsx('min-w-0 shrink-0 grow-0 pl-4 @2xl:pl-5', className)}\n      role=\"group\"\n    />\n  );\n}\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n * :root {\n    --carousel-focus: var(--primary);\n    --carousel-light-button: var(--foreground);\n    --carousel-dark-button: var(--background);\n * }\n * ```\n */\nfunction CarouselButtons({\n  className,\n  colorScheme = 'light',\n  previousLabel = 'Previous',\n  nextLabel = 'Next',\n  ...props\n}: ComponentPropsWithoutRef<'div'> & {\n  colorScheme?: 'light' | 'dark';\n  previousLabel?: string;\n  nextLabel?: string;\n}) {\n  const { scrollPrev, scrollNext, canScrollPrev, canScrollNext } = useCarousel();\n\n  return (\n    <div\n      {...props}\n      className={clsx(\n        'flex gap-2',\n        {\n          light: 'text-(--carousel-light-button,var(--foreground))',\n          dark: 'text-(--carousel-dark-button,var(--background))',\n        }[colorScheme],\n        className,\n      )}\n    >\n      <button\n        className=\"rounded-lg ring-(--carousel-focus,var(--primary)) transition-colors duration-300 focus-visible:ring-2 focus-visible:outline-0 disabled:pointer-events-none disabled:opacity-25\"\n        disabled={!canScrollPrev}\n        onClick={scrollPrev}\n        title={previousLabel}\n      >\n        <ArrowLeft className=\"h-6 w-6\" strokeWidth={1.5} />\n      </button>\n      <button\n        className=\"rounded-lg ring-(--carousel-focus,var(--primary)) transition-colors duration-300 focus-visible:ring-2 focus-visible:outline-0 disabled:pointer-events-none disabled:opacity-25\"\n        disabled={!canScrollNext}\n        onClick={scrollNext}\n        title={nextLabel}\n      >\n        <ArrowRight className=\"h-6 w-6\" strokeWidth={1.5} />\n      </button>\n    </div>\n  );\n}\n\n/**\n * This component supports various CSS variables for theming. Here's a comprehensive list, along\n * with their default values:\n *\n * ```css\n * :root {\n    --carousel-light-scrollbar: var(--foreground);\n    --carousel-dark-scrollbar: var(--background);\n * }\n * ```\n */\nfunction CarouselScrollbar({\n  className,\n  colorScheme = 'light',\n  label = 'Carousel scrollbar',\n}: ComponentPropsWithoutRef<'div'> & { label?: string; colorScheme?: 'light' | 'dark' }) {\n  const { api, canScrollPrev, canScrollNext } = useCarousel();\n  const [progress, setProgress] = useState(0);\n  const [scrollbarPosition, setScrollbarPosition] = useState({ width: 0, left: 0 });\n\n  const findClosestSnap = useCallback(\n    (nextProgress: number) => {\n      if (!api) return 0;\n\n      const point = nextProgress / 100;\n      const snapList = api.scrollSnapList();\n\n      if (snapList.length === 0) return -1;\n\n      const closestSnap = snapList.reduce((prev, curr) =>\n        Math.abs(curr - point) < Math.abs(prev - point) ? curr : prev,\n      );\n\n      return snapList.findIndex((snap) => snap === closestSnap);\n    },\n    [api],\n  );\n\n  useEffect(() => {\n    if (!api) return;\n\n    const snapList = api.scrollSnapList();\n    const closestSnapIndex = findClosestSnap(progress);\n    const scrollbarWidth = 100 / snapList.length;\n    const scrollbarLeft = (closestSnapIndex / snapList.length) * 100;\n\n    setScrollbarPosition({ width: scrollbarWidth, left: scrollbarLeft });\n\n    api.scrollTo(closestSnapIndex);\n  }, [progress, api, findClosestSnap]);\n\n  useEffect(() => {\n    if (!api) return;\n\n    function onScroll() {\n      if (!api) return;\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      setProgress(api.scrollSnapList()[api.selectedScrollSnap()]! * 100);\n    }\n\n    api.on('select', onScroll);\n    api.on('scroll', onScroll);\n    api.on('reInit', onScroll);\n\n    return () => {\n      api.off('select', onScroll);\n      api.off('scroll', onScroll);\n      api.off('reInit', onScroll);\n    };\n  }, [api]);\n\n  return (\n    <div\n      className={clsx(\n        'relative flex h-6 w-full max-w-56 items-center overflow-hidden',\n        !canScrollPrev && !canScrollNext && 'pointer-events-none invisible',\n        className,\n      )}\n    >\n      <input\n        aria-label={label}\n        aria-orientation=\"horizontal\"\n        aria-valuenow={progress}\n        aria-valuetext={`${Math.round(progress)}%`}\n        className=\"absolute h-full w-full cursor-pointer appearance-none bg-transparent opacity-0\"\n        max={100}\n        min={0}\n        onChange={(e) => setProgress(e.currentTarget.valueAsNumber)}\n        type=\"range\"\n        value={progress}\n      />\n      {/* Track */}\n      <div\n        className={clsx(\n          'pointer-events-none absolute h-1 w-full rounded-full opacity-10',\n          {\n            light: 'bg-(--carousel-light-scrollbar,var(--foreground))',\n            dark: 'bg-(--carousel-dark-scrollbar,var(--background))',\n          }[colorScheme],\n        )}\n      />\n\n      {/* Bar */}\n      <div\n        className={clsx(\n          'pointer-events-none absolute h-1 rounded-full transition-all ease-out',\n          {\n            light: 'bg-(--carousel-light-scrollbar,var(--foreground))',\n            dark: 'bg-(--carousel-dark-scrollbar,var(--background))',\n          }[colorScheme],\n        )}\n        style={{\n          width: `${scrollbarPosition.width}%`,\n          left: `${scrollbarPosition.left}%`,\n        }}\n      />\n    </div>\n  );\n}\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselButtons,\n  CarouselScrollbar,\n};\n",
      "type": "registry:ui",
      "target": "vibes/soul/primitives/carousel/index.tsx"
    }
  ]
}